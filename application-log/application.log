{
  "timestamp" : "2023-06-12T17:06:04.125+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "com.twogather.twogatherwebbackend.TwogatherWebBackendApplication",
  "message" : "Starting TwogatherWebBackendApplication using Java 16.0.2 on LAPTOP-NJ38A8SC with PID 36480 (C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes started by User in C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.124+09",
  "level" : "DEBUG",
  "thread" : "background-preinit",
  "logger" : "org.jboss.logging",
  "message" : "Logging Provider: org.jboss.logging.Log4j2LoggerProvider",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.142+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.twogather.twogatherwebbackend.TwogatherWebBackendApplication",
  "message" : "Running with Spring Boot v2.7.9, Spring v5.3.25",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.143+09",
  "level" : "INFO",
  "thread" : "background-preinit",
  "logger" : "org.hibernate.validator.internal.util.Version",
  "message" : "HV000001: Hibernate Validator 6.2.5.Final",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.143+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "com.twogather.twogatherwebbackend.TwogatherWebBackendApplication",
  "message" : "The following 1 profile is active: \"prod\"",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.143+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.SpringApplication",
  "message" : "Loading source class com.twogather.twogatherwebbackend.TwogatherWebBackendApplication",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.150+09",
  "level" : "DEBUG",
  "thread" : "background-preinit",
  "logger" : "org.hibernate.validator.internal.xml.config.ValidationXmlParser",
  "message" : "Trying to load META-INF/validation.xml for XML based Validator configuration.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.152+09",
  "level" : "DEBUG",
  "thread" : "background-preinit",
  "logger" : "org.hibernate.validator.internal.xml.config.ResourceLoaderHelper",
  "message" : "Trying to load META-INF/validation.xml via TCCL",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.153+09",
  "level" : "DEBUG",
  "thread" : "background-preinit",
  "logger" : "org.hibernate.validator.internal.xml.config.ResourceLoaderHelper",
  "message" : "Trying to load META-INF/validation.xml via Hibernate Validator's class loader",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.154+09",
  "level" : "DEBUG",
  "thread" : "background-preinit",
  "logger" : "org.hibernate.validator.internal.xml.config.ValidationXmlParser",
  "message" : "No META-INF/validation.xml found. Using annotation based configuration only.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.160+09",
  "level" : "DEBUG",
  "thread" : "background-preinit",
  "logger" : "org.hibernate.validator.internal.engine.resolver.TraversableResolvers",
  "message" : "Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.162+09",
  "level" : "DEBUG",
  "thread" : "background-preinit",
  "logger" : "org.hibernate.validator.internal.engine.resolver.TraversableResolvers",
  "message" : "Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.184+09",
  "level" : "DEBUG",
  "thread" : "background-preinit",
  "logger" : "org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator",
  "message" : "Loaded expression factory via original TCCL",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.298+09",
  "level" : "DEBUG",
  "thread" : "background-preinit",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000252: Using org.hibernate.validator.internal.engine.DefaultPropertyNodeNameProvider as property node name provider.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.303+09",
  "level" : "DEBUG",
  "thread" : "background-preinit",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator as ValidatorFactory-scoped message interpolator.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.304+09",
  "level" : "DEBUG",
  "thread" : "background-preinit",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.hibernate.validator.internal.engine.resolver.JPATraversableResolver as ValidatorFactory-scoped traversable resolver.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.304+09",
  "level" : "DEBUG",
  "thread" : "background-preinit",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.304+09",
  "level" : "DEBUG",
  "thread" : "background-preinit",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.305+09",
  "level" : "DEBUG",
  "thread" : "background-preinit",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.348+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext",
  "message" : "Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.365+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.382+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.432+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\auth\\JwtAccessDeniedHandler.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.433+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\auth\\JwtAuthenticationEntryPoint.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.435+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\auth\\PrivateConstants.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.439+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\config\\CorsConfig.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.439+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\config\\PasswordEncoderConfig.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.440+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\config\\QueryDslConfig.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.446+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\config\\S3Config.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.451+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\config\\SecurityConfig.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.457+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\controller\\AdminController.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.460+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\controller\\BusinessHourController.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.461+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\controller\\CategoryController.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.462+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\controller\\CommentController.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.462+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\controller\\ConsumerController.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.466+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\controller\\ControllerAdvice.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.468+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\controller\\EmailController.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.468+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\controller\\ImageController.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.469+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\controller\\KeywordController.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.470+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\controller\\LikeController.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.470+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\controller\\MenuController.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.471+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\controller\\ReviewController.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.472+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\controller\\StoreController.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.472+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\controller\\StoreOwnerController.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.524+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\review\\ReviewCustomRepositoryImpl.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.525+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\store\\StoreCustomRepositoryImpl.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.528+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\BusinessHourService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.528+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\CategoryService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.529+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\CommentService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.530+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\ConsumerService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.532+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\CustomUserDetailsService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.532+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\EmailService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.533+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\ImageService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.533+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\KeywordService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.534+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\LikeService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.535+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\MemberService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.536+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\MenuService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.536+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\ReviewService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.537+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\S3Uploader.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.538+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\StoreKeywordService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.538+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\StoreOwnerService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.539+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\service\\StoreService.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.539+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\valid\\BizRegNumberValidator.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:04.540+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\valid\\BusinessHourValidator.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.048+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryConfigurationDelegate",
  "message" : "Bootstrapping Spring Data JPA repositories in DEFAULT mode.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.054+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.AutoConfigurationPackages'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.054+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.autoconfigure.AutoConfigurationPackages",
  "message" : "@EnableAutoConfiguration was declared on a class in the package 'com.twogather.twogatherwebbackend'. Automatic @Repository and @Entity scanning is enabled.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.055+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryConfigurationDelegate",
  "message" : "Scanning for JPA repositories in packages com.twogather.twogatherwebbackend.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.085+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\BusinessHourRepository.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.085+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\CategoryRepository.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.085+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\CommentRepository.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.085+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\ConsumerRepository.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.085+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\ImageRepository.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.085+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\KeywordRepository.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.085+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\LikeRepository.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.085+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\MemberRepository.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.085+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\MenuRepository.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.086+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\StoreKeywordRepository.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.086+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\StoreOwnerRepository.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.086+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\review\\ReviewRepository.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.087+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\store\\StoreRepository.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.152+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\review\\ReviewCustomRepositoryImpl.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.152+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider",
  "message" : "Identified candidate component class: file [C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes\\com\\twogather\\twogatherwebbackend\\repository\\store\\StoreCustomRepositoryImpl.class]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.163+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryBeanDefinitionBuilder",
  "message" : "Registering repository fragment: storeCustomRepositoryImplFragment",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.168+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryBeanDefinitionBuilder",
  "message" : "Registering repository fragment: reviewCustomRepositoryImplFragment",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.179+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.config.RepositoryConfigurationDelegate",
  "message" : "Finished Spring Data repository scanning in 122 ms. Found 13 JPA repository interfaces.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.305+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'propertySourcesPlaceholderConfigurer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.309+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'emBeanDefinitionRegistrarPostProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.309+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'conversionServicePostProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.346+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'preserveErrorControllerTargetClassPostProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.346+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.346+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.transaction.config.internalTransactionalEventListenerFactory'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.349+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.350+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.352+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.352+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.352+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.context.internalConfigurationPropertiesBinder'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.352+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.context.internalConfigurationPropertiesBinderFactory'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.354+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.379+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'methodValidationPostProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.401+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'methodValidationPostProcessor' via factory method to bean named 'environment'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.402+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.408+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'persistenceExceptionTranslationPostProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.409+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'persistenceExceptionTranslationPostProcessor' via factory method to bean named 'environment'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.411+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'webServerFactoryCustomizerBeanPostProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.411+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'errorPageRegistrarBeanPostProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.411+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'projectingArgumentResolverBeanPostProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.412+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'metaDataSourceAdvisor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.412+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'methodSecurityMetadataSource'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.412+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.412+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.412+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.420+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'transactionAttributeSource'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.423+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'transactionInterceptor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.423+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'transactionInterceptor' via factory method to bean named 'transactionAttributeSource'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.429+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.transaction.config.internalTransactionAdvisor' via factory method to bean named 'transactionAttributeSource'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.430+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.transaction.config.internalTransactionAdvisor' via factory method to bean named 'transactionInterceptor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.441+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'objectPostProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.441+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.443+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'objectPostProcessor' via factory method to bean named 'org.springframework.beans.factory.support.DefaultListableBeanFactory@1813f3e9'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.483+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.ui.context.support.UiApplicationContextUtils",
  "message" : "Unable to locate ThemeSource with name 'themeSource': using default [org.springframework.ui.context.support.ResourceBundleThemeSource@12c0c0b3]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.484+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'tomcatServletWebServerFactory'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.484+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.530+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'websocketServletWebServerCustomizer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.531+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.532+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'servletWebServerFactoryCustomizer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.532+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.533+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'server-org.springframework.boot.autoconfigure.web.ServerProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.538+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.context.properties.BoundConfigurationProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.546+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'servletWebServerFactoryCustomizer' via factory method to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.547+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'tomcatServletWebServerFactoryCustomizer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.548+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'tomcatServletWebServerFactoryCustomizer' via factory method to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.549+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'tomcatWebServerFactoryCustomizer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.549+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.550+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'tomcatWebServerFactoryCustomizer' via factory method to bean named 'environment'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.550+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'tomcatWebServerFactoryCustomizer' via factory method to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.551+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'localeCharsetMappingsCustomizer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.552+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.552+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration' via constructor to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.569+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'errorPageCustomizer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.569+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.569+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration' via constructor to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.570+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'dispatcherServletRegistration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.570+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.571+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'dispatcherServlet'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.571+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.572+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.575+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'dispatcherServlet' via factory method to bean named 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.586+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'dispatcherServletRegistration' via factory method to bean named 'dispatcherServlet'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.587+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'dispatcherServletRegistration' via factory method to bean named 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.588+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'multipartConfigElement'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.588+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.589+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.593+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration' via constructor to bean named 'spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.598+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'errorPageCustomizer' via factory method to bean named 'dispatcherServletRegistration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.671+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory",
  "message" : "Code archive: C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot\\2.7.9\\788d60e73e0f7bbbf11b30c3fb0a9cbaa073446b\\spring-boot-2.7.9.jar",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.672+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory",
  "message" : "Code archive: C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot\\2.7.9\\788d60e73e0f7bbbf11b30c3fb0a9cbaa073446b\\spring-boot-2.7.9.jar",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.672+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory",
  "message" : "None of the document roots [src/main/webapp, public, static] point to a directory and will be ignored.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.699+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.boot.web.embedded.tomcat.TomcatWebServer",
  "message" : "Tomcat initialized with port(s): 8080 (http)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.709+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.apache.coyote.http11.Http11NioProtocol",
  "message" : "Initializing ProtocolHandler [\"http-nio-8080\"]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.709+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.apache.catalina.core.StandardService",
  "message" : "Starting service [Tomcat]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.709+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.apache.catalina.core.StandardEngine",
  "message" : "Starting Servlet engine: [Apache Tomcat/9.0.71]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.893+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]",
  "message" : "Initializing Spring embedded WebApplicationContext",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.894+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext",
  "message" : "Published root WebApplicationContext as ServletContext attribute with name [org.springframework.web.context.WebApplicationContext.ROOT]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.894+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext",
  "message" : "Root WebApplicationContext: initialization completed in 1546 ms",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.897+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'errorPageSecurityFilter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.898+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.security.servlet.SpringBootWebSecurityConfiguration$ErrorPageSecurityFilterConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.899+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'errorPageSecurityFilter' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.902+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'securityFilterChainRegistration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.902+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.903+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.security-org.springframework.boot.autoconfigure.security.SecurityProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.905+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'securityFilterChainRegistration' via factory method to bean named 'spring.security-org.springframework.boot.autoconfigure.security.SecurityProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.909+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'corsFilter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.910+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'corsConfig'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.925+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'requestContextFilter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.927+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'formContentFilter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.927+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.930+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'characterEncodingFilter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.938+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.web.servlet.ServletContextInitializerBeans",
  "message" : "Mapping filters: springSecurityFilterChain urls=[/*] order=-100, filterRegistrationBean urls=[/*] order=2147483647, characterEncodingFilter urls=[/*] order=-2147483648, formContentFilter urls=[/*] order=-9900, requestContextFilter urls=[/*] order=-105, corsFilter urls=[/*] order=2147483647",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.938+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.web.servlet.ServletContextInitializerBeans",
  "message" : "Mapping servlets: dispatcherServlet urls=[/]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.953+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.web.servlet.filter.OrderedRequestContextFilter",
  "message" : "Filter 'requestContextFilter' configured for use",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.953+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.web.filter.CorsFilter",
  "message" : "Filter 'corsFilter' configured for use",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.953+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.web.servlet.filter.OrderedCharacterEncodingFilter",
  "message" : "Filter 'characterEncodingFilter' configured for use",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.953+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean$1",
  "message" : "Filter 'springSecurityFilterChain' configured for use",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.953+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.web.servlet.filter.OrderedFormContentFilter",
  "message" : "Filter 'formContentFilter' configured for use",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.959+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'dataSourceScriptDatabaseInitializer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.960+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.960+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'dataSource'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.960+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.961+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.967+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'dataSource' via factory method to bean named 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.969+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "Driver class com.mysql.cj.jdbc.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@66d3c617",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.985+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.987+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'dataSourceScriptDatabaseInitializer' via factory method to bean named 'dataSource'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.987+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'dataSourceScriptDatabaseInitializer' via factory method to bean named 'spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.990+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'entityManagerFactory'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.990+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.991+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.jpa-org.springframework.boot.autoconfigure.orm.jpa.JpaProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.994+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.jpa.hibernate-org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.997+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration' via constructor to bean named 'dataSource'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.997+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration' via constructor to bean named 'spring.jpa-org.springframework.boot.autoconfigure.orm.jpa.JpaProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.997+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration' via constructor to bean named 'org.springframework.beans.factory.support.DefaultListableBeanFactory@1813f3e9'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.997+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration' via constructor to bean named 'spring.jpa.hibernate-org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.999+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'hikariPoolDataSourceMetadataProvider'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:05.999+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration$HikariPoolDataSourceMetadataProviderConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.002+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'entityManagerFactoryBuilder'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.003+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'jpaVendorAdapter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.007+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'entityManagerFactoryBuilder' via factory method to bean named 'jpaVendorAdapter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.008+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'entityManagerFactory' via factory method to bean named 'entityManagerFactoryBuilder'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.032+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean",
  "message" : "Building JPA container EntityManagerFactory for persistence unit 'default'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.041+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.jpa.internal.util.LogHelper",
  "message" : "PersistenceUnitInfo [\n\tname: default\n\tpersistence provider classname: null\n\tclassloader: jdk.internal.loader.ClassLoaders$AppClassLoader@66d3c617\n\texcludeUnlistedClasses: true\n\tJTA datasource: null\n\tNon JTA datasource: HikariDataSource (null)\n\tTransaction type: RESOURCE_LOCAL\n\tPU root URL: file:/C:/Users/User/IdeaProjects/twogather-web-backend/twogather-web-backend/out/production/classes/\n\tShared Cache Mode: UNSPECIFIED\n\tValidation Mode: AUTO\n\tJar files URLs []\n\tManaged classes names [\n\t\tcom.twogather.twogatherwebbackend.domain.BusinessHour\n\t\tcom.twogather.twogatherwebbackend.domain.Category\n\t\tcom.twogather.twogatherwebbackend.domain.Comment\n\t\tcom.twogather.twogatherwebbackend.domain.Consumer\n\t\tcom.twogather.twogatherwebbackend.domain.Image\n\t\tcom.twogather.twogatherwebbackend.domain.Keyword\n\t\tcom.twogather.twogatherwebbackend.domain.Likes\n\t\tcom.twogather.twogatherwebbackend.domain.Member\n\t\tcom.twogather.twogatherwebbackend.domain.Menu\n\t\tcom.twogather.twogatherwebbackend.domain.Review\n\t\tcom.twogather.twogatherwebbackend.domain.Store\n\t\tcom.twogather.twogatherwebbackend.domain.StoreKeyword\n\t\tcom.twogather.twogatherwebbackend.domain.StoreOwner]\n\tMapping files names []\n\tProperties []",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.051+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.integrator.internal.IntegratorServiceImpl",
  "message" : "Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.053+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.integrator.internal.IntegratorServiceImpl",
  "message" : "Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.055+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.integrator.internal.IntegratorServiceImpl",
  "message" : "Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.091+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.hibernate.Version",
  "message" : "HHH000412: Hibernate ORM core version 5.6.15.Final",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.092+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Environment",
  "message" : "HHH000206: hibernate.properties not found",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.195+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.service.spi.ServiceBinding",
  "message" : "Overriding existing service binding [org.hibernate.secure.spi.JaccService]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.212+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cache.internal.RegionFactoryInitiator",
  "message" : "Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.213+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cache.internal.RegionFactoryInitiator",
  "message" : "Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.221+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.hibernate.annotations.common.Version",
  "message" : "HCANN000001: Hibernate Commons Annotations {5.1.2.Final}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.246+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration boolean -> org.hibernate.type.BooleanType@fe8aaeb",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.246+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration boolean -> org.hibernate.type.BooleanType@fe8aaeb",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.246+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@fe8aaeb",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.247+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@a323a5b",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.248+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration true_false -> org.hibernate.type.TrueFalseType@6a6da47a",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.248+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration yes_no -> org.hibernate.type.YesNoType@44aa91e2",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.249+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration byte -> org.hibernate.type.ByteType@653a5967",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.249+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration byte -> org.hibernate.type.ByteType@653a5967",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.250+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@653a5967",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.250+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration character -> org.hibernate.type.CharacterType@23ea8830",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.251+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration char -> org.hibernate.type.CharacterType@23ea8830",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.251+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@23ea8830",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.252+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration short -> org.hibernate.type.ShortType@1a7163e3",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.252+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration short -> org.hibernate.type.ShortType@1a7163e3",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.252+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1a7163e3",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.253+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration integer -> org.hibernate.type.IntegerType@1fc0d9b4",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.253+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration int -> org.hibernate.type.IntegerType@1fc0d9b4",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.253+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@1fc0d9b4",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.253+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration long -> org.hibernate.type.LongType@781c2497",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.253+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration long -> org.hibernate.type.LongType@781c2497",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.253+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.lang.Long -> org.hibernate.type.LongType@781c2497",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.255+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration float -> org.hibernate.type.FloatType@1a0f349",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.255+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration float -> org.hibernate.type.FloatType@1a0f349",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.255+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1a0f349",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.257+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration double -> org.hibernate.type.DoubleType@239b98cb",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.257+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration double -> org.hibernate.type.DoubleType@239b98cb",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.257+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@239b98cb",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.258+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@3e151e1f",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.258+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@3e151e1f",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.258+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration big_integer -> org.hibernate.type.BigIntegerType@77ea806f",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.258+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@77ea806f",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration string -> org.hibernate.type.StringType@26ca12a2",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.lang.String -> org.hibernate.type.StringType@26ca12a2",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.260+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration nstring -> org.hibernate.type.StringNVarcharType@afee63",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.260+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@70d3cdbf",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.261+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration url -> org.hibernate.type.UrlType@63de4fa",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.261+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.net.URL -> org.hibernate.type.UrlType@63de4fa",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.262+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration Duration -> org.hibernate.type.DurationType@7b1a30e5",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.262+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.time.Duration -> org.hibernate.type.DurationType@7b1a30e5",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.262+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration Instant -> org.hibernate.type.InstantType@1152900",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.262+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.time.Instant -> org.hibernate.type.InstantType@1152900",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.263+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@5ce3409b",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.263+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@5ce3409b",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration LocalDate -> org.hibernate.type.LocalDateType@7e747037",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@7e747037",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@5c5a91b4",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@5c5a91b4",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.267+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@634aa81e",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.267+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@634aa81e",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.268+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@2c8ff67",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.268+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@2c8ff67",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.269+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@2bb717d7",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.269+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@2bb717d7",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.271+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration date -> org.hibernate.type.DateType@16bbaab3",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.271+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.sql.Date -> org.hibernate.type.DateType@16bbaab3",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.272+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration time -> org.hibernate.type.TimeType@38089dae",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.273+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.sql.Time -> org.hibernate.type.TimeType@38089dae",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.273+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration timestamp -> org.hibernate.type.TimestampType@54f2df29",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.274+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@54f2df29",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.274+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.util.Date -> org.hibernate.type.TimestampType@54f2df29",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.275+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@729cd862",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.276+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration calendar -> org.hibernate.type.CalendarType@7c5f29c6",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.277+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@7c5f29c6",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.277+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@7c5f29c6",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.277+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@68fc9167",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.278+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@3a5e2525",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.278+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration locale -> org.hibernate.type.LocaleType@bfb93cf",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.278+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@bfb93cf",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.280+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration currency -> org.hibernate.type.CurrencyType@464ede1f",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.280+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@464ede1f",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.281+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration timezone -> org.hibernate.type.TimeZoneType@b428830",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.281+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@b428830",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.281+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration class -> org.hibernate.type.ClassType@6987a133",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.282+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.lang.Class -> org.hibernate.type.ClassType@6987a133",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.282+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@2a1e57c6",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.282+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@2a1e57c6",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.283+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@2353354a",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.283+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration binary -> org.hibernate.type.BinaryType@ba4f370",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.283+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration byte[] -> org.hibernate.type.BinaryType@ba4f370",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.284+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration [B -> org.hibernate.type.BinaryType@ba4f370",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.284+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@1682e6a",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.284+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@1682e6a",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.284+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@1682e6a",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.285+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration row_version -> org.hibernate.type.RowVersionType@67b560fe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.286+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration image -> org.hibernate.type.ImageType@446c8c72",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.286+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration characters -> org.hibernate.type.CharArrayType@1187dc82",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.286+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration char[] -> org.hibernate.type.CharArrayType@1187dc82",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.286+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration [C -> org.hibernate.type.CharArrayType@1187dc82",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.287+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@18026052",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.287+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@18026052",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.287+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@18026052",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.287+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration text -> org.hibernate.type.TextType@bb6f3f7",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration ntext -> org.hibernate.type.NTextType@36df4c26",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.289+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration blob -> org.hibernate.type.BlobType@590013c7",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.289+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@590013c7",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@62b0bf85",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.291+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration clob -> org.hibernate.type.ClobType@53e93fb7",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.291+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@53e93fb7",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration nclob -> org.hibernate.type.NClobType@5409dfdd",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@5409dfdd",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@20b54cfe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@283a8ad6",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration serializable -> org.hibernate.type.SerializableType@c497a55",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.297+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration object -> org.hibernate.type.ObjectType@41bb1f09",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.297+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@41bb1f09",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.297+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@12e5d3e1",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.297+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@5ed31735",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.297+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@2fb082ff",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.297+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@5a4c98d7",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.297+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@668a32a4",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.297+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@2026fbff",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.298+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@baa227e",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.298+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.BasicTypeRegistry",
  "message" : "Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@351e89fc",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.304+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.BootstrapContextImpl",
  "message" : "Injecting JPA temp ClassLoader [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@3e2d44f3] into BootstrapContext; was [null]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.304+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "ClassLoaderAccessImpl#injectTempClassLoader(org.springframework.instrument.classloading.SimpleThrowawayClassLoader@3e2d44f3) [was null]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.304+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.BootstrapContextImpl",
  "message" : "Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@44384b4a] into BootstrapContext; was [null]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.304+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.BootstrapContextImpl",
  "message" : "Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@5cc3e49b] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@4239262e]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.316+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.BootstrapContextImpl",
  "message" : "Injecting JPA temp ClassLoader [null] into BootstrapContext; was [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@3e2d44f3]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.316+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "ClassLoaderAccessImpl#injectTempClassLoader(null) [was org.springframework.instrument.classloading.SimpleThrowawayClassLoader@3e2d44f3]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.323+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory",
  "message" : "Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.323+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory",
  "message" : "Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.324+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory",
  "message" : "Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.324+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory",
  "message" : "Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.324+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory",
  "message" : "Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.326+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory",
  "message" : "Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.327+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory",
  "message" : "Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.328+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory",
  "message" : "Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory",
  "message" : "Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory",
  "message" : "Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory",
  "message" : "Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory",
  "message" : "Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory",
  "message" : "Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory",
  "message" : "Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "HikariPool-1 - configuration:",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "allowPoolSuspension................................false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "autoCommit................................true",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "catalog................................none",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "connectionInitSql................................none",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "connectionTestQuery................................none",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "connectionTimeout................................30000",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "dataSource................................none",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "dataSourceClassName................................none",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "dataSourceJNDI................................none",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "dataSourceProperties................................{password=<masked>}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "driverClassName................................\"com.mysql.cj.jdbc.Driver\"",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "exceptionOverrideClassName................................none",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "healthCheckProperties................................{}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "healthCheckRegistry................................none",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "idleTimeout................................600000",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "initializationFailTimeout................................1",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "isolateInternalQueries................................false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "jdbcUrl................................jdbc:mysql://twogather-db.cr364poigac8.ap-northeast-2.rds.amazonaws.com:3306/twogatherDB?useSSL=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "keepaliveTime................................0",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "leakDetectionThreshold................................0",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "maxLifetime................................1800000",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "maximumPoolSize................................10",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "metricRegistry................................none",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "metricsTrackerFactory................................none",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "minimumIdle................................10",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "password................................<masked>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "poolName................................\"HikariPool-1\"",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "readOnly................................false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "registerMbeans................................false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "scheduledExecutor................................none",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "schema................................none",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "threadFactory................................internal",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "transactionIsolation................................default",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "username................................\"admin\"",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariConfig",
  "message" : "validationTimeout................................5000",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.339+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariDataSource",
  "message" : "HikariPool-1 - Starting...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.557+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.pool.HikariPool",
  "message" : "HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7019d619",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.558+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "com.zaxxer.hikari.HikariDataSource",
  "message" : "HikariPool-1 - Start completed.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.562+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator",
  "message" : "Database ->\n       name : MySQL\n    version : 8.0.32\n      major : 8\n      minor : 0",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.562+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator",
  "message" : "Driver ->\n       name : MySQL Connector/J\n    version : mysql-connector-j-8.0.32 (Revision: fa4912a849140828e48162a2c396c8df0091bed7)\n      major : 8\n      minor : 0",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.562+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator",
  "message" : "JDBC version : 4.2",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.571+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.hibernate.dialect.Dialect",
  "message" : "HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.584+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.jdbc.env.spi.IdentifierHelperBuilder",
  "message" : "JDBC driver metadata reported database stores quoted identifiers in more than one case",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.584+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.jdbc.env.spi.IdentifierHelperBuilder",
  "message" : "IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [MIXED]; that will likely lead to problems in schema update and validation if using quoted identifiers",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.603+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.spi.TypeConfiguration$Scope",
  "message" : "Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@36cfe107] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@100eeedc]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.617+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.model.relational.Namespace",
  "message" : "Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.626+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AnnotationBinder",
  "message" : "Binding entity from annotated class: com.twogather.twogatherwebbackend.domain.BusinessHour",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.644+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.649+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Import with entity name BusinessHour",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.656+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Bind entity com.twogather.twogatherwebbackend.domain.BusinessHour on table business_hour",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.668+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 housekeeper",
  "logger" : "com.zaxxer.hikari.pool.HikariPool",
  "message" : "HikariPool-1 - Pool stats (total=1, active=0, idle=1, waiting=0)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.674+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(business_hour), mappingColumn=business_hour_id, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.676+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.BusinessHour] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.676+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.BusinessHour",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.677+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property businessHourId with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.679+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.BusinessHour:businessHourId]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.681+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for businessHourId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.684+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property businessHourId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.689+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.BinderHelper",
  "message" : "#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(business_hour_id)]), businessHourId, identity, , ...)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.690+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(business_hour), mappingColumn=break_end_time, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.690+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property breakEndTime with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.690+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.BusinessHour:breakEndTime]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.690+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for breakEndTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.691+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property breakEndTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.692+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(business_hour), mappingColumn=break_start_time, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.692+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property breakStartTime with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.692+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.BusinessHour:breakStartTime]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.692+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for breakStartTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.692+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property breakStartTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.693+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(business_hour), mappingColumn=day_of_week, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.693+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property dayOfWeek with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.693+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.BusinessHour:dayOfWeek]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.694+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for dayOfWeek",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.694+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property dayOfWeek",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.694+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(business_hour), mappingColumn=end_time, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.694+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property endTime with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.695+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.BusinessHour:endTime]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.695+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for endTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.695+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property endTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.695+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(business_hour), mappingColumn=has_break_time, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.695+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property hasBreakTime with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.695+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.BusinessHour:hasBreakTime]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.695+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for hasBreakTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.696+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property hasBreakTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.696+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(business_hour), mappingColumn=is_open, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.696+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property isOpen with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.696+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.BusinessHour:isOpen]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.696+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for isOpen",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.697+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property isOpen",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.697+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(business_hour), mappingColumn=start_time, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.697+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property startTime with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.697+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.BusinessHour:startTime]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.697+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for startTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.698+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property startTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.700+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='store_id', referencedColumn='', mappedBy=''}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.700+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(business_hour), mappingColumn=store, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.704+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.710+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AnnotationBinder",
  "message" : "Binding entity from annotated class: com.twogather.twogatherwebbackend.domain.Category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.710+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.710+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Import with entity name Category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.710+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Bind entity com.twogather.twogatherwebbackend.domain.Category on table category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.711+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(category), mappingColumn=category_id, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.711+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Category] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.711+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.712+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property categoryId with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.712+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Category:categoryId]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.712+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for categoryId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.712+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property categoryId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.712+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.BinderHelper",
  "message" : "#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(category_id)]), categoryId, identity, , ...)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.712+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(category), mappingColumn=name, insertable=true, updatable=true, unique=true}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.712+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property name with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.712+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Category:name]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.712+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AnnotationBinder",
  "message" : "Binding entity from annotated class: com.twogather.twogatherwebbackend.domain.Comment",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Import with entity name Comment",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Bind entity com.twogather.twogatherwebbackend.domain.Comment on table comment",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(comment), mappingColumn=comment_id, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Comment] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Comment",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property commentId with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Comment:commentId]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for commentId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property commentId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.714+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.BinderHelper",
  "message" : "#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(comment_id)]), commentId, identity, , ...)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.714+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='member_id', referencedColumn='', mappedBy=''}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.714+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(comment), mappingColumn=commenter, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.714+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property commenter",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.714+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(comment), mappingColumn=content, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.714+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property content with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.714+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Comment:content]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.715+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for content",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.715+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property content",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.715+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(comment), mappingColumn=created_date, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.715+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property createdDate with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.715+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Comment:createdDate]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.716+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for createdDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.716+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property createdDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.716+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='review_id', referencedColumn='', mappedBy=''}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.716+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(comment), mappingColumn=review, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.716+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.717+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AnnotationBinder",
  "message" : "Binding entity from annotated class: com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.717+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AnnotationBinder",
  "message" : "Ignoring implicit (absent) DiscriminatorColumn",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.717+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Import with entity name Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.717+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Bind entity com.twogather.twogatherwebbackend.domain.Member on table member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.721+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(member), mappingColumn=member_id, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.721+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Member] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.721+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.721+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property memberId with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.721+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Member:memberId]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.722+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for memberId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.722+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property memberId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.722+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.BinderHelper",
  "message" : "#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(member_id)]), memberId, identity, , ...)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.722+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(member), mappingColumn=authentication_type, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.722+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property authenticationType with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.723+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Member:authenticationType]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.723+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for authenticationType",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.723+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property authenticationType",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.723+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(member), mappingColumn=email, insertable=true, updatable=true, unique=true}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.724+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property email with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.724+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Member:email]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.724+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for email",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.724+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property email",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.724+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(member), mappingColumn=is_active, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.724+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property isActive with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.724+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Member:isActive]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.725+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for isActive",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.725+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property isActive",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.725+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(member), mappingColumn=name, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.725+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property name with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.725+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Member:name]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.725+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.725+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.726+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(member), mappingColumn=password, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.726+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property password with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.726+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Member:password]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.726+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for password",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.726+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property password",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.726+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(member), mappingColumn=username, insertable=true, updatable=true, unique=true}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.726+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property username with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.726+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Member:username]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.727+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for username",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.727+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property username",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.727+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AnnotationBinder",
  "message" : "Binding entity from annotated class: com.twogather.twogatherwebbackend.domain.Consumer",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.729+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='member_id', referencedColumn='null', mappedBy='null'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.729+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Import with entity name Consumer",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.730+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Bind entity com.twogather.twogatherwebbackend.domain.Consumer on table consumer",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.733+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='reviewer'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.734+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(consumer), mappingColumn=review_list, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.735+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(consumer), mappingColumn=null, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.740+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(consumer), mappingColumn=element, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.740+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(consumer), mappingColumn=review_list_key, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.740+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='reviewList_KEY', referencedColumn='null', mappedBy='null'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.741+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='reviewer'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.741+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='reviewer'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.741+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Collection role: com.twogather.twogatherwebbackend.domain.Consumer.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.742+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.743+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AnnotationBinder",
  "message" : "Binding entity from annotated class: com.twogather.twogatherwebbackend.domain.Image",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.743+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.743+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Import with entity name Image",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.743+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Bind entity com.twogather.twogatherwebbackend.domain.Image on table image",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.743+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(image), mappingColumn=image_id, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.743+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Image] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.743+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Image",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.744+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property imageId with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.744+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Image:imageId]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.744+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for imageId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.744+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property imageId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.744+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.BinderHelper",
  "message" : "#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(image_id)]), imageId, identity, , ...)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.744+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='store_id', referencedColumn='', mappedBy=''}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.744+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(image), mappingColumn=store, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.744+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.745+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(image), mappingColumn=url, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.745+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property url with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.745+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Image:url]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.745+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for url",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.745+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property url",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.745+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AnnotationBinder",
  "message" : "Binding entity from annotated class: com.twogather.twogatherwebbackend.domain.Keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.745+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.745+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Import with entity name Keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.745+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Bind entity com.twogather.twogatherwebbackend.domain.Keyword on table keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.745+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(keyword), mappingColumn=keyword_id, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.746+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Keyword] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.746+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.746+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property keywordId with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.746+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Keyword:keywordId]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.746+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for keywordId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.747+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property keywordId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.747+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.BinderHelper",
  "message" : "#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(keyword_id)]), keywordId, identity, , ...)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.747+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(keyword), mappingColumn=name, insertable=true, updatable=true, unique=true}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.747+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property name with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.747+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Keyword:name]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.747+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.747+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.747+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AnnotationBinder",
  "message" : "Binding entity from annotated class: com.twogather.twogatherwebbackend.domain.Likes",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.748+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.748+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Import with entity name Likes",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.748+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Bind entity com.twogather.twogatherwebbackend.domain.Likes on table likes",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.748+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(likes), mappingColumn=likes_id, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.748+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Likes] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Likes",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property likesId with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Likes:likesId]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for likesId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property likesId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.BinderHelper",
  "message" : "#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(likes_id)]), likesId, identity, , ...)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='member_id', referencedColumn='', mappedBy=''}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(likes), mappingColumn=member, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='store_id', referencedColumn='', mappedBy=''}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(likes), mappingColumn=store, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AnnotationBinder",
  "message" : "Binding entity from annotated class: com.twogather.twogatherwebbackend.domain.Menu",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Import with entity name Menu",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Bind entity com.twogather.twogatherwebbackend.domain.Menu on table menu",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(menu), mappingColumn=menu_id, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Menu] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.751+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Menu",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.751+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property menuId with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.751+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Menu:menuId]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.751+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for menuId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.751+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property menuId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.751+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.BinderHelper",
  "message" : "#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(menu_id)]), menuId, identity, , ...)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.751+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(menu), mappingColumn=name, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.751+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property name with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.751+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Menu:name]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.752+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.752+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.752+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(menu), mappingColumn=price, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.752+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property price with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.752+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Menu:price]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.752+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for price",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.752+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property price",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.752+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='store_id', referencedColumn='', mappedBy=''}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.752+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(menu), mappingColumn=store, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.752+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.752+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AnnotationBinder",
  "message" : "Binding entity from annotated class: com.twogather.twogatherwebbackend.domain.Review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.753+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.753+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Import with entity name Review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.753+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Bind entity com.twogather.twogatherwebbackend.domain.Review on table review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.754+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(review), mappingColumn=review_id, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.756+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Review] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.756+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.756+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property reviewId with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.756+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Review:reviewId]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.756+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for reviewId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.756+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property reviewId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.756+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.BinderHelper",
  "message" : "#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(review_id)]), reviewId, identity, , ...)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.756+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='review'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.756+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(review), mappingColumn=comment_list, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.756+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(review), mappingColumn=null, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.756+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(review), mappingColumn=element, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.756+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(review), mappingColumn=comment_list_key, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.756+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='commentList_KEY', referencedColumn='null', mappedBy='null'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='review'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='review'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Collection role: com.twogather.twogatherwebbackend.domain.Review.commentList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property commentList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(review), mappingColumn=content, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property content with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Review:content]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for content",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property content",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(review), mappingColumn=created_date, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property createdDate with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Review:createdDate]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for createdDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property createdDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.758+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='member_id', referencedColumn='', mappedBy=''}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.758+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(review), mappingColumn=reviewer, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.758+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property reviewer",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.758+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(review), mappingColumn=score, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.758+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property score with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.758+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Review:score]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.758+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for score",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.758+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property score",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.758+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='store_id', referencedColumn='', mappedBy=''}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.758+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(review), mappingColumn=store, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.758+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.758+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AnnotationBinder",
  "message" : "Binding entity from annotated class: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.759+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.759+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Import with entity name Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.759+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Bind entity com.twogather.twogatherwebbackend.domain.Store on table store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.760+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=store_id, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.761+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Store] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.761+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.761+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property storeId with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.761+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Store:storeId]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.761+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for storeId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.761+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property storeId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.761+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.BinderHelper",
  "message" : "#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(store_id)]), storeId, identity, , ...)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.761+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=address, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.761+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property address with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.761+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Store:address]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.761+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for address",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.761+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property address",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.761+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.762+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=business_hour_list, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.762+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=null, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.762+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=element, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.762+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=business_hour_list_key, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.762+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='businessHourList_KEY', referencedColumn='null', mappedBy='null'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.762+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.762+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.762+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Collection role: com.twogather.twogatherwebbackend.domain.Store.businessHourList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.762+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property businessHourList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.762+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=business_name, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.762+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property businessName with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.762+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Store:businessName]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for businessName",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property businessName",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=business_number, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property businessNumber with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Store:businessNumber]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for businessNumber",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property businessNumber",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=business_start_date, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property businessStartDate with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Store:businessStartDate]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for businessStartDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property businessStartDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='category_id', referencedColumn='', mappedBy=''}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=category, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=likes_list, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=null, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=element, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=likes_list_key, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='likesList_KEY', referencedColumn='null', mappedBy='null'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Collection role: com.twogather.twogatherwebbackend.domain.Store.likesList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property likesList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=menu_list, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=null, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=element, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=menu_list_key, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='menuList_KEY', referencedColumn='null', mappedBy='null'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.764+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.764+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Collection role: com.twogather.twogatherwebbackend.domain.Store.menuList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.764+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property menuList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.764+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=name, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.764+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property name with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.764+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Store:name]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.764+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.764+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.764+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='member_id', referencedColumn='', mappedBy=''}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.764+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=owner, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.764+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property owner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.764+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=phone, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property phone with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Store:phone]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for phone",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property phone",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.765+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection adder",
  "logger" : "com.zaxxer.hikari.pool.HikariPool",
  "message" : "HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2f11d595",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=reason_for_rejection, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property reasonForRejection with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Store:reasonForRejection]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for reasonForRejection",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property reasonForRejection",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=request_date, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property requestDate with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Store:requestDate]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for requestDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.766+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property requestDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.766+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.766+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=review_list, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.766+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=null, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.766+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=element, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.766+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=review_list_key, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.766+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='reviewList_KEY', referencedColumn='null', mappedBy='null'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.766+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.766+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.766+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Collection role: com.twogather.twogatherwebbackend.domain.Store.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.766+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=status, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property status with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.Store:status]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for status",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property status",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=store_image_list, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=null, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=element, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=store_image_list_key, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='storeImageList_KEY', referencedColumn='null', mappedBy='null'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Collection role: com.twogather.twogatherwebbackend.domain.Store.storeImageList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property storeImageList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.768+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.768+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=store_keyword_list, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.768+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=null, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.768+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=element, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.768+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store), mappingColumn=store_keyword_list_key, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.768+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='storeKeywordList_KEY', referencedColumn='null', mappedBy='null'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.768+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.768+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='store'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.768+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Collection role: com.twogather.twogatherwebbackend.domain.Store.storeKeywordList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.768+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property storeKeywordList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.769+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AnnotationBinder",
  "message" : "Binding entity from annotated class: com.twogather.twogatherwebbackend.domain.StoreKeyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.769+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.769+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Import with entity name StoreKeyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.769+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Bind entity com.twogather.twogatherwebbackend.domain.StoreKeyword on table store_keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.769+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store_keyword), mappingColumn=store_keyword_id, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.769+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.StoreKeyword] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.769+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.StoreKeyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.769+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "MetadataSourceProcessor property storeKeywordId with lazy=false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.769+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AbstractPropertyHolder",
  "message" : "Attempting to locate auto-apply AttributeConverter for property [com.twogather.twogatherwebbackend.domain.StoreKeyword:storeKeywordId]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.769+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "building SimpleValue for storeKeywordId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.770+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property storeKeywordId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.770+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.BinderHelper",
  "message" : "#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(store_keyword_id)]), storeKeywordId, identity, , ...)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.770+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='keyword_id', referencedColumn='', mappedBy=''}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.770+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store_keyword), mappingColumn=keyword, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.770+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.770+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='store_id', referencedColumn='', mappedBy=''}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.770+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store_keyword), mappingColumn=store, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.770+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.770+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.AnnotationBinder",
  "message" : "Binding entity from annotated class: com.twogather.twogatherwebbackend.domain.StoreOwner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.770+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='member_id', referencedColumn='null', mappedBy='null'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.770+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Import with entity name StoreOwner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.770+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.EntityBinder",
  "message" : "Bind entity com.twogather.twogatherwebbackend.domain.StoreOwner on table store_owner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.771+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='owner'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.771+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store_owner), mappingColumn=store_list, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.771+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store_owner), mappingColumn=null, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.771+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store_owner), mappingColumn=element, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.771+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3Column{table=org.hibernate.mapping.Table(store_owner), mappingColumn=store_list_key, insertable=true, updatable=true, unique=false}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.771+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='storeList_KEY', referencedColumn='null', mappedBy='null'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.771+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='owner'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.771+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Ejb3Column",
  "message" : "Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='owner'}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.771+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Collection role: com.twogather.twogatherwebbackend.domain.StoreOwner.storeList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.771+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.PropertyBinder",
  "message" : "Building property storeList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for businessHourId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for breakEndTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for breakStartTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for dayOfWeek",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for endTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for hasBreakTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for isOpen",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for startTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for categoryId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for commentId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for content",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for createdDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for memberId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for authenticationType",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for email",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for isActive",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for password",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for username",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for imageId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for url",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for keywordId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for likesId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for menuId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for price",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for reviewId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for content",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for createdDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for score",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for storeId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for address",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for businessName",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for businessNumber",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for businessStartDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for phone",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for reasonForRejection",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for requestDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for status",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.774+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.SimpleValueBinder",
  "message" : "Starting fillSimpleValue for storeKeywordId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.780+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.PrimaryKey",
  "message" : "Forcing column [business_hour_id] to be non-null as it is part of the primary key for table [business_hour]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.780+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.PrimaryKey",
  "message" : "Forcing column [category_id] to be non-null as it is part of the primary key for table [category]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.780+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.PrimaryKey",
  "message" : "Forcing column [comment_id] to be non-null as it is part of the primary key for table [comment]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.780+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.PrimaryKey",
  "message" : "Forcing column [member_id] to be non-null as it is part of the primary key for table [member]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.780+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.PrimaryKey",
  "message" : "Forcing column [member_id] to be non-null as it is part of the primary key for table [consumer]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.781+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.PrimaryKey",
  "message" : "Forcing column [image_id] to be non-null as it is part of the primary key for table [image]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.781+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.PrimaryKey",
  "message" : "Forcing column [keyword_id] to be non-null as it is part of the primary key for table [keyword]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.781+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.PrimaryKey",
  "message" : "Forcing column [likes_id] to be non-null as it is part of the primary key for table [likes]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.781+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.PrimaryKey",
  "message" : "Forcing column [menu_id] to be non-null as it is part of the primary key for table [menu]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.781+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.PrimaryKey",
  "message" : "Forcing column [review_id] to be non-null as it is part of the primary key for table [review]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.781+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.PrimaryKey",
  "message" : "Forcing column [store_id] to be non-null as it is part of the primary key for table [store]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.781+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.PrimaryKey",
  "message" : "Forcing column [store_keyword_id] to be non-null as it is part of the primary key for table [store_keyword]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.781+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.PrimaryKey",
  "message" : "Forcing column [member_id] to be non-null as it is part of the primary key for table [store_owner]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.781+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Second pass for collection: com.twogather.twogatherwebbackend.domain.Consumer.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.781+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Binding a OneToMany: com.twogather.twogatherwebbackend.domain.Consumer.reviewList through a foreign key",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.782+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Mapping collection: com.twogather.twogatherwebbackend.domain.Consumer.reviewList -> review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.782+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.TableBinder",
  "message" : "Retrieving property com.twogather.twogatherwebbackend.domain.Review.reviewer",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Mapped collection key: member_id, one-to-many: com.twogather.twogatherwebbackend.domain.Review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Second pass for collection: com.twogather.twogatherwebbackend.domain.Review.commentList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Binding a OneToMany: com.twogather.twogatherwebbackend.domain.Review.commentList through a foreign key",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Mapping collection: com.twogather.twogatherwebbackend.domain.Review.commentList -> comment",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.TableBinder",
  "message" : "Retrieving property com.twogather.twogatherwebbackend.domain.Comment.review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Mapped collection key: review_id, one-to-many: com.twogather.twogatherwebbackend.domain.Comment",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Second pass for collection: com.twogather.twogatherwebbackend.domain.Store.businessHourList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Binding a OneToMany: com.twogather.twogatherwebbackend.domain.Store.businessHourList through a foreign key",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Mapping collection: com.twogather.twogatherwebbackend.domain.Store.businessHourList -> business_hour",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.TableBinder",
  "message" : "Retrieving property com.twogather.twogatherwebbackend.domain.BusinessHour.store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Mapped collection key: store_id, one-to-many: com.twogather.twogatherwebbackend.domain.BusinessHour",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Second pass for collection: com.twogather.twogatherwebbackend.domain.Store.likesList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Binding a OneToMany: com.twogather.twogatherwebbackend.domain.Store.likesList through a foreign key",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Mapping collection: com.twogather.twogatherwebbackend.domain.Store.likesList -> likes",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.TableBinder",
  "message" : "Retrieving property com.twogather.twogatherwebbackend.domain.Likes.store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Mapped collection key: store_id, one-to-many: com.twogather.twogatherwebbackend.domain.Likes",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Second pass for collection: com.twogather.twogatherwebbackend.domain.Store.menuList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Binding a OneToMany: com.twogather.twogatherwebbackend.domain.Store.menuList through a foreign key",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Mapping collection: com.twogather.twogatherwebbackend.domain.Store.menuList -> menu",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.TableBinder",
  "message" : "Retrieving property com.twogather.twogatherwebbackend.domain.Menu.store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Mapped collection key: store_id, one-to-many: com.twogather.twogatherwebbackend.domain.Menu",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Second pass for collection: com.twogather.twogatherwebbackend.domain.Store.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Binding a OneToMany: com.twogather.twogatherwebbackend.domain.Store.reviewList through a foreign key",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.783+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Mapping collection: com.twogather.twogatherwebbackend.domain.Store.reviewList -> review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.TableBinder",
  "message" : "Retrieving property com.twogather.twogatherwebbackend.domain.Review.store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Mapped collection key: store_id, one-to-many: com.twogather.twogatherwebbackend.domain.Review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Second pass for collection: com.twogather.twogatherwebbackend.domain.Store.storeImageList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Binding a OneToMany: com.twogather.twogatherwebbackend.domain.Store.storeImageList through a foreign key",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Mapping collection: com.twogather.twogatherwebbackend.domain.Store.storeImageList -> image",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.TableBinder",
  "message" : "Retrieving property com.twogather.twogatherwebbackend.domain.Image.store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Mapped collection key: store_id, one-to-many: com.twogather.twogatherwebbackend.domain.Image",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Second pass for collection: com.twogather.twogatherwebbackend.domain.Store.storeKeywordList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Binding a OneToMany: com.twogather.twogatherwebbackend.domain.Store.storeKeywordList through a foreign key",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Mapping collection: com.twogather.twogatherwebbackend.domain.Store.storeKeywordList -> store_keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.TableBinder",
  "message" : "Retrieving property com.twogather.twogatherwebbackend.domain.StoreKeyword.store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Mapped collection key: store_id, one-to-many: com.twogather.twogatherwebbackend.domain.StoreKeyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Second pass for collection: com.twogather.twogatherwebbackend.domain.StoreOwner.storeList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Binding a OneToMany: com.twogather.twogatherwebbackend.domain.StoreOwner.storeList through a foreign key",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.CollectionBinder",
  "message" : "Mapping collection: com.twogather.twogatherwebbackend.domain.StoreOwner.storeList -> store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.annotations.TableBinder",
  "message" : "Retrieving property com.twogather.twogatherwebbackend.domain.Store.owner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.CollectionSecondPass",
  "message" : "Mapped collection key: member_id, one-to-many: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.784+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.788+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.788+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.788+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.788+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.788+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.788+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.788+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.788+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.788+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.788+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.789+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.StoreOwner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.789+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.789+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.789+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.790+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.790+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.790+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.791+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.791+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.791+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.791+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.791+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.791+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.791+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.791+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.791+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.StoreOwner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.791+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.791+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.791+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.InFlightMetadataCollectorImpl",
  "message" : "Resolving reference to class: com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.810+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.internal.SessionFactoryImpl",
  "message" : "Building session factory",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.810+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "SessionFactory name : null",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.810+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Automatic flush during beforeCompletion(): enabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Automatic session close at end of transaction: disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Statistics: disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Deleted entity synthetic identifier rollback: disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Default entity-mode: pojo",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Check Nullability in Core (should be disabled when Bean Validation is on): enabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Allow initialization of lazy state outside session : disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Using BatchFetchStyle : LEGACY",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Default batch fetch size: 10",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Maximum outer join fetch depth: 2",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Default null ordering: NONE",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Order SQL updates by primary key: enabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Order SQL inserts for batching: enabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "multi-tenancy strategy : NONE",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "JTA Track by Thread: enabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Query language substitutions: {}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Named query checking : enabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Second-level cache: disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Second-level query cache: disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Second-level query cache factory: null",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Second-level cache region prefix: null",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Optimize second-level cache for minimal puts: disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Structured second-level cache entries: disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Second-level cache direct-reference entries: disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Automatic eviction of collection cache: disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "JDBC batch size: 30",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "JDBC batch updates for versioned data: enabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Scrollable result sets: enabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Wrap result sets: disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "JDBC3 getGeneratedKeys(): enabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "JDBC result set fetch size: null",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Connection release mode: ON_CLOSE",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "Generate SQL with comments: disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "JPA compliance - query : disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "JPA compliance - closed-handling : disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.811+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "JPA compliance - lists : disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.812+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.cfg.Settings",
  "message" : "JPA compliance - transactions : disabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.820+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.StoreOwner] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.820+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.StoreOwner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.820+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Consumer] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.820+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Consumer",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.846+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.service.internal.SessionFactoryServiceRegistryImpl",
  "message" : "EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.847+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.service.internal.SessionFactoryServiceRegistryImpl",
  "message" : "EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.857+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection adder",
  "logger" : "com.zaxxer.hikari.pool.HikariPool",
  "message" : "HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6e2cdfae",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.859+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.internal.SessionFactoryImpl",
  "message" : "Session factory constructed with filter configurations : {}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.859+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.internal.SessionFactoryImpl",
  "message" : "Instantiating session factory with properties: {hibernate.id.new_generator_mappings=true, java.specification.version=16, sun.cpu.isalist=amd64, hibernate.resource.beans.container=org.springframework.orm.hibernate5.SpringBeanContainer@2591d23a, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.jnu.encoding=MS949, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy, java.class.path=C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\classes;C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend\\out\\production\\resources;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.projectlombok\\lombok\\1.18.20\\18bcea7d5df4d49227b4a0743a536208ce4825bb\\lombok-1.18.20.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot-starter-data-jpa\\2.7.9\\5af4a206fd4eaac881b7d96ca1ef19b2111a355c\\spring-boot-starter-data-jpa-2.7.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot-starter-web\\2.7.9\\e745a069e2b7ca51e378fcbc397d14dd82178199\\spring-boot-starter-web-2.7.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\junit\\junit\\4.13.2\\8ac9e16d933b6fb43bc7f576336b8f4d7eb5ba12\\junit-4.13.2.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot-starter-validation\\2.7.9\\7cfc9801c13eefd3d20499c2371d921eb11c328\\spring-boot-starter-validation-2.7.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.json\\json\\20230227\\7a0d4aca76513d8ce81f9b044ce8126b84809ad8\\json-20230227.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.restdocs\\spring-restdocs-restassured\\2.0.7.RELEASE\\59952d8abfe0b32e5b91982afbfb6acd8a833377\\spring-restdocs-restassured-2.0.7.RELEASE.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\io.rest-assured\\rest-assured\\4.4.0\\ff8532f394b2e4607a6940edce58474745cd3837\\rest-assured-4.4.0.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\io.jsonwebtoken\\jjwt-api\\0.11.5\\f742940045619d06383e7df37b21ac422b476cf1\\jjwt-api-0.11.5.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot-starter-security\\2.7.9\\ca8e422a56493e99a7c8c9d56d92091256d9fed7\\spring-boot-starter-security-2.7.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot-starter-mail\\2.7.9\\56d67612804aff9f67251bb2e17d2dc17acb156c\\spring-boot-starter-mail-2.7.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\io.findify\\s3mock_2.12\\0.2.4\\eca22857bb99ad597c636e69d5b25ca2704905d3\\s3mock_2.12-0.2.4.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.google.guava\\guava\\30.1.1-jre\\87e0fd1df874ea3cbe577702fe6f17068b790fd8\\guava-30.1.1-jre.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.auth0\\java-jwt\\3.4.1\\4abde7b59cfd0779b8db2de32e1f3f714c0bc232\\java-jwt-3.4.1.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.querydsl\\querydsl-jpa\\5.0.0\\2d66608cb2cbcde56290e49f2918960cc17fcb09\\querydsl-jpa-5.0.0.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.querydsl\\querydsl-apt\\5.0.0\\fa5554c395bdcbe9846242824857a82874ad3223\\querydsl-apt-5.0.0.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.amazonaws\\aws-java-sdk-s3\\1.12.464\\8c6b2ce73955ab9051a51da7ff35ae9d9675f86c\\aws-java-sdk-s3-1.12.464.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.mariadb.jdbc\\mariadb-java-client\\2.7.4\\6d6ea84c870837afa63f5f55efde211a84cf2897\\mariadb-java-client-2.7.4.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\ch.qos.logback.contrib\\logback-json-classic\\0.1.5\\f7fd4e747a9b0c50fc4f71b0055d5bea64dc05c3\\logback-json-classic-0.1.5.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\ch.qos.logback\\logback-classic\\1.2.3\\7c4f3c474fb2c041d8028740440937705ebb473a\\logback-classic-1.2.3.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\net.logstash.logback\\logstash-logback-encoder\\6.6\\b030a972a1161f532ec459e32a36aff6326e02ea\\logstash-logback-encoder-6.6.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\ch.qos.logback.contrib\\logback-jackson\\0.1.5\\e8b202a23691048a01e6322dd040f75e08e9ca2\\logback-jackson-0.1.5.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\ch.qos.logback.contrib\\logback-json-core\\0.1.5\\90bdb547819957fc940188f5830b7b59375f6fdd\\logback-json-core-0.1.5.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot-starter-aop\\2.7.9\\9bd6ddd1f956f44dc954ec6915123998c3afe7ce\\spring-boot-starter-aop-2.7.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot-starter-jdbc\\2.7.9\\e09f4ac40a09826c3eff01369d5b56e2abcea9c9\\spring-boot-starter-jdbc-2.7.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\jakarta.transaction\\jakarta.transaction-api\\1.3.3\\c4179d48720a1e87202115fbed6089bdc4195405\\jakarta.transaction-api-1.3.3.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\jakarta.persistence\\jakarta.persistence-api\\2.2.3\\8f6ea5daedc614f07a3654a455660145286f024e\\jakarta.persistence-api-2.2.3.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.hibernate\\hibernate-core\\5.6.15.Final\\ab14b7cef1fdff654ca81923048a6034d6c7cfa7\\hibernate-core-5.6.15.Final.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.data\\spring-data-jpa\\2.7.8\\feb737f6eda0f40b8170d19e87df0fe7b58004d5\\spring-data-jpa-2.7.8.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework\\spring-aspects\\5.3.25\\7afc5817a53aaccb2d71858cc5dceba716dba1db\\spring-aspects-5.3.25.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot-starter-json\\2.7.9\\671b3611eeb2fb315281ae17242ef082666e4262\\spring-boot-starter-json-2.7.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot-starter\\2.7.9\\19f855d327f68690cf630698e4e41c3afe134a83\\spring-boot-starter-2.7.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot-starter-tomcat\\2.7.9\\a1076e6ffa1d771d3ccd18e72280317a152323e8\\spring-boot-starter-tomcat-2.7.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework\\spring-webmvc\\5.3.25\\62a8258bcc4f7a58dd69af5140481b64653c90\\spring-webmvc-5.3.25.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework\\spring-web\\5.3.25\\c69815e7931cd3ce7f19cc8028fd1c36626120d6\\spring-web-5.3.25.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.hamcrest\\hamcrest-core\\2.2\\3f2bd07716a31c395e2837254f37f21f0f0ab24b\\hamcrest-core-2.2.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.tomcat.embed\\tomcat-embed-el\\9.0.71\\8fe43848c27ec921c8c5d6dcbd8b959076d7bf99\\tomcat-embed-el-9.0.71.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.hibernate.validator\\hibernate-validator\\6.2.5.Final\\a68959c06e5f8ff45faff469aa16f232c04af620\\hibernate-validator-6.2.5.Final.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.restdocs\\spring-restdocs-core\\2.0.7.RELEASE\\8fbe47c7c88da90e02737245205aeb46223f48b4\\spring-restdocs-core-2.0.7.RELEASE.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\io.rest-assured\\xml-path\\4.5.1\\c7f99b699db901fa9dfe3a4189d54de2c3f621ec\\xml-path-4.5.1.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.codehaus.groovy\\groovy-xml\\3.0.15\\c7788e04850ec4a49a7c1ea964fbb4b53ca2343c\\groovy-xml-3.0.15.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\io.rest-assured\\json-path\\4.5.1\\f8cf82b787714241e3def193cd2d46d747549871\\json-path-4.5.1.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.codehaus.groovy\\groovy\\3.0.15\\472c60adeb4e62e3a516e7c76da2df7c65348a9a\\groovy-3.0.15.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.httpcomponents\\httpmime\\4.5.14\\6662758a1f1cb1149cf916bdac28332e0902ec44\\httpmime-4.5.14.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.httpcomponents\\httpclient\\4.5.14\\1194890e6f56ec29177673f2f12d0b8e627dec98\\httpclient-4.5.14.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.hamcrest\\hamcrest\\2.2\\1820c0968dba3a11a1b30669bb1f01978a91dedc\\hamcrest-2.2.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.ccil.cowan.tagsoup\\tagsoup\\1.2.1\\5584627487e984c03456266d3f8802eb85a9ce97\\tagsoup-1.2.1.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.security\\spring-security-web\\5.7.7\\be60a596a263be507c590710ea6aaf7e5b64cf57\\spring-security-web-5.7.7.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.security\\spring-security-config\\5.7.7\\3a7b700d07513be4361c9024ec4cc21f93f7f65a\\spring-security-config-5.7.7.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework\\spring-aop\\5.3.25\\722e30759b29331726f9deed76f80b22345ee627\\spring-aop-5.3.25.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework\\spring-context-support\\5.3.25\\c441d8288dd0f53e28880e865b7864f23717af97\\spring-context-support-5.3.25.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.sun.mail\\jakarta.mail\\1.6.7\\319df0e9d536c1a01acdfe49b6e82b97d2393073\\jakarta.mail-1.6.7.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.iq80.leveldb\\leveldb\\0.9\\4148b53fb4e7a799c880a49c7a3af5d8fe31a95e\\leveldb-0.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.typesafe.scala-logging\\scala-logging_2.12\\3.7.2\\a1dc97509765287faa4747f7cb411f0b85dc9a34\\scala-logging_2.12-3.7.2.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.typesafe.akka\\akka-http_2.12\\10.0.10\\4cbea03ab0f9bae14e8521f0b3f1263fba6c851e\\akka-http_2.12-10.0.10.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.typesafe.akka\\akka-stream_2.12\\2.5.6\\876aa1471ac773a3dd02f70c1e511a9a014b3491\\akka-stream_2.12-2.5.6.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.scala-lang.modules\\scala-xml_2.12\\1.0.6\\e22de3366a698a9f744106fb6dda4335838cf6a7\\scala-xml_2.12-1.0.6.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.github.pathikrit\\better-files_2.12\\2.17.1\\381436971cc241549340713bcef67007acfdaced\\better-files_2.12-2.17.1.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.scala-lang\\scala-library\\2.12.4\\7663f74ef944453c86cc7e6597ed33e9281f6412\\scala-library-2.12.4.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.google.guava\\failureaccess\\1.0.1\\1dcf1de382a0bf95a3d8b0849546c88bac1292c9\\failureaccess-1.0.1.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.google.guava\\listenablefuture\\9999.0-empty-to-avoid-conflict-with-guava\\b421526c5f297295adef1c886e5246c39d4ac629\\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.google.code.findbugs\\jsr305\\3.0.2\\25ea2e8b0c338a877313bd4672d3fe056ea78f0d\\jsr305-3.0.2.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.checkerframework\\checker-qual\\3.8.0\\6b83e4a33220272c3a08991498ba9dc09519f190\\checker-qual-3.8.0.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.google.errorprone\\error_prone_annotations\\2.5.1\\562d366678b89ce5d6b6b82c1a073880341e3fba\\error_prone_annotations-2.5.1.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.google.j2objc\\j2objc-annotations\\1.3\\ba035118bc8bac37d7eff77700720999acd9986d\\j2objc-annotations-1.3.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.core\\jackson-databind\\2.13.5\\aa95e46dbc32454f3983221d420e78ef19ddf844\\jackson-databind-2.13.5.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\commons-codec\\commons-codec\\1.15\\49d94806b6e3dc933dacbd8acb0fdbab8ebd1e5d\\commons-codec-1.15.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.querydsl\\querydsl-core\\5.0.0\\7a469f78b7a89bae429f17766fb92687d0ab9e5b\\querydsl-core-5.0.0.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.querydsl\\querydsl-codegen\\5.0.0\\d690e92300f528e4161307b286f76aeaf348e2fb\\querydsl-codegen-5.0.0.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.mysql\\mysql-connector-j\\8.0.32\\41ec3f8cdaccf6c46a47d7cd628eeb59a926d9d4\\mysql-connector-j-8.0.32.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.amazonaws\\aws-java-sdk-kms\\1.12.464\\8a443187b5efb0a304f98f9dbda5ee594ceaff47\\aws-java-sdk-kms-1.12.464.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.amazonaws\\aws-java-sdk-core\\1.12.464\\d4c101a975ef99830bc2e615385d8d4c34ded2fa\\aws-java-sdk-core-1.12.464.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.amazonaws\\jmespath-java\\1.12.464\\83c0992db1980964c0f3fceccbf2c3927c9aebed\\jmespath-java-1.12.464.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\ch.qos.logback\\logback-core\\1.2.11\\a01230df5ca5c34540cdaa3ad5efb012f1f1f792\\logback-core-1.2.11.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.slf4j\\slf4j-api\\1.7.36\\6c62681a2f655b49963a5983b8b0950a6120ae14\\slf4j-api-1.7.36.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.aspectj\\aspectjweaver\\1.9.7\\158f5c255cd3e4408e795b79f7c3fbae9b53b7ca\\aspectjweaver-1.9.7.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.zaxxer\\HikariCP\\4.0.3\\107cbdf0db6780a065f895ae9d8fbf3bb0e1c21f\\HikariCP-4.0.3.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework\\spring-jdbc\\5.3.25\\809f5841b13d42e5d4d14eb13346958cc9e9e187\\spring-jdbc-5.3.25.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.hibernate.common\\hibernate-commons-annotations\\5.1.2.Final\\e59ffdbc6ad09eeb33507b39ffcf287679a498c8\\hibernate-commons-annotations-5.1.2.Final.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.jboss.logging\\jboss-logging\\3.4.3.Final\\c4bd7e12a745c0e7f6cf98c45cdcdf482fd827ea\\jboss-logging-3.4.3.Final.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\net.bytebuddy\\byte-buddy\\1.12.23\\d470526e8c4566c04e9ae5d3ccb62d1a7aa58986\\byte-buddy-1.12.23.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\antlr\\antlr\\2.7.7\\83cd2cd674a217ade95a4bb83a8a14f351f48bd0\\antlr-2.7.7.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.jboss\\jandex\\2.4.2.Final\\1e1c385990b258ff1a24c801e84aebbacf70eb39\\jandex-2.4.2.Final.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml\\classmate\\1.5.1\\3fe0bed568c62df5e89f4f174c101eab25345b6c\\classmate-1.5.1.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.glassfish.jaxb\\jaxb-runtime\\2.3.8\\c90a335a07c60db986f29d35b0f8ac0a18f0f989\\jaxb-runtime-2.3.8.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework\\spring-context\\5.3.25\\268a70ce4f44333ce0f13304c5f8c53b3df5f5f4\\spring-context-5.3.25.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.data\\spring-data-commons\\2.7.8\\ee07f3fa279f4980d03a9ad65241cea752ae64dd\\spring-data-commons-2.7.8.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework\\spring-orm\\5.3.25\\b0fb2911a5d528037149240c8b4f2c820d90405b\\spring-orm-5.3.25.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework\\spring-tx\\5.3.25\\b459d0b755c9614a55ebd39ce353748c4b210be2\\spring-tx-5.3.25.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework\\spring-beans\\5.3.25\\b3aeae036b4ea1abfa1f9604d452e19664efe5f6\\spring-beans-5.3.25.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework\\spring-core\\5.3.25\\85382e86321227506bf7f97ed80e2ab88bce25f0\\spring-core-5.3.25.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.datatype\\jackson-datatype-jsr310\\2.13.5\\8ba3b868e81d7fc6ead686bd2353859b111d9eaf\\jackson-datatype-jsr310-2.13.5.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.module\\jackson-module-parameter-names\\2.13.5\\a401a99e7a45450fd3ef76e82ba39005fd1a8c22\\jackson-module-parameter-names-2.13.5.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.datatype\\jackson-datatype-jdk8\\2.13.5\\1278f38160812811c56eb77f67213662ed1c7a2e\\jackson-datatype-jdk8-2.13.5.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot-starter-logging\\2.7.9\\4b1afa6083581924606c7cc892933b63ec5810d3\\spring-boot-starter-logging-2.7.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot-autoconfigure\\2.7.9\\849b238dd024101cad8d107b4a8b0906f75003d5\\spring-boot-autoconfigure-2.7.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.boot\\spring-boot\\2.7.9\\788d60e73e0f7bbbf11b30c3fb0a9cbaa073446b\\spring-boot-2.7.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\jakarta.annotation\\jakarta.annotation-api\\1.3.5\\59eb84ee0d616332ff44aba065f3888cf002cd2d\\jakarta.annotation-api-1.3.5.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.yaml\\snakeyaml\\1.30\\8fde7fe2586328ac3c68db92045e1c8759125000\\snakeyaml-1.30.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.tomcat.embed\\tomcat-embed-websocket\\9.0.71\\987b6460af04b08bc9914788d2762080afb09541\\tomcat-embed-websocket-9.0.71.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.tomcat.embed\\tomcat-embed-core\\9.0.71\\adaed61b4eaa5b52448336c0881fcd828fd51a2f\\tomcat-embed-core-9.0.71.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework\\spring-expression\\5.3.25\\d681cdb86611f03d8ef29654edde219fe5afef1d\\spring-expression-5.3.25.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\jakarta.validation\\jakarta.validation-api\\2.0.2\\5eacc6522521f7eacb081f95cee1e231648461e7\\jakarta.validation-api-2.0.2.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\io.rest-assured\\rest-assured-common\\4.5.1\\3d60339639685c35c1b9d79c0e3da6aeaf205a52\\rest-assured-common-4.5.1.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.commons\\commons-lang3\\3.12.0\\c6842c86792ff03b9f1d1fe2aab8dc23aa6c6f0e\\commons-lang3-3.12.0.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.codehaus.groovy\\groovy-json\\3.0.15\\6a18f5afe5538acd3e753db828111b8b136af9f5\\groovy-json-3.0.15.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.httpcomponents\\httpcore\\4.4.16\\51cf043c87253c9f58b539c9f7e44c8894223850\\httpcore-4.4.16.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\commons-logging\\commons-logging\\1.2\\4bfc12adfe4842bf07b657f0369c4cb522955686\\commons-logging-1.2.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.security\\spring-security-core\\5.7.7\\4502c4ac0d63b12fa5162e622f1b5ea2483f1b6b\\spring-security-core-5.7.7.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.sun.activation\\jakarta.activation\\1.2.2\\74548703f9851017ce2f556066659438019e7eb5\\jakarta.activation-1.2.2.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.iq80.leveldb\\leveldb-api\\0.9\\f6d726af6dc19679d69844297d60b28c0c7bc8a7\\leveldb-api-0.9.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.scala-lang\\scala-reflect\\2.12.2\\fa13c13351566738ff156ef8a56b869868f4b77e\\scala-reflect-2.12.2.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.typesafe.akka\\akka-http-core_2.12\\10.0.10\\eb51e977606a83697373b6956b89e60d0629ada8\\akka-http-core_2.12-10.0.10.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.typesafe.akka\\akka-actor_2.12\\2.5.6\\1e9f4c1829d3ce5640c17164b1756d1e98eb7af3\\akka-actor_2.12-2.5.6.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.typesafe\\ssl-config-core_2.12\\0.2.2\\8a357d491f7f94c5b4b1e0b27644e1306cc8742d\\ssl-config-core_2.12-0.2.2.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.reactivestreams\\reactive-streams\\1.0.4\\3864a1320d97d7b045f729a326e1e077661f31b7\\reactive-streams-1.0.4.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.core\\jackson-annotations\\2.13.5\\136f77ab424f302c9e27230b4482e8000e142edf\\jackson-annotations-2.13.5.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.core\\jackson-core\\2.13.5\\d07c97d3de9ea658caf1ff1809fd9de930a286a\\jackson-core-2.13.5.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.mysema.commons\\mysema-commons-lang\\0.2.4\\d09c8489d54251a6c22fbce804bdd4a070557317\\mysema-commons-lang-0.2.4.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.querydsl\\codegen-utils\\5.0.0\\ff8a2ebbc3a317715de0ce2856c2024534d18a1a\\codegen-utils-5.0.0.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\javax.inject\\javax.inject\\1\\6975da39a7040257bd51d21a231b76c915872d38\\javax.inject-1.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\io.github.classgraph\\classgraph\\4.8.108\\1c175d4ce7a1fa67463bad731f37f1a284dab790\\classgraph-4.8.108.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.fasterxml.jackson.dataformat\\jackson-dataformat-cbor\\2.13.5\\76f77a8427bf8f387cfdae5773cc5bec8cc4f604\\jackson-dataformat-cbor-2.13.5.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\software.amazon.ion\\ion-java\\1.0.2\\ee9dacea7726e495f8352b81c12c23834ffbc564\\ion-java-1.0.2.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\joda-time\\joda-time\\2.8.1\\f5bfc718c95a7b1d3c371bb02a188a4df18361a9\\joda-time-2.8.1.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\jakarta.xml.bind\\jakarta.xml.bind-api\\2.3.3\\48e3b9cfc10752fba3521d6511f4165bea951801\\jakarta.xml.bind-api-2.3.3.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.glassfish.jaxb\\txw2\\2.3.8\\66e0297f1196f0d15a776e699de1b8e6ac5d44dd\\txw2-2.3.8.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.sun.istack\\istack-commons-runtime\\3.0.12\\cbbe1a62b0cc6c85972e99d52aaee350153dc530\\istack-commons-runtime-3.0.12.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework\\spring-jcl\\5.3.25\\2e65a986dc7f98b40faed8df1d50db77c0b96c61\\spring-jcl-5.3.25.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.logging.log4j\\log4j-to-slf4j\\2.17.2\\17dd0fae2747d9a28c67bc9534108823d2376b46\\log4j-to-slf4j-2.17.2.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.slf4j\\jul-to-slf4j\\1.7.36\\ed46d81cef9c412a88caef405b58f93a678ff2ca\\jul-to-slf4j-1.7.36.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.springframework.security\\spring-security-crypto\\5.7.7\\ed4ba8723f0c4c7abf420eae7714aa5391410be8\\spring-security-crypto-5.7.7.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.typesafe.akka\\akka-parsing_2.12\\10.0.10\\b6ba857b24af2a1e918c2c0dd8916ebc30b463e1\\akka-parsing_2.12-10.0.10.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.scala-lang.modules\\scala-java8-compat_2.12\\0.8.0\\1e6f1e745bf6d3c34d1e2ab150653306069aaf34\\scala-java8-compat_2.12-0.8.0.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.typesafe\\config\\1.3.1\\2cf7a6cc79732e3bdf1647d7404279900ca63eb0\\config-1.3.1.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.scala-lang.modules\\scala-parser-combinators_2.12\\1.0.4\\7c5f25a2d40ea7651452f0f0d1d4c12dabffcb8b\\scala-parser-combinators_2.12-1.0.4.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.eclipse.jdt\\ecj\\3.26.0\\4837be609a3368a0f7e7cf0dc1bdbc7fe94993de\\ecj-3.26.0.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\org.apache.logging.log4j\\log4j-api\\2.17.2\\f42d6afa111b4dec5d2aea0fe2197240749a4ea6\\log4j-api-2.17.2.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\io.jsonwebtoken\\jjwt-impl\\0.11.5\\40a599f0e8a8e4e0701596fbb15e67bfda64fdf0\\jjwt-impl-0.11.5.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\io.jsonwebtoken\\jjwt-jackson\\0.11.5\\3b83a06809e98a69402d7333dcf67df6f6ea4579\\jjwt-jackson-0.11.5.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\com.h2database\\h2\\2.1.214\\d5c2005c9e3279201e12d4776c948578b16bf8b2\\h2-2.1.214.jar;C:\\Users\\User\\.gradle\\caches\\modules-2\\files-2.1\\jakarta.activation\\jakarta.activation-api\\1.2.2\\99f53adba383cb1bf7c3862844488574b559621f\\jakarta.activation-api-1.2.2.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, hibernate.order_inserts=true, user.variant=, java.vendor.url=https://java.oracle.com/, catalina.useNaming=false, user.timezone=Asia/Seoul, jakarta.persistence.sharedCache.mode=UNSPECIFIED, java.vm.specification.version=16, os.name=Windows 10, hibernate.order_updates=true, javax.persistence.validation.mode=AUTO, jakarta.persistence.nonJtaDataSource=HikariDataSource (HikariPool-1), hibernate.jdbc.batch_size=30, sun.java.launcher=SUN_STANDARD, user.country=KR, sun.boot.library.path=C:\\Program Files\\Java\\jdk-16.0.2\\bin, sun.java.command=com.twogather.twogatherwebbackend.TwogatherWebBackendApplication, spring.application.admin.enabled=true, javax.persistence.nonJtaDataSource=HikariDataSource (HikariPool-1), hibernate.transaction.jta.platform=org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform@6c1f15df, com.sun.management.jmxremote=, javax.persistence.sharedCache.mode=UNSPECIFIED, jdk.debug=release, spring.liveBeansView.mbeanDomain=, sun.cpu.endian=little, user.home=C:\\Users\\User, user.language=ko, java.specification.vendor=Oracle Corporation, java.version.date=2021-07-20, java.home=C:\\Program Files\\Java\\jdk-16.0.2, file.separator=\\, spring.output.ansi.enabled=always, java.vm.compressedOopsMode=Zero based, line.separator=\r\n, hibernate.persistenceUnitName=default, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, FILE_LOG_CHARSET=UTF-8, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.headless=true, jakarta.persistence.validation.mode=AUTO, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=16.0.2+7-67, user.name=User, spring.jmx.enabled=true, path.separator=;, os.version=10.0, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=default, spring.beaninfo.ignore=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=C:\\Users\\User\\AppData\\Local\\Temp\\, catalina.home=C:\\Users\\User\\AppData\\Local\\Temp\\tomcat.8080.15218742201140573105, java.version=16.0.2, hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy, user.dir=C:\\Users\\User\\IdeaProjects\\twogather-web-backend\\twogather-web-backend, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, PID=36480, sun.os.patch.level=, CONSOLE_LOG_CHARSET=UTF-8, catalina.base=C:\\Users\\User\\AppData\\Local\\Temp\\tomcat.8080.15218742201140573105, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.registry.StandardServiceRegistryBuilder$1@5e95b0ab, java.library.path=C:\\Program Files\\Java\\jdk-16.0.2\\bin;C:\\WINDOWS\\Sun\\Java\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\Program Files\\MongoDB\\Server\\6.0\\bin;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Bandizip\\;C:\\Program Files\\Java\\jdk-16.0.2\\\\bin;C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin;C:\\Program Files (x86)\\Yarn\\bin\\;C:\\Program Files\\Microsoft VS Code\\bin;C:\\Users\\User\\Downloads\\apache-maven-3.8.4-bin\\apache-maven-3.8.4\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\User\\AppData\\Roaming\\nvm;C:\\Program Files\\nodejs;C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python310;C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python310\\Scripts;C:\\Program Files (x86)\\NetSarang\\Xshell 7\\;C:\\Ruby31-x64\\bin;C:\\Program Files\\MySQL\\MySQL Shell 8.0\\bin\\;C:\\Users\\User\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2021.3.2\\bin;;C:\\Users\\User\\AppData\\Local\\GitHubDesktop\\bin;C:\\Users\\User\\AppData\\Roaming\\npm;C:\\Users\\User\\AppData\\Local\\Yarn\\bin;C:\\Users\\User\\AppData\\Roaming\\nvm;C:\\Program Files\\nodejs;;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=16.0.2+7-67, hibernate.bytecode.use_reflection_optimizer=false, java.rmi.server.randomIDs=true, sun.io.unicode.encoding=UnicodeLittle, hibernate.archive.scanner=org.hibernate.boot.archive.scan.internal.DisabledScanner, hibernate.connection.datasource=HikariDataSource (HikariPool-1), java.class.version=60.0, hibernate.default_batch_fetch_size=10}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.872+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.xml.config.ValidationXmlParser",
  "message" : "Trying to load META-INF/validation.xml for XML based Validator configuration.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.872+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.xml.config.ResourceLoaderHelper",
  "message" : "Trying to load META-INF/validation.xml via TCCL",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.872+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.xml.config.ResourceLoaderHelper",
  "message" : "Trying to load META-INF/validation.xml via Hibernate Validator's class loader",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.873+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.xml.config.ValidationXmlParser",
  "message" : "No META-INF/validation.xml found. Using annotation based configuration only.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.873+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.resolver.TraversableResolvers",
  "message" : "Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.873+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.resolver.TraversableResolvers",
  "message" : "Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.873+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator",
  "message" : "Loaded expression factory via original TCCL",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.873+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000252: Using org.hibernate.validator.internal.engine.DefaultPropertyNodeNameProvider as property node name provider.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.873+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator as ValidatorFactory-scoped message interpolator.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.873+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.hibernate.validator.internal.engine.resolver.JPATraversableResolver as ValidatorFactory-scoped traversable resolver.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.873+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.874+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.874+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.874+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Review] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.874+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.891+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.StoreOwner] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.891+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.StoreOwner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.894+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Likes] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.894+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Likes",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.895+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.BusinessHour] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.895+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.BusinessHour",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.897+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Comment] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.897+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Comment",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.898+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Image] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.898+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Image",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.899+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Member] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.899+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.901+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.StoreKeyword] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.901+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.StoreKeyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.902+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Category] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.902+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.903+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Menu] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.903+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Menu",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.903+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Keyword] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.904+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.905+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Consumer] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.905+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Consumer",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.906+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Store] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.906+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.909+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.service.internal.SessionFactoryServiceRegistryImpl",
  "message" : "EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.910+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.secure.spi.JaccIntegrator",
  "message" : "Skipping JACC integration as it was not enabled",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.913+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.EnumType",
  "message" : "Using ORDINAL-based conversion for Enum java.time.DayOfWeek",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.915+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.EnumType",
  "message" : "Using NAMED-based conversion for Enum com.twogather.twogatherwebbackend.domain.AuthenticationType",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.915+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.EnumType",
  "message" : "Using NAMED-based conversion for Enum com.twogather.twogatherwebbackend.domain.StoreStatus",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.915+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.internal.SessionFactoryImpl",
  "message" : "Instantiated session factory",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.915+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.type.spi.TypeConfiguration$Scope",
  "message" : "Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@36cfe107] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@71f29d91]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.948+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection adder",
  "logger" : "com.zaxxer.hikari.pool.HikariPool",
  "message" : "HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5f887249",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.960+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Review#reviewer` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.960+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Review#reviewer` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.960+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Review#store` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.960+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Review#store` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.960+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Review] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:06.960+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.040+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection adder",
  "logger" : "com.zaxxer.hikari.pool.HikariPool",
  "message" : "HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@e0320e1",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.104+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Review#reviewer` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.105+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Review#store` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.105+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Review#reviewer` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.105+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Review#store` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.109+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.StoreOwner] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.109+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.StoreOwner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.118+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Likes#member` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.118+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Likes#member` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.118+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Likes#store` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.118+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Likes#store` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.118+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Likes] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.118+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Likes",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.123+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Likes#member` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.123+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Likes#store` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.123+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Likes#member` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.123+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Likes#store` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.124+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.BusinessHour] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.124+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.BusinessHour",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.133+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Comment#commenter` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.133+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Comment#commenter` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.133+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Comment#review` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.133+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Comment#review` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.133+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Comment] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.133+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Comment",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.139+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Comment#commenter` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.139+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Comment#review` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.139+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Comment#commenter` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.139+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.orm.bytecode.interceptor",
  "message" : "To-one property `com.twogather.twogatherwebbackend.domain.Comment#review` was mapped with LAZY + NO_PROXY but the class was not enhanced",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.139+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Image] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.140+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Image",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.143+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection adder",
  "logger" : "com.zaxxer.hikari.pool.HikariPool",
  "message" : "HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@49214130",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.143+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Member] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.143+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.143+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Consumer] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.143+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Consumer",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.149+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.StoreKeyword] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.149+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.StoreKeyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.153+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Category] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.154+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.157+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Menu] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.157+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Menu",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.160+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Keyword] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.161+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.171+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "Not known whether passed class name [com.twogather.twogatherwebbackend.domain.Store] is safe",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.171+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.boot.internal.ClassLoaderAccessImpl",
  "message" : "No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.187+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : "Static SQL for collection: com.twogather.twogatherwebbackend.domain.StoreOwner.storeList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.187+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row insert: update store set member_id=? where store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.187+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row update: update store set  where store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.187+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row delete: update store set member_id=null where member_id=? and store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.187+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " One-shot delete: update store set member_id=null where member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.187+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : "Static SQL for collection: com.twogather.twogatherwebbackend.domain.Store.storeImageList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.187+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row insert: update image set store_id=? where image_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.187+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row update: update image set  where image_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.187+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row delete: update image set store_id=null where store_id=? and image_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.187+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " One-shot delete: update image set store_id=null where store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.187+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : "Static SQL for collection: com.twogather.twogatherwebbackend.domain.Store.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row insert: update review set store_id=? where review_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row update: update review set  where review_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row delete: update review set store_id=null where store_id=? and review_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " One-shot delete: update review set store_id=null where store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : "Static SQL for collection: com.twogather.twogatherwebbackend.domain.Consumer.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row insert: update review set member_id=? where review_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row update: update review set  where review_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row delete: update review set member_id=null where member_id=? and review_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " One-shot delete: update review set member_id=null where member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : "Static SQL for collection: com.twogather.twogatherwebbackend.domain.Review.commentList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row insert: update comment set review_id=? where comment_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row update: update comment set  where comment_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row delete: update comment set review_id=null where review_id=? and comment_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " One-shot delete: update comment set review_id=null where review_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : "Static SQL for collection: com.twogather.twogatherwebbackend.domain.Store.businessHourList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row insert: update business_hour set store_id=? where business_hour_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row update: update business_hour set  where business_hour_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row delete: update business_hour set store_id=null where store_id=? and business_hour_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " One-shot delete: update business_hour set store_id=null where store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : "Static SQL for collection: com.twogather.twogatherwebbackend.domain.Store.storeKeywordList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row insert: update store_keyword set store_id=? where store_keyword_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row update: update store_keyword set  where store_keyword_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row delete: update store_keyword set store_id=null where store_id=? and store_keyword_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " One-shot delete: update store_keyword set store_id=null where store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : "Static SQL for collection: com.twogather.twogatherwebbackend.domain.Store.likesList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row insert: update likes set store_id=? where likes_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row update: update likes set  where likes_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row delete: update likes set store_id=null where store_id=? and likes_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " One-shot delete: update likes set store_id=null where store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : "Static SQL for collection: com.twogather.twogatherwebbackend.domain.Store.menuList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row insert: update menu set store_id=? where menu_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row update: update menu set  where menu_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " Row delete: update menu set store_id=null where store_id=? and menu_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.collection.AbstractCollectionPersister",
  "message" : " One-shot delete: update menu set store_id=null where store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.195+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : "Static SQL for entity: com.twogather.twogatherwebbackend.domain.Review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.195+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Version select: select review_id from review where review_id =?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.195+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Snapshot select: select review_.review_id, review_.content as content2_9_, review_.created_date as created_3_9_, review_.member_id as member_i5_9_, review_.score as score4_9_, review_.store_id as store_id6_9_ from review review_ where review_.review_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.195+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 0: insert into review (content, created_date, member_id, score, store_id, review_id) values (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.195+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 0: update review set content=?, created_date=?, member_id=?, score=?, store_id=? where review_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.195+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 0: delete from review where review_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.195+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Identity insert: insert into review (content, created_date, member_id, score, store_id) values (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.217+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : ""
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@66fff42f]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.218+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : commentList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.220+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@654c2f81]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.221+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@486dd616]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.222+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : content",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.222+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : createdDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.222+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : reviewer",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.222+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@73dd0f23]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : reviewer.authenticationType",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : reviewer.email",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : reviewer.isActive",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : reviewer.name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : reviewer.password",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : reviewer.username",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : reviewer.storeList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.reviewer"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5a99543b]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.reviewer"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4e0802e0]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : reviewer.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Property path deemed to be circular : reviewer.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : score",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4a18e0f1]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.address",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.businessHourList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7857cb1d]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:8> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7646c9f5]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.businessName",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.businessNumber",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.businessStartDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.223+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:9> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7b54a0a4]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.224+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.likesList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.225+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection adder",
  "logger" : "com.zaxxer.hikari.pool.HikariPool",
  "message" : "HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@a4d5a4b",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.225+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:10> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@682d9f21]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.225+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:11> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2e64ae1a]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.menuList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:12> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6eadd342]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:13> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@30a20fb3]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.owner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:14> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@34f24a11]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.phone",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.reasonForRejection",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.requestDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Property path deemed to be circular : store.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.status",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.storeImageList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:15> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3f6d36eb]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:16> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3f5ac587]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.storeKeywordList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:17> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1fa58a48]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.226+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:18> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3921e96f]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.227+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy",
  "message" : "Building LoadPlan...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.234+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.240+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Review)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Review)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Review.commentList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Review.commentList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Review.commentList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Review.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Review.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Review.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n          - SQL table alias mapping - review0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {review_i1_9_0_}\r\n          - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:0> -> <gen:3>\r\n             - EntityQuerySpaceImpl(uid=<gen:3>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.243+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Review [NONE]: select review0_.review_id as review_i1_9_0_, review0_.content as content2_9_0_, review0_.created_date as created_3_9_0_, review0_.member_id as member_i5_9_0_, review0_.score as score4_9_0_, review0_.store_id as store_id6_9_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from review review0_ left outer join member member1_ on review0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on review0_.store_id=store2_.store_id where review0_.review_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.243+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.244+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Review)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Review)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Review.commentList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Review.commentList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Review.commentList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Review.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Review.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Review.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n          - SQL table alias mapping - review0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {review_i1_9_0_}\r\n          - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:0> -> <gen:3>\r\n             - EntityQuerySpaceImpl(uid=<gen:3>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.244+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Review [NONE]: select review0_.review_id as review_i1_9_0_, review0_.content as content2_9_0_, review0_.created_date as created_3_9_0_, review0_.member_id as member_i5_9_0_, review0_.score as score4_9_0_, review0_.store_id as store_id6_9_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from review review0_ left outer join member member1_ on review0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on review0_.store_id=store2_.store_id where review0_.review_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.245+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.247+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Review)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Review)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Review.commentList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Review.commentList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Review.commentList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Review.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Review.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Review.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n          - SQL table alias mapping - review0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {review_i1_9_0_}\r\n          - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:0> -> <gen:3>\r\n             - EntityQuerySpaceImpl(uid=<gen:3>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.247+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Review [NONE]: select review0_.review_id as review_i1_9_0_, review0_.content as content2_9_0_, review0_.created_date as created_3_9_0_, review0_.member_id as member_i5_9_0_, review0_.score as score4_9_0_, review0_.store_id as store_id6_9_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from review review0_ left outer join member member1_ on review0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on review0_.store_id=store2_.store_id where review0_.review_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.247+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.248+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Review)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Review)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Review.commentList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Review.commentList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Review.commentList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Review.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Review.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Review.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n          - SQL table alias mapping - review0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {review_i1_9_0_}\r\n          - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:0> -> <gen:3>\r\n             - EntityQuerySpaceImpl(uid=<gen:3>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.249+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Review [NONE]: select review0_.review_id as review_i1_9_0_, review0_.content as content2_9_0_, review0_.created_date as created_3_9_0_, review0_.member_id as member_i5_9_0_, review0_.score as score4_9_0_, review0_.store_id as store_id6_9_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from review review0_ left outer join member member1_ on review0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on review0_.store_id=store2_.store_id where review0_.review_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.249+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.250+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Review)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Review)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Review.commentList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Review.commentList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Review.commentList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Review.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Review.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Review.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n          - SQL table alias mapping - review0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {review_i1_9_0_}\r\n          - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:0> -> <gen:3>\r\n             - EntityQuerySpaceImpl(uid=<gen:3>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.250+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Review [NONE]: select review0_.review_id as review_i1_9_0_, review0_.content as content2_9_0_, review0_.created_date as created_3_9_0_, review0_.member_id as member_i5_9_0_, review0_.score as score4_9_0_, review0_.store_id as store_id6_9_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from review review0_ left outer join member member1_ on review0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on review0_.store_id=store2_.store_id where review0_.review_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.250+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.252+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Review)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Review)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Review.commentList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Review.commentList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Review.commentList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Review.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Review.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Review.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n          - SQL table alias mapping - review0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {review_i1_9_0_}\r\n          - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:0> -> <gen:3>\r\n             - EntityQuerySpaceImpl(uid=<gen:3>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.252+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Review [NONE]: select review0_.review_id as review_i1_9_0_, review0_.content as content2_9_0_, review0_.created_date as created_3_9_0_, review0_.member_id as member_i5_9_0_, review0_.score as score4_9_0_, review0_.store_id as store_id6_9_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from review review0_ left outer join member member1_ on review0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on review0_.store_id=store2_.store_id where review0_.review_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.252+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.253+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Review)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Review)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Review.commentList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Review.commentList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Review.commentList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Review.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Review.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Review.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n          - SQL table alias mapping - review0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {review_i1_9_0_}\r\n          - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:0> -> <gen:3>\r\n             - EntityQuerySpaceImpl(uid=<gen:3>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.254+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Review [NONE]: select review0_.review_id as review_i1_9_0_, review0_.content as content2_9_0_, review0_.created_date as created_3_9_0_, review0_.member_id as member_i5_9_0_, review0_.score as score4_9_0_, review0_.store_id as store_id6_9_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from review review0_ left outer join member member1_ on review0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on review0_.store_id=store2_.store_id where review0_.review_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.254+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.255+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Review)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Review)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Review.commentList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Review.commentList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Review.commentList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Review.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Review.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Review.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n          - SQL table alias mapping - review0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {review_i1_9_0_}\r\n          - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:0> -> <gen:3>\r\n             - EntityQuerySpaceImpl(uid=<gen:3>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.255+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Review [NONE]: select review0_.review_id as review_i1_9_0_, review0_.content as content2_9_0_, review0_.created_date as created_3_9_0_, review0_.member_id as member_i5_9_0_, review0_.score as score4_9_0_, review0_.store_id as store_id6_9_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from review review0_ left outer join member member1_ on review0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on review0_.store_id=store2_.store_id where review0_.review_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.255+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.257+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Review)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Review)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Review.commentList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Review.commentList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Review.commentList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Review.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Review.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Review.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n          - SQL table alias mapping - review0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {review_i1_9_0_}\r\n          - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:0> -> <gen:3>\r\n             - EntityQuerySpaceImpl(uid=<gen:3>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.257+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Review [NONE]: select review0_.review_id as review_i1_9_0_, review0_.content as content2_9_0_, review0_.created_date as created_3_9_0_, review0_.member_id as member_i5_9_0_, review0_.score as score4_9_0_, review0_.store_id as store_id6_9_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from review review0_ left outer join member member1_ on review0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on review0_.store_id=store2_.store_id where review0_.review_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.257+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.258+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Review)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Review)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Review.commentList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Review.commentList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Review.commentList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Review.reviewer.storeList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Review.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Review.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Review.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Review.store.likesList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Review.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Review.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n          - SQL table alias mapping - review0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {review_i1_9_0_}\r\n          - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:0> -> <gen:3>\r\n             - EntityQuerySpaceImpl(uid=<gen:3>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Review [NONE]: select review0_.review_id as review_i1_9_0_, review0_.content as content2_9_0_, review0_.created_date as created_3_9_0_, review0_.member_id as member_i5_9_0_, review0_.score as score4_9_0_, review0_.store_id as store_id6_9_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from review review0_ left outer join member member1_ on review0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on review0_.store_id=store2_.store_id where review0_.review_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : "Static SQL for entity: com.twogather.twogatherwebbackend.domain.StoreOwner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Version select: select member_id from member where member_id =?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Snapshot select: select storeowner_.member_id, storeowner_1_.authentication_type as authenti2_7_, storeowner_1_.email as email3_7_, storeowner_1_.is_active as is_activ4_7_, storeowner_1_.name as name5_7_, storeowner_1_.password as password6_7_, storeowner_1_.username as username7_7_ from store_owner storeowner_ inner join member storeowner_1_ on storeowner_.member_id=storeowner_1_.member_id where storeowner_.member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 0: insert into member (authentication_type, email, is_active, name, password, username, member_id) values (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 0: update member set authentication_type=?, email=?, is_active=?, name=?, password=?, username=? where member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 0: delete from member where member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 1: insert into store_owner (member_id) values (?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 1: null",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 1: delete from store_owner where member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Identity insert: insert into member (authentication_type, email, is_active, name, password, username) values (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : ""
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@571c2ed8]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.StoreOwner"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : authenticationType",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.StoreOwner"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : email",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.StoreOwner"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : isActive",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.StoreOwner"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.StoreOwner"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : password",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.StoreOwner"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : username",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.StoreOwner"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : storeList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.StoreOwner"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4eacb6d1]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.StoreOwner"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3ccefe1b]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy",
  "message" : "Building LoadPlan...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.260+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.260+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - SQL table alias mapping - storeowner0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.260+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreOwner [NONE]: select storeowner0_.member_id as member_i1_7_0_, storeowner0_1_.authentication_type as authenti2_7_0_, storeowner0_1_.email as email3_7_0_, storeowner0_1_.is_active as is_activ4_7_0_, storeowner0_1_.name as name5_7_0_, storeowner0_1_.password as password6_7_0_, storeowner0_1_.username as username7_7_0_ from store_owner storeowner0_ inner join member storeowner0_1_ on storeowner0_.member_id=storeowner0_1_.member_id where storeowner0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.260+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.260+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - SQL table alias mapping - storeowner0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.260+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreOwner [NONE]: select storeowner0_.member_id as member_i1_7_0_, storeowner0_1_.authentication_type as authenti2_7_0_, storeowner0_1_.email as email3_7_0_, storeowner0_1_.is_active as is_activ4_7_0_, storeowner0_1_.name as name5_7_0_, storeowner0_1_.password as password6_7_0_, storeowner0_1_.username as username7_7_0_ from store_owner storeowner0_ inner join member storeowner0_1_ on storeowner0_.member_id=storeowner0_1_.member_id where storeowner0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.261+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.261+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - SQL table alias mapping - storeowner0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.261+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreOwner [NONE]: select storeowner0_.member_id as member_i1_7_0_, storeowner0_1_.authentication_type as authenti2_7_0_, storeowner0_1_.email as email3_7_0_, storeowner0_1_.is_active as is_activ4_7_0_, storeowner0_1_.name as name5_7_0_, storeowner0_1_.password as password6_7_0_, storeowner0_1_.username as username7_7_0_ from store_owner storeowner0_ inner join member storeowner0_1_ on storeowner0_.member_id=storeowner0_1_.member_id where storeowner0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.261+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.261+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - SQL table alias mapping - storeowner0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.261+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreOwner [NONE]: select storeowner0_.member_id as member_i1_7_0_, storeowner0_1_.authentication_type as authenti2_7_0_, storeowner0_1_.email as email3_7_0_, storeowner0_1_.is_active as is_activ4_7_0_, storeowner0_1_.name as name5_7_0_, storeowner0_1_.password as password6_7_0_, storeowner0_1_.username as username7_7_0_ from store_owner storeowner0_ inner join member storeowner0_1_ on storeowner0_.member_id=storeowner0_1_.member_id where storeowner0_.member_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.261+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.263+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - SQL table alias mapping - storeowner0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.263+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreOwner [NONE]: select storeowner0_.member_id as member_i1_7_0_, storeowner0_1_.authentication_type as authenti2_7_0_, storeowner0_1_.email as email3_7_0_, storeowner0_1_.is_active as is_activ4_7_0_, storeowner0_1_.name as name5_7_0_, storeowner0_1_.password as password6_7_0_, storeowner0_1_.username as username7_7_0_ from store_owner storeowner0_ inner join member storeowner0_1_ on storeowner0_.member_id=storeowner0_1_.member_id where storeowner0_.member_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.263+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.263+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - SQL table alias mapping - storeowner0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.263+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreOwner [NONE]: select storeowner0_.member_id as member_i1_7_0_, storeowner0_1_.authentication_type as authenti2_7_0_, storeowner0_1_.email as email3_7_0_, storeowner0_1_.is_active as is_activ4_7_0_, storeowner0_1_.name as name5_7_0_, storeowner0_1_.password as password6_7_0_, storeowner0_1_.username as username7_7_0_ from store_owner storeowner0_ inner join member storeowner0_1_ on storeowner0_.member_id=storeowner0_1_.member_id where storeowner0_.member_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.263+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.263+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - SQL table alias mapping - storeowner0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.263+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreOwner [NONE]: select storeowner0_.member_id as member_i1_7_0_, storeowner0_1_.authentication_type as authenti2_7_0_, storeowner0_1_.email as email3_7_0_, storeowner0_1_.is_active as is_activ4_7_0_, storeowner0_1_.name as name5_7_0_, storeowner0_1_.password as password6_7_0_, storeowner0_1_.username as username7_7_0_ from store_owner storeowner0_ inner join member storeowner0_1_ on storeowner0_.member_id=storeowner0_1_.member_id where storeowner0_.member_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.263+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - SQL table alias mapping - storeowner0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreOwner [NONE]: select storeowner0_.member_id as member_i1_7_0_, storeowner0_1_.authentication_type as authenti2_7_0_, storeowner0_1_.email as email3_7_0_, storeowner0_1_.is_active as is_activ4_7_0_, storeowner0_1_.name as name5_7_0_, storeowner0_1_.password as password6_7_0_, storeowner0_1_.username as username7_7_0_ from store_owner storeowner0_ inner join member storeowner0_1_ on storeowner0_.member_id=storeowner0_1_.member_id where storeowner0_.member_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - SQL table alias mapping - storeowner0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreOwner [NONE]: select storeowner0_.member_id as member_i1_7_0_, storeowner0_1_.authentication_type as authenti2_7_0_, storeowner0_1_.email as email3_7_0_, storeowner0_1_.is_active as is_activ4_7_0_, storeowner0_1_.name as name5_7_0_, storeowner0_1_.password as password6_7_0_, storeowner0_1_.username as username7_7_0_ from store_owner storeowner0_ inner join member storeowner0_1_ on storeowner0_.member_id=storeowner0_1_.member_id where storeowner0_.member_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreOwner)\r\n          - SQL table alias mapping - storeowner0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreOwner [NONE]: select storeowner0_.member_id as member_i1_7_0_, storeowner0_1_.authentication_type as authenti2_7_0_, storeowner0_1_.email as email3_7_0_, storeowner0_1_.is_active as is_activ4_7_0_, storeowner0_1_.name as name5_7_0_, storeowner0_1_.password as password6_7_0_, storeowner0_1_.username as username7_7_0_ from store_owner storeowner0_ inner join member storeowner0_1_ on storeowner0_.member_id=storeowner0_1_.member_id where storeowner0_.member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : "Static SQL for entity: com.twogather.twogatherwebbackend.domain.Likes",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Version select: select likes_id from likes where likes_id =?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Snapshot select: select likes_.likes_id, likes_.member_id as member_i2_6_, likes_.store_id as store_id3_6_ from likes likes_ where likes_.likes_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 0: insert into likes (member_id, store_id, likes_id) values (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 0: update likes set member_id=?, store_id=? where likes_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 0: delete from likes where likes_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Identity insert: insert into likes (member_id, store_id) values (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : ""
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@a926db4]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7a51dc38]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : member.authenticationType",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : member.email",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : member.isActive",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : member.name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : member.password",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : member.username",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : member.storeList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.member"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2842ef02]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.member"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e63374b]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : member.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.member"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@aa794a3]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.member"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1dce481b]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@22cb8e5f]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.address",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.businessHourList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7341baa3]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:8> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1ca0aa40]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.businessName",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.businessNumber",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.businessStartDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:9> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@626766fd]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.likesList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Property path deemed to be circular : store.likesList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.menuList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:10> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@e1fd2bf]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:11> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@70f5f57d]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.owner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:12> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@691eb389]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.phone",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.reasonForRejection",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.requestDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:13> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@301770d9]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:14> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@40edc64e]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.status",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.storeImageList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:15> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1fec9d33]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:16> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@372f7bc]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store.storeKeywordList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:17> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@8e8ceb3]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Likes.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:18> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2699b656]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.266+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy",
  "message" : "Building LoadPlan...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.267+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.268+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Likes.member)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Likes.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Likes.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Likes.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - SQL table alias mapping - likes0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {likes_id1_6_0_}\r\n          - JOIN (JoinDefinedByMetadata(member)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.269+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Likes [NONE]: select likes0_.likes_id as likes_id1_6_0_, likes0_.member_id as member_i2_6_0_, likes0_.store_id as store_id3_6_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from likes likes0_ left outer join member member1_ on likes0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on likes0_.store_id=store2_.store_id where likes0_.likes_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.269+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.270+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Likes.member)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Likes.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Likes.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Likes.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - SQL table alias mapping - likes0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {likes_id1_6_0_}\r\n          - JOIN (JoinDefinedByMetadata(member)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.270+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Likes [NONE]: select likes0_.likes_id as likes_id1_6_0_, likes0_.member_id as member_i2_6_0_, likes0_.store_id as store_id3_6_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from likes likes0_ left outer join member member1_ on likes0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on likes0_.store_id=store2_.store_id where likes0_.likes_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.270+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.271+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Likes.member)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Likes.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Likes.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Likes.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - SQL table alias mapping - likes0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {likes_id1_6_0_}\r\n          - JOIN (JoinDefinedByMetadata(member)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.271+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Likes [NONE]: select likes0_.likes_id as likes_id1_6_0_, likes0_.member_id as member_i2_6_0_, likes0_.store_id as store_id3_6_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from likes likes0_ left outer join member member1_ on likes0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on likes0_.store_id=store2_.store_id where likes0_.likes_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.271+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.273+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Likes.member)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Likes.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Likes.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Likes.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - SQL table alias mapping - likes0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {likes_id1_6_0_}\r\n          - JOIN (JoinDefinedByMetadata(member)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.273+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Likes [NONE]: select likes0_.likes_id as likes_id1_6_0_, likes0_.member_id as member_i2_6_0_, likes0_.store_id as store_id3_6_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from likes likes0_ left outer join member member1_ on likes0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on likes0_.store_id=store2_.store_id where likes0_.likes_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.273+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.274+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Likes.member)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Likes.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Likes.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Likes.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - SQL table alias mapping - likes0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {likes_id1_6_0_}\r\n          - JOIN (JoinDefinedByMetadata(member)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.274+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Likes [NONE]: select likes0_.likes_id as likes_id1_6_0_, likes0_.member_id as member_i2_6_0_, likes0_.store_id as store_id3_6_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from likes likes0_ left outer join member member1_ on likes0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on likes0_.store_id=store2_.store_id where likes0_.likes_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.274+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.275+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Likes.member)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Likes.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Likes.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Likes.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - SQL table alias mapping - likes0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {likes_id1_6_0_}\r\n          - JOIN (JoinDefinedByMetadata(member)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.281+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Likes [NONE]: select likes0_.likes_id as likes_id1_6_0_, likes0_.member_id as member_i2_6_0_, likes0_.store_id as store_id3_6_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from likes likes0_ left outer join member member1_ on likes0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on likes0_.store_id=store2_.store_id where likes0_.likes_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.282+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.283+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Likes.member)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Likes.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Likes.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Likes.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - SQL table alias mapping - likes0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {likes_id1_6_0_}\r\n          - JOIN (JoinDefinedByMetadata(member)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.283+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Likes [NONE]: select likes0_.likes_id as likes_id1_6_0_, likes0_.member_id as member_i2_6_0_, likes0_.store_id as store_id3_6_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from likes likes0_ left outer join member member1_ on likes0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on likes0_.store_id=store2_.store_id where likes0_.likes_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.283+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.284+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Likes.member)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Likes.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Likes.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Likes.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - SQL table alias mapping - likes0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {likes_id1_6_0_}\r\n          - JOIN (JoinDefinedByMetadata(member)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.284+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Likes [NONE]: select likes0_.likes_id as likes_id1_6_0_, likes0_.member_id as member_i2_6_0_, likes0_.store_id as store_id3_6_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from likes likes0_ left outer join member member1_ on likes0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on likes0_.store_id=store2_.store_id where likes0_.likes_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.284+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.286+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Likes.member)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Likes.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Likes.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Likes.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - SQL table alias mapping - likes0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {likes_id1_6_0_}\r\n          - JOIN (JoinDefinedByMetadata(member)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.286+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Likes [NONE]: select likes0_.likes_id as likes_id1_6_0_, likes0_.member_id as member_i2_6_0_, likes0_.store_id as store_id3_6_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from likes likes0_ left outer join member member1_ on likes0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on likes0_.store_id=store2_.store_id where likes0_.likes_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.286+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Likes.member)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Likes.member.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Likes.member.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Likes.store)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Likes.store.businessHourList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Likes.store.category)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Likes.store.menuList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Likes.store.owner)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Likes.store.reviewList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeImageList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Likes.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Likes)\r\n          - SQL table alias mapping - likes0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {likes_id1_6_0_}\r\n          - JOIN (JoinDefinedByMetadata(member)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(store)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                - SQL table alias mapping - store2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {store_id1_10_2_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Likes [NONE]: select likes0_.likes_id as likes_id1_6_0_, likes0_.member_id as member_i2_6_0_, likes0_.store_id as store_id3_6_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, store2_.store_id as store_id1_10_2_, store2_.address as address2_10_2_, store2_.business_name as business3_10_2_, store2_.business_number as business4_10_2_, store2_.business_start_date as business5_10_2_, store2_.category_id as categor11_10_2_, store2_.name as name6_10_2_, store2_.member_id as member_12_10_2_, store2_.phone as phone7_10_2_, store2_.reason_for_rejection as reason_f8_10_2_, store2_.request_date as request_9_10_2_, store2_.status as status10_10_2_ from likes likes0_ left outer join member member1_ on likes0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join store store2_ on likes0_.store_id=store2_.store_id where likes0_.likes_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : "Static SQL for entity: com.twogather.twogatherwebbackend.domain.BusinessHour",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Version select: select business_hour_id from business_hour where business_hour_id =?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Snapshot select: select businessho_.business_hour_id, businessho_.break_end_time as break_en2_0_, businessho_.break_start_time as break_st3_0_, businessho_.day_of_week as day_of_w4_0_, businessho_.end_time as end_time5_0_, businessho_.has_break_time as has_brea6_0_, businessho_.is_open as is_open7_0_, businessho_.start_time as start_ti8_0_, businessho_.store_id as store_id9_0_ from business_hour businessho_ where businessho_.business_hour_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 0: insert into business_hour (break_end_time, break_start_time, day_of_week, end_time, has_break_time, is_open, start_time, store_id, business_hour_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 0: update business_hour set break_end_time=?, break_start_time=?, day_of_week=?, end_time=?, has_break_time=?, is_open=?, start_time=?, store_id=? where business_hour_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 0: delete from business_hour where business_hour_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Identity insert: insert into business_hour (break_end_time, break_start_time, day_of_week, end_time, has_break_time, is_open, start_time, store_id) values (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : ""
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5d67b2b3]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.BusinessHour"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : breakEndTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.BusinessHour"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : breakStartTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.BusinessHour"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : dayOfWeek",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.BusinessHour"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : endTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.BusinessHour"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : hasBreakTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.BusinessHour"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : isOpen",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.BusinessHour"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : startTime",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.BusinessHour"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.BusinessHour"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7efa366]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy",
  "message" : "Building LoadPlan...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.BusinessHour.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - SQL table alias mapping - businessho0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {business1_0_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.BusinessHour [NONE]: select businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.business_hour_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.BusinessHour.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - SQL table alias mapping - businessho0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {business1_0_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.BusinessHour [NONE]: select businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.business_hour_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.BusinessHour.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - SQL table alias mapping - businessho0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {business1_0_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.BusinessHour [NONE]: select businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.business_hour_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.BusinessHour.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - SQL table alias mapping - businessho0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {business1_0_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.BusinessHour [NONE]: select businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.business_hour_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.291+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.BusinessHour.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - SQL table alias mapping - businessho0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {business1_0_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.291+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.BusinessHour [NONE]: select businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.business_hour_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.291+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.291+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.BusinessHour.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - SQL table alias mapping - businessho0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {business1_0_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.291+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.BusinessHour [NONE]: select businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.business_hour_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.291+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.291+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.BusinessHour.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - SQL table alias mapping - businessho0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {business1_0_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.BusinessHour [NONE]: select businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.business_hour_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.BusinessHour.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - SQL table alias mapping - businessho0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {business1_0_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.BusinessHour [NONE]: select businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.business_hour_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.BusinessHour.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - SQL table alias mapping - businessho0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {business1_0_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.BusinessHour [NONE]: select businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.business_hour_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.BusinessHour.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.BusinessHour)\r\n          - SQL table alias mapping - businessho0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {business1_0_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.BusinessHour [NONE]: select businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.business_hour_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : "Static SQL for entity: com.twogather.twogatherwebbackend.domain.Comment",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Version select: select comment_id from comment where comment_id =?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.292+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Snapshot select: select comment_.comment_id, comment_.member_id as member_i4_2_, comment_.content as content2_2_, comment_.created_date as created_3_2_, comment_.review_id as review_i5_2_ from comment comment_ where comment_.comment_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 0: insert into comment (member_id, content, created_date, review_id, comment_id) values (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 0: update comment set member_id=?, content=?, created_date=?, review_id=? where comment_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 0: delete from comment where comment_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Identity insert: insert into comment (member_id, content, created_date, review_id) values (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : ""
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6c2f8ecb]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : commenter",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2626aa35]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.commenter"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : commenter.authenticationType",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.commenter"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : commenter.email",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.commenter"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : commenter.isActive",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.commenter"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : commenter.name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.commenter"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : commenter.password",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.commenter"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : commenter.username",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.commenter"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : commenter.storeList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.commenter"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4c614d8c]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.commenter"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2ae4c424]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.commenter"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : commenter.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.commenter"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3980b44f]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.commenter"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@237aba92]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : content",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : createdDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@65b19e5c]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.commentList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Property path deemed to be circular : review.commentList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.content",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.createdDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.reviewer",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@55665086]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.reviewer.authenticationType",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.reviewer.email",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.reviewer.isActive",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.reviewer.name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.reviewer.password",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.reviewer.username",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.293+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.reviewer.storeList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.reviewer"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:8> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4a14f7d7]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.reviewer"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:9> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@66596c4c]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.reviewer.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.reviewer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Property path deemed to be circular : review.reviewer.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.score",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:10> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@15ce261]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.address",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.businessHourList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:11> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@39840986]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:12> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@141229f6]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.businessName",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.businessNumber",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.businessStartDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:13> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@723b8eff]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.likesList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:14> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3987a1e8]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:15> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@20d65767]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.menuList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:16> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@250e8712]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:17> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@becb93a]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.owner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:18> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@f60c14e]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.phone",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.reasonForRejection",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.requestDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Property path deemed to be circular : review.store.reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.status",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.storeImageList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:19> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1d1fd2aa]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:20> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4c78e00c]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : review.store.storeKeywordList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:21> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@22b3b5d0]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Comment.review.store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:22> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2b506a79]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy",
  "message" : "Building LoadPlan...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.295+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.297+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Comment.review)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.category)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.owner)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:19>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:20>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:21>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:22>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - SQL table alias mapping - comment0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {comment_1_2_0_}\r\n          - JOIN (JoinDefinedByMetadata(commenter)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(review)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n                - SQL table alias mapping - review2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {review_i1_9_2_}\r\n                - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:6> -> <gen:7>\r\n                   - EntityQuerySpaceImpl(uid=<gen:7>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                      - SQL table alias mapping - member3_\r\n                      - alias suffix - 3_\r\n                      - suffixed key columns - {member_i1_7_3_}\r\n                - JOIN (JoinDefinedByMetadata(store)) : <gen:6> -> <gen:10>\r\n                   - EntityQuerySpaceImpl(uid=<gen:10>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                      - SQL table alias mapping - store4_\r\n                      - alias suffix - 4_\r\n                      - suffixed key columns - {store_id1_10_4_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.297+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Comment [NONE]: select comment0_.comment_id as comment_1_2_0_, comment0_.member_id as member_i4_2_0_, comment0_.content as content2_2_0_, comment0_.created_date as created_3_2_0_, comment0_.review_id as review_i5_2_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, review2_.review_id as review_i1_9_2_, review2_.content as content2_9_2_, review2_.created_date as created_3_9_2_, review2_.member_id as member_i5_9_2_, review2_.score as score4_9_2_, review2_.store_id as store_id6_9_2_, member3_.member_id as member_i1_7_3_, member3_.authentication_type as authenti2_7_3_, member3_.email as email3_7_3_, member3_.is_active as is_activ4_7_3_, member3_.name as name5_7_3_, member3_.password as password6_7_3_, member3_.username as username7_7_3_, case when member3_1_.member_id is not null then 1 when member3_2_.member_id is not null then 2 when member3_.member_id is not null then 0 end as clazz_3_, store4_.store_id as store_id1_10_4_, store4_.address as address2_10_4_, store4_.business_name as business3_10_4_, store4_.business_number as business4_10_4_, store4_.business_start_date as business5_10_4_, store4_.category_id as categor11_10_4_, store4_.name as name6_10_4_, store4_.member_id as member_12_10_4_, store4_.phone as phone7_10_4_, store4_.reason_for_rejection as reason_f8_10_4_, store4_.request_date as request_9_10_4_, store4_.status as status10_10_4_ from comment comment0_ left outer join member member1_ on comment0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join review review2_ on comment0_.review_id=review2_.review_id left outer join member member3_ on review2_.member_id=member3_.member_id left outer join consumer member3_1_ on member3_.member_id=member3_1_.member_id left outer join store_owner member3_2_ on member3_.member_id=member3_2_.member_id left outer join store store4_ on review2_.store_id=store4_.store_id where comment0_.comment_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.297+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.299+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Comment.review)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.category)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.owner)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:19>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:20>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:21>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:22>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - SQL table alias mapping - comment0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {comment_1_2_0_}\r\n          - JOIN (JoinDefinedByMetadata(commenter)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(review)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n                - SQL table alias mapping - review2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {review_i1_9_2_}\r\n                - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:6> -> <gen:7>\r\n                   - EntityQuerySpaceImpl(uid=<gen:7>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                      - SQL table alias mapping - member3_\r\n                      - alias suffix - 3_\r\n                      - suffixed key columns - {member_i1_7_3_}\r\n                - JOIN (JoinDefinedByMetadata(store)) : <gen:6> -> <gen:10>\r\n                   - EntityQuerySpaceImpl(uid=<gen:10>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                      - SQL table alias mapping - store4_\r\n                      - alias suffix - 4_\r\n                      - suffixed key columns - {store_id1_10_4_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.299+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Comment [NONE]: select comment0_.comment_id as comment_1_2_0_, comment0_.member_id as member_i4_2_0_, comment0_.content as content2_2_0_, comment0_.created_date as created_3_2_0_, comment0_.review_id as review_i5_2_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, review2_.review_id as review_i1_9_2_, review2_.content as content2_9_2_, review2_.created_date as created_3_9_2_, review2_.member_id as member_i5_9_2_, review2_.score as score4_9_2_, review2_.store_id as store_id6_9_2_, member3_.member_id as member_i1_7_3_, member3_.authentication_type as authenti2_7_3_, member3_.email as email3_7_3_, member3_.is_active as is_activ4_7_3_, member3_.name as name5_7_3_, member3_.password as password6_7_3_, member3_.username as username7_7_3_, case when member3_1_.member_id is not null then 1 when member3_2_.member_id is not null then 2 when member3_.member_id is not null then 0 end as clazz_3_, store4_.store_id as store_id1_10_4_, store4_.address as address2_10_4_, store4_.business_name as business3_10_4_, store4_.business_number as business4_10_4_, store4_.business_start_date as business5_10_4_, store4_.category_id as categor11_10_4_, store4_.name as name6_10_4_, store4_.member_id as member_12_10_4_, store4_.phone as phone7_10_4_, store4_.reason_for_rejection as reason_f8_10_4_, store4_.request_date as request_9_10_4_, store4_.status as status10_10_4_ from comment comment0_ left outer join member member1_ on comment0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join review review2_ on comment0_.review_id=review2_.review_id left outer join member member3_ on review2_.member_id=member3_.member_id left outer join consumer member3_1_ on member3_.member_id=member3_1_.member_id left outer join store_owner member3_2_ on member3_.member_id=member3_2_.member_id left outer join store store4_ on review2_.store_id=store4_.store_id where comment0_.comment_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.299+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.301+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Comment.review)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.category)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.owner)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:19>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:20>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:21>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:22>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - SQL table alias mapping - comment0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {comment_1_2_0_}\r\n          - JOIN (JoinDefinedByMetadata(commenter)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(review)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n                - SQL table alias mapping - review2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {review_i1_9_2_}\r\n                - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:6> -> <gen:7>\r\n                   - EntityQuerySpaceImpl(uid=<gen:7>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                      - SQL table alias mapping - member3_\r\n                      - alias suffix - 3_\r\n                      - suffixed key columns - {member_i1_7_3_}\r\n                - JOIN (JoinDefinedByMetadata(store)) : <gen:6> -> <gen:10>\r\n                   - EntityQuerySpaceImpl(uid=<gen:10>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                      - SQL table alias mapping - store4_\r\n                      - alias suffix - 4_\r\n                      - suffixed key columns - {store_id1_10_4_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.301+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Comment [NONE]: select comment0_.comment_id as comment_1_2_0_, comment0_.member_id as member_i4_2_0_, comment0_.content as content2_2_0_, comment0_.created_date as created_3_2_0_, comment0_.review_id as review_i5_2_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, review2_.review_id as review_i1_9_2_, review2_.content as content2_9_2_, review2_.created_date as created_3_9_2_, review2_.member_id as member_i5_9_2_, review2_.score as score4_9_2_, review2_.store_id as store_id6_9_2_, member3_.member_id as member_i1_7_3_, member3_.authentication_type as authenti2_7_3_, member3_.email as email3_7_3_, member3_.is_active as is_activ4_7_3_, member3_.name as name5_7_3_, member3_.password as password6_7_3_, member3_.username as username7_7_3_, case when member3_1_.member_id is not null then 1 when member3_2_.member_id is not null then 2 when member3_.member_id is not null then 0 end as clazz_3_, store4_.store_id as store_id1_10_4_, store4_.address as address2_10_4_, store4_.business_name as business3_10_4_, store4_.business_number as business4_10_4_, store4_.business_start_date as business5_10_4_, store4_.category_id as categor11_10_4_, store4_.name as name6_10_4_, store4_.member_id as member_12_10_4_, store4_.phone as phone7_10_4_, store4_.reason_for_rejection as reason_f8_10_4_, store4_.request_date as request_9_10_4_, store4_.status as status10_10_4_ from comment comment0_ left outer join member member1_ on comment0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join review review2_ on comment0_.review_id=review2_.review_id left outer join member member3_ on review2_.member_id=member3_.member_id left outer join consumer member3_1_ on member3_.member_id=member3_1_.member_id left outer join store_owner member3_2_ on member3_.member_id=member3_2_.member_id left outer join store store4_ on review2_.store_id=store4_.store_id where comment0_.comment_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.301+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.303+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Comment.review)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.category)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.owner)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:19>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:20>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:21>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:22>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - SQL table alias mapping - comment0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {comment_1_2_0_}\r\n          - JOIN (JoinDefinedByMetadata(commenter)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(review)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n                - SQL table alias mapping - review2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {review_i1_9_2_}\r\n                - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:6> -> <gen:7>\r\n                   - EntityQuerySpaceImpl(uid=<gen:7>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                      - SQL table alias mapping - member3_\r\n                      - alias suffix - 3_\r\n                      - suffixed key columns - {member_i1_7_3_}\r\n                - JOIN (JoinDefinedByMetadata(store)) : <gen:6> -> <gen:10>\r\n                   - EntityQuerySpaceImpl(uid=<gen:10>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                      - SQL table alias mapping - store4_\r\n                      - alias suffix - 4_\r\n                      - suffixed key columns - {store_id1_10_4_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.303+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Comment [NONE]: select comment0_.comment_id as comment_1_2_0_, comment0_.member_id as member_i4_2_0_, comment0_.content as content2_2_0_, comment0_.created_date as created_3_2_0_, comment0_.review_id as review_i5_2_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, review2_.review_id as review_i1_9_2_, review2_.content as content2_9_2_, review2_.created_date as created_3_9_2_, review2_.member_id as member_i5_9_2_, review2_.score as score4_9_2_, review2_.store_id as store_id6_9_2_, member3_.member_id as member_i1_7_3_, member3_.authentication_type as authenti2_7_3_, member3_.email as email3_7_3_, member3_.is_active as is_activ4_7_3_, member3_.name as name5_7_3_, member3_.password as password6_7_3_, member3_.username as username7_7_3_, case when member3_1_.member_id is not null then 1 when member3_2_.member_id is not null then 2 when member3_.member_id is not null then 0 end as clazz_3_, store4_.store_id as store_id1_10_4_, store4_.address as address2_10_4_, store4_.business_name as business3_10_4_, store4_.business_number as business4_10_4_, store4_.business_start_date as business5_10_4_, store4_.category_id as categor11_10_4_, store4_.name as name6_10_4_, store4_.member_id as member_12_10_4_, store4_.phone as phone7_10_4_, store4_.reason_for_rejection as reason_f8_10_4_, store4_.request_date as request_9_10_4_, store4_.status as status10_10_4_ from comment comment0_ left outer join member member1_ on comment0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join review review2_ on comment0_.review_id=review2_.review_id left outer join member member3_ on review2_.member_id=member3_.member_id left outer join consumer member3_1_ on member3_.member_id=member3_1_.member_id left outer join store_owner member3_2_ on member3_.member_id=member3_2_.member_id left outer join store store4_ on review2_.store_id=store4_.store_id where comment0_.comment_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.303+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.305+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Comment.review)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.category)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.owner)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:19>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:20>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:21>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:22>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - SQL table alias mapping - comment0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {comment_1_2_0_}\r\n          - JOIN (JoinDefinedByMetadata(commenter)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(review)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n                - SQL table alias mapping - review2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {review_i1_9_2_}\r\n                - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:6> -> <gen:7>\r\n                   - EntityQuerySpaceImpl(uid=<gen:7>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                      - SQL table alias mapping - member3_\r\n                      - alias suffix - 3_\r\n                      - suffixed key columns - {member_i1_7_3_}\r\n                - JOIN (JoinDefinedByMetadata(store)) : <gen:6> -> <gen:10>\r\n                   - EntityQuerySpaceImpl(uid=<gen:10>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                      - SQL table alias mapping - store4_\r\n                      - alias suffix - 4_\r\n                      - suffixed key columns - {store_id1_10_4_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.305+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Comment [NONE]: select comment0_.comment_id as comment_1_2_0_, comment0_.member_id as member_i4_2_0_, comment0_.content as content2_2_0_, comment0_.created_date as created_3_2_0_, comment0_.review_id as review_i5_2_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, review2_.review_id as review_i1_9_2_, review2_.content as content2_9_2_, review2_.created_date as created_3_9_2_, review2_.member_id as member_i5_9_2_, review2_.score as score4_9_2_, review2_.store_id as store_id6_9_2_, member3_.member_id as member_i1_7_3_, member3_.authentication_type as authenti2_7_3_, member3_.email as email3_7_3_, member3_.is_active as is_activ4_7_3_, member3_.name as name5_7_3_, member3_.password as password6_7_3_, member3_.username as username7_7_3_, case when member3_1_.member_id is not null then 1 when member3_2_.member_id is not null then 2 when member3_.member_id is not null then 0 end as clazz_3_, store4_.store_id as store_id1_10_4_, store4_.address as address2_10_4_, store4_.business_name as business3_10_4_, store4_.business_number as business4_10_4_, store4_.business_start_date as business5_10_4_, store4_.category_id as categor11_10_4_, store4_.name as name6_10_4_, store4_.member_id as member_12_10_4_, store4_.phone as phone7_10_4_, store4_.reason_for_rejection as reason_f8_10_4_, store4_.request_date as request_9_10_4_, store4_.status as status10_10_4_ from comment comment0_ left outer join member member1_ on comment0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join review review2_ on comment0_.review_id=review2_.review_id left outer join member member3_ on review2_.member_id=member3_.member_id left outer join consumer member3_1_ on member3_.member_id=member3_1_.member_id left outer join store_owner member3_2_ on member3_.member_id=member3_2_.member_id left outer join store store4_ on review2_.store_id=store4_.store_id where comment0_.comment_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.305+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.307+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Comment.review)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.category)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.owner)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:19>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:20>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:21>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:22>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - SQL table alias mapping - comment0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {comment_1_2_0_}\r\n          - JOIN (JoinDefinedByMetadata(commenter)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(review)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n                - SQL table alias mapping - review2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {review_i1_9_2_}\r\n                - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:6> -> <gen:7>\r\n                   - EntityQuerySpaceImpl(uid=<gen:7>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                      - SQL table alias mapping - member3_\r\n                      - alias suffix - 3_\r\n                      - suffixed key columns - {member_i1_7_3_}\r\n                - JOIN (JoinDefinedByMetadata(store)) : <gen:6> -> <gen:10>\r\n                   - EntityQuerySpaceImpl(uid=<gen:10>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                      - SQL table alias mapping - store4_\r\n                      - alias suffix - 4_\r\n                      - suffixed key columns - {store_id1_10_4_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.307+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Comment [NONE]: select comment0_.comment_id as comment_1_2_0_, comment0_.member_id as member_i4_2_0_, comment0_.content as content2_2_0_, comment0_.created_date as created_3_2_0_, comment0_.review_id as review_i5_2_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, review2_.review_id as review_i1_9_2_, review2_.content as content2_9_2_, review2_.created_date as created_3_9_2_, review2_.member_id as member_i5_9_2_, review2_.score as score4_9_2_, review2_.store_id as store_id6_9_2_, member3_.member_id as member_i1_7_3_, member3_.authentication_type as authenti2_7_3_, member3_.email as email3_7_3_, member3_.is_active as is_activ4_7_3_, member3_.name as name5_7_3_, member3_.password as password6_7_3_, member3_.username as username7_7_3_, case when member3_1_.member_id is not null then 1 when member3_2_.member_id is not null then 2 when member3_.member_id is not null then 0 end as clazz_3_, store4_.store_id as store_id1_10_4_, store4_.address as address2_10_4_, store4_.business_name as business3_10_4_, store4_.business_number as business4_10_4_, store4_.business_start_date as business5_10_4_, store4_.category_id as categor11_10_4_, store4_.name as name6_10_4_, store4_.member_id as member_12_10_4_, store4_.phone as phone7_10_4_, store4_.reason_for_rejection as reason_f8_10_4_, store4_.request_date as request_9_10_4_, store4_.status as status10_10_4_ from comment comment0_ left outer join member member1_ on comment0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join review review2_ on comment0_.review_id=review2_.review_id left outer join member member3_ on review2_.member_id=member3_.member_id left outer join consumer member3_1_ on member3_.member_id=member3_1_.member_id left outer join store_owner member3_2_ on member3_.member_id=member3_2_.member_id left outer join store store4_ on review2_.store_id=store4_.store_id where comment0_.comment_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.307+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.310+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Comment.review)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.category)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.owner)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:19>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:20>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:21>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:22>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - SQL table alias mapping - comment0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {comment_1_2_0_}\r\n          - JOIN (JoinDefinedByMetadata(commenter)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(review)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n                - SQL table alias mapping - review2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {review_i1_9_2_}\r\n                - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:6> -> <gen:7>\r\n                   - EntityQuerySpaceImpl(uid=<gen:7>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                      - SQL table alias mapping - member3_\r\n                      - alias suffix - 3_\r\n                      - suffixed key columns - {member_i1_7_3_}\r\n                - JOIN (JoinDefinedByMetadata(store)) : <gen:6> -> <gen:10>\r\n                   - EntityQuerySpaceImpl(uid=<gen:10>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                      - SQL table alias mapping - store4_\r\n                      - alias suffix - 4_\r\n                      - suffixed key columns - {store_id1_10_4_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.310+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Comment [NONE]: select comment0_.comment_id as comment_1_2_0_, comment0_.member_id as member_i4_2_0_, comment0_.content as content2_2_0_, comment0_.created_date as created_3_2_0_, comment0_.review_id as review_i5_2_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, review2_.review_id as review_i1_9_2_, review2_.content as content2_9_2_, review2_.created_date as created_3_9_2_, review2_.member_id as member_i5_9_2_, review2_.score as score4_9_2_, review2_.store_id as store_id6_9_2_, member3_.member_id as member_i1_7_3_, member3_.authentication_type as authenti2_7_3_, member3_.email as email3_7_3_, member3_.is_active as is_activ4_7_3_, member3_.name as name5_7_3_, member3_.password as password6_7_3_, member3_.username as username7_7_3_, case when member3_1_.member_id is not null then 1 when member3_2_.member_id is not null then 2 when member3_.member_id is not null then 0 end as clazz_3_, store4_.store_id as store_id1_10_4_, store4_.address as address2_10_4_, store4_.business_name as business3_10_4_, store4_.business_number as business4_10_4_, store4_.business_start_date as business5_10_4_, store4_.category_id as categor11_10_4_, store4_.name as name6_10_4_, store4_.member_id as member_12_10_4_, store4_.phone as phone7_10_4_, store4_.reason_for_rejection as reason_f8_10_4_, store4_.request_date as request_9_10_4_, store4_.status as status10_10_4_ from comment comment0_ left outer join member member1_ on comment0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join review review2_ on comment0_.review_id=review2_.review_id left outer join member member3_ on review2_.member_id=member3_.member_id left outer join consumer member3_1_ on member3_.member_id=member3_1_.member_id left outer join store_owner member3_2_ on member3_.member_id=member3_2_.member_id left outer join store store4_ on review2_.store_id=store4_.store_id where comment0_.comment_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.310+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.311+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Comment.review)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.category)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.owner)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:19>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:20>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:21>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:22>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - SQL table alias mapping - comment0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {comment_1_2_0_}\r\n          - JOIN (JoinDefinedByMetadata(commenter)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(review)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n                - SQL table alias mapping - review2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {review_i1_9_2_}\r\n                - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:6> -> <gen:7>\r\n                   - EntityQuerySpaceImpl(uid=<gen:7>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                      - SQL table alias mapping - member3_\r\n                      - alias suffix - 3_\r\n                      - suffixed key columns - {member_i1_7_3_}\r\n                - JOIN (JoinDefinedByMetadata(store)) : <gen:6> -> <gen:10>\r\n                   - EntityQuerySpaceImpl(uid=<gen:10>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                      - SQL table alias mapping - store4_\r\n                      - alias suffix - 4_\r\n                      - suffixed key columns - {store_id1_10_4_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.311+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Comment [NONE]: select comment0_.comment_id as comment_1_2_0_, comment0_.member_id as member_i4_2_0_, comment0_.content as content2_2_0_, comment0_.created_date as created_3_2_0_, comment0_.review_id as review_i5_2_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, review2_.review_id as review_i1_9_2_, review2_.content as content2_9_2_, review2_.created_date as created_3_9_2_, review2_.member_id as member_i5_9_2_, review2_.score as score4_9_2_, review2_.store_id as store_id6_9_2_, member3_.member_id as member_i1_7_3_, member3_.authentication_type as authenti2_7_3_, member3_.email as email3_7_3_, member3_.is_active as is_activ4_7_3_, member3_.name as name5_7_3_, member3_.password as password6_7_3_, member3_.username as username7_7_3_, case when member3_1_.member_id is not null then 1 when member3_2_.member_id is not null then 2 when member3_.member_id is not null then 0 end as clazz_3_, store4_.store_id as store_id1_10_4_, store4_.address as address2_10_4_, store4_.business_name as business3_10_4_, store4_.business_number as business4_10_4_, store4_.business_start_date as business5_10_4_, store4_.category_id as categor11_10_4_, store4_.name as name6_10_4_, store4_.member_id as member_12_10_4_, store4_.phone as phone7_10_4_, store4_.reason_for_rejection as reason_f8_10_4_, store4_.request_date as request_9_10_4_, store4_.status as status10_10_4_ from comment comment0_ left outer join member member1_ on comment0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join review review2_ on comment0_.review_id=review2_.review_id left outer join member member3_ on review2_.member_id=member3_.member_id left outer join consumer member3_1_ on member3_.member_id=member3_1_.member_id left outer join store_owner member3_2_ on member3_.member_id=member3_2_.member_id left outer join store store4_ on review2_.store_id=store4_.store_id where comment0_.comment_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.311+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.313+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection adder",
  "logger" : "com.zaxxer.hikari.pool.HikariPool",
  "message" : "HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@29d6df52",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.313+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Comment.review)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.category)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.owner)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:19>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:20>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:21>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:22>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - SQL table alias mapping - comment0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {comment_1_2_0_}\r\n          - JOIN (JoinDefinedByMetadata(commenter)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(review)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n                - SQL table alias mapping - review2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {review_i1_9_2_}\r\n                - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:6> -> <gen:7>\r\n                   - EntityQuerySpaceImpl(uid=<gen:7>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                      - SQL table alias mapping - member3_\r\n                      - alias suffix - 3_\r\n                      - suffixed key columns - {member_i1_7_3_}\r\n                - JOIN (JoinDefinedByMetadata(store)) : <gen:6> -> <gen:10>\r\n                   - EntityQuerySpaceImpl(uid=<gen:10>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                      - SQL table alias mapping - store4_\r\n                      - alias suffix - 4_\r\n                      - suffixed key columns - {store_id1_10_4_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.313+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Comment [NONE]: select comment0_.comment_id as comment_1_2_0_, comment0_.member_id as member_i4_2_0_, comment0_.content as content2_2_0_, comment0_.created_date as created_3_2_0_, comment0_.review_id as review_i5_2_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, review2_.review_id as review_i1_9_2_, review2_.content as content2_9_2_, review2_.created_date as created_3_9_2_, review2_.member_id as member_i5_9_2_, review2_.score as score4_9_2_, review2_.store_id as store_id6_9_2_, member3_.member_id as member_i1_7_3_, member3_.authentication_type as authenti2_7_3_, member3_.email as email3_7_3_, member3_.is_active as is_activ4_7_3_, member3_.name as name5_7_3_, member3_.password as password6_7_3_, member3_.username as username7_7_3_, case when member3_1_.member_id is not null then 1 when member3_2_.member_id is not null then 2 when member3_.member_id is not null then 0 end as clazz_3_, store4_.store_id as store_id1_10_4_, store4_.address as address2_10_4_, store4_.business_name as business3_10_4_, store4_.business_number as business4_10_4_, store4_.business_start_date as business5_10_4_, store4_.category_id as categor11_10_4_, store4_.name as name6_10_4_, store4_.member_id as member_12_10_4_, store4_.phone as phone7_10_4_, store4_.reason_for_rejection as reason_f8_10_4_, store4_.request_date as request_9_10_4_, store4_.status as status10_10_4_ from comment comment0_ left outer join member member1_ on comment0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join review review2_ on comment0_.review_id=review2_.review_id left outer join member member3_ on review2_.member_id=member3_.member_id left outer join consumer member3_1_ on member3_.member_id=member3_1_.member_id left outer join store_owner member3_2_ on member3_.member_id=member3_2_.member_id left outer join store store4_ on review2_.store_id=store4_.store_id where comment0_.comment_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.313+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.315+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Comment, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.storeList.<elements>)\r\n             - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList)\r\n                - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Comment.commenter.reviewList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Comment.review)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Comment.review.reviewer.storeList.<elements>)\r\n             - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.businessHourList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.category)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:15>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.likesList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:16>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:17>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.menuList.<elements>)\r\n                - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:18>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.owner)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:19>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:20>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeImageList.<elements>)\r\n                - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:21>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList)\r\n                   - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:22>, path=com.twogather.twogatherwebbackend.domain.Comment.review.store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Comment)\r\n          - SQL table alias mapping - comment0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {comment_1_2_0_}\r\n          - JOIN (JoinDefinedByMetadata(commenter)) : <gen:0> -> <gen:1>\r\n             - EntityQuerySpaceImpl(uid=<gen:1>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                - SQL table alias mapping - member1_\r\n                - alias suffix - 1_\r\n                - suffixed key columns - {member_i1_7_1_}\r\n          - JOIN (JoinDefinedByMetadata(review)) : <gen:0> -> <gen:6>\r\n             - EntityQuerySpaceImpl(uid=<gen:6>, entity=com.twogather.twogatherwebbackend.domain.Review)\r\n                - SQL table alias mapping - review2_\r\n                - alias suffix - 2_\r\n                - suffixed key columns - {review_i1_9_2_}\r\n                - JOIN (JoinDefinedByMetadata(reviewer)) : <gen:6> -> <gen:7>\r\n                   - EntityQuerySpaceImpl(uid=<gen:7>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n                      - SQL table alias mapping - member3_\r\n                      - alias suffix - 3_\r\n                      - suffixed key columns - {member_i1_7_3_}\r\n                - JOIN (JoinDefinedByMetadata(store)) : <gen:6> -> <gen:10>\r\n                   - EntityQuerySpaceImpl(uid=<gen:10>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n                      - SQL table alias mapping - store4_\r\n                      - alias suffix - 4_\r\n                      - suffixed key columns - {store_id1_10_4_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.315+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Comment [NONE]: select comment0_.comment_id as comment_1_2_0_, comment0_.member_id as member_i4_2_0_, comment0_.content as content2_2_0_, comment0_.created_date as created_3_2_0_, comment0_.review_id as review_i5_2_0_, member1_.member_id as member_i1_7_1_, member1_.authentication_type as authenti2_7_1_, member1_.email as email3_7_1_, member1_.is_active as is_activ4_7_1_, member1_.name as name5_7_1_, member1_.password as password6_7_1_, member1_.username as username7_7_1_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_1_, review2_.review_id as review_i1_9_2_, review2_.content as content2_9_2_, review2_.created_date as created_3_9_2_, review2_.member_id as member_i5_9_2_, review2_.score as score4_9_2_, review2_.store_id as store_id6_9_2_, member3_.member_id as member_i1_7_3_, member3_.authentication_type as authenti2_7_3_, member3_.email as email3_7_3_, member3_.is_active as is_activ4_7_3_, member3_.name as name5_7_3_, member3_.password as password6_7_3_, member3_.username as username7_7_3_, case when member3_1_.member_id is not null then 1 when member3_2_.member_id is not null then 2 when member3_.member_id is not null then 0 end as clazz_3_, store4_.store_id as store_id1_10_4_, store4_.address as address2_10_4_, store4_.business_name as business3_10_4_, store4_.business_number as business4_10_4_, store4_.business_start_date as business5_10_4_, store4_.category_id as categor11_10_4_, store4_.name as name6_10_4_, store4_.member_id as member_12_10_4_, store4_.phone as phone7_10_4_, store4_.reason_for_rejection as reason_f8_10_4_, store4_.request_date as request_9_10_4_, store4_.status as status10_10_4_ from comment comment0_ left outer join member member1_ on comment0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id left outer join review review2_ on comment0_.review_id=review2_.review_id left outer join member member3_ on review2_.member_id=member3_.member_id left outer join consumer member3_1_ on member3_.member_id=member3_1_.member_id left outer join store_owner member3_2_ on member3_.member_id=member3_2_.member_id left outer join store store4_ on review2_.store_id=store4_.store_id where comment0_.comment_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.315+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : "Static SQL for entity: com.twogather.twogatherwebbackend.domain.Image",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.315+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Version select: select image_id from image where image_id =?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.315+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Snapshot select: select image_.image_id, image_.store_id as store_id3_4_, image_.url as url2_4_ from image image_ where image_.image_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.315+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 0: insert into image (store_id, url, image_id) values (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.315+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 0: update image set store_id=?, url=? where image_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.316+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 0: delete from image where image_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.316+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Identity insert: insert into image (store_id, url) values (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.316+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : ""
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@48b9773b]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.316+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Image"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.316+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Image"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c68a63c]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.316+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Image"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : url",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.316+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy",
  "message" : "Building LoadPlan...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.316+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.316+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Image)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Image)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Image.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Image)\r\n          - SQL table alias mapping - image0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {image_id1_4_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.316+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Image [NONE]: select image0_.image_id as image_id1_4_0_, image0_.store_id as store_id3_4_0_, image0_.url as url2_4_0_ from image image0_ where image0_.image_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.317+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.317+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Image)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Image)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Image.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Image)\r\n          - SQL table alias mapping - image0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {image_id1_4_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.317+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Image [NONE]: select image0_.image_id as image_id1_4_0_, image0_.store_id as store_id3_4_0_, image0_.url as url2_4_0_ from image image0_ where image0_.image_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.317+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.317+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Image)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Image)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Image.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Image)\r\n          - SQL table alias mapping - image0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {image_id1_4_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.317+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Image [NONE]: select image0_.image_id as image_id1_4_0_, image0_.store_id as store_id3_4_0_, image0_.url as url2_4_0_ from image image0_ where image0_.image_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.317+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.317+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Image)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Image)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Image.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Image)\r\n          - SQL table alias mapping - image0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {image_id1_4_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.317+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Image [NONE]: select image0_.image_id as image_id1_4_0_, image0_.store_id as store_id3_4_0_, image0_.url as url2_4_0_ from image image0_ where image0_.image_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.317+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.317+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Image)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Image)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Image.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Image)\r\n          - SQL table alias mapping - image0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {image_id1_4_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.318+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Image [NONE]: select image0_.image_id as image_id1_4_0_, image0_.store_id as store_id3_4_0_, image0_.url as url2_4_0_ from image image0_ where image0_.image_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.318+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.318+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Image)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Image)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Image.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Image)\r\n          - SQL table alias mapping - image0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {image_id1_4_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.318+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Image [NONE]: select image0_.image_id as image_id1_4_0_, image0_.store_id as store_id3_4_0_, image0_.url as url2_4_0_ from image image0_ where image0_.image_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.318+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.318+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Image)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Image)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Image.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Image)\r\n          - SQL table alias mapping - image0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {image_id1_4_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.318+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Image [NONE]: select image0_.image_id as image_id1_4_0_, image0_.store_id as store_id3_4_0_, image0_.url as url2_4_0_ from image image0_ where image0_.image_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.318+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Image)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Image)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Image.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Image)\r\n          - SQL table alias mapping - image0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {image_id1_4_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Image [NONE]: select image0_.image_id as image_id1_4_0_, image0_.store_id as store_id3_4_0_, image0_.url as url2_4_0_ from image image0_ where image0_.image_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Image)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Image)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Image.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Image)\r\n          - SQL table alias mapping - image0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {image_id1_4_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Image [NONE]: select image0_.image_id as image_id1_4_0_, image0_.store_id as store_id3_4_0_, image0_.url as url2_4_0_ from image image0_ where image0_.image_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Image)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Image)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Image.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Image)\r\n          - SQL table alias mapping - image0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {image_id1_4_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Image [NONE]: select image0_.image_id as image_id1_4_0_, image0_.store_id as store_id3_4_0_, image0_.url as url2_4_0_ from image image0_ where image0_.image_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : "Static SQL for entity: com.twogather.twogatherwebbackend.domain.Member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Version select: select member_id from member where member_id =?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Snapshot select: select member_.member_id, member_.authentication_type as authenti2_7_, member_.email as email3_7_, member_.is_active as is_activ4_7_, member_.name as name5_7_, member_.password as password6_7_, member_.username as username7_7_ from member member_ where member_.member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 0: insert into member (authentication_type, email, is_active, name, password, username, member_id) values (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 0: update member set authentication_type=?, email=?, is_active=?, name=?, password=?, username=? where member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 0: delete from member where member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Identity insert: insert into member (authentication_type, email, is_active, name, password, username) values (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : ""
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5443086a]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : authenticationType",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : email",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : isActive",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : password",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : username",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : storeList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Member"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@40a84ea8]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Member"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@79c849c7]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Member"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Member"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@35840ecc]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Member"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@67fd2e17]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy",
  "message" : "Building LoadPlan...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.321+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.321+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Member)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Member)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Member.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Member.storeList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n          - SQL table alias mapping - member0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.321+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Member [NONE]: select member0_.member_id as member_i1_7_0_, member0_.authentication_type as authenti2_7_0_, member0_.email as email3_7_0_, member0_.is_active as is_activ4_7_0_, member0_.name as name5_7_0_, member0_.password as password6_7_0_, member0_.username as username7_7_0_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_0_ from member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id where member0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.321+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.322+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Member)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Member)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Member.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Member.storeList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n          - SQL table alias mapping - member0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.322+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Member [NONE]: select member0_.member_id as member_i1_7_0_, member0_.authentication_type as authenti2_7_0_, member0_.email as email3_7_0_, member0_.is_active as is_activ4_7_0_, member0_.name as name5_7_0_, member0_.password as password6_7_0_, member0_.username as username7_7_0_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_0_ from member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id where member0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.322+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.322+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Member)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Member)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Member.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Member.storeList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n          - SQL table alias mapping - member0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.322+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Member [NONE]: select member0_.member_id as member_i1_7_0_, member0_.authentication_type as authenti2_7_0_, member0_.email as email3_7_0_, member0_.is_active as is_activ4_7_0_, member0_.name as name5_7_0_, member0_.password as password6_7_0_, member0_.username as username7_7_0_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_0_ from member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id where member0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.322+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.323+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Member)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Member)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Member.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Member.storeList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n          - SQL table alias mapping - member0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.323+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Member [NONE]: select member0_.member_id as member_i1_7_0_, member0_.authentication_type as authenti2_7_0_, member0_.email as email3_7_0_, member0_.is_active as is_activ4_7_0_, member0_.name as name5_7_0_, member0_.password as password6_7_0_, member0_.username as username7_7_0_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_0_ from member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id where member0_.member_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.323+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.323+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Member)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Member)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Member.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Member.storeList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n          - SQL table alias mapping - member0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.323+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Member [NONE]: select member0_.member_id as member_i1_7_0_, member0_.authentication_type as authenti2_7_0_, member0_.email as email3_7_0_, member0_.is_active as is_activ4_7_0_, member0_.name as name5_7_0_, member0_.password as password6_7_0_, member0_.username as username7_7_0_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_0_ from member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id where member0_.member_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.323+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.323+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Member)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Member)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Member.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Member.storeList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n          - SQL table alias mapping - member0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.323+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Member [NONE]: select member0_.member_id as member_i1_7_0_, member0_.authentication_type as authenti2_7_0_, member0_.email as email3_7_0_, member0_.is_active as is_activ4_7_0_, member0_.name as name5_7_0_, member0_.password as password6_7_0_, member0_.username as username7_7_0_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_0_ from member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id where member0_.member_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.323+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.324+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Member)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Member)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Member.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Member.storeList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n          - SQL table alias mapping - member0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.324+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Member [NONE]: select member0_.member_id as member_i1_7_0_, member0_.authentication_type as authenti2_7_0_, member0_.email as email3_7_0_, member0_.is_active as is_activ4_7_0_, member0_.name as name5_7_0_, member0_.password as password6_7_0_, member0_.username as username7_7_0_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_0_ from member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id where member0_.member_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.324+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.324+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Member)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Member)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Member.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Member.storeList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n          - SQL table alias mapping - member0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.324+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Member [NONE]: select member0_.member_id as member_i1_7_0_, member0_.authentication_type as authenti2_7_0_, member0_.email as email3_7_0_, member0_.is_active as is_activ4_7_0_, member0_.name as name5_7_0_, member0_.password as password6_7_0_, member0_.username as username7_7_0_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_0_ from member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id where member0_.member_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.324+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.324+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Member)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Member)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Member.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Member.storeList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n          - SQL table alias mapping - member0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Member [NONE]: select member0_.member_id as member_i1_7_0_, member0_.authentication_type as authenti2_7_0_, member0_.email as email3_7_0_, member0_.is_active as is_activ4_7_0_, member0_.name as name5_7_0_, member0_.password as password6_7_0_, member0_.username as username7_7_0_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_0_ from member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id where member0_.member_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Member)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Member, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Member)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.StoreOwner.storeList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Member.storeList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Member.storeList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Member.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Member)\r\n          - SQL table alias mapping - member0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Member [NONE]: select member0_.member_id as member_i1_7_0_, member0_.authentication_type as authenti2_7_0_, member0_.email as email3_7_0_, member0_.is_active as is_activ4_7_0_, member0_.name as name5_7_0_, member0_.password as password6_7_0_, member0_.username as username7_7_0_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_0_ from member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id where member0_.member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : "Static SQL for entity: com.twogather.twogatherwebbackend.domain.StoreKeyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Version select: select store_keyword_id from store_keyword where store_keyword_id =?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Snapshot select: select storekeywo_.store_keyword_id, storekeywo_.keyword_id as keyword_2_11_, storekeywo_.store_id as store_id3_11_ from store_keyword storekeywo_ where storekeywo_.store_keyword_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 0: insert into store_keyword (keyword_id, store_id, store_keyword_id) values (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 0: update store_keyword set keyword_id=?, store_id=? where store_keyword_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 0: delete from store_keyword where store_keyword_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Identity insert: insert into store_keyword (keyword_id, store_id) values (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : ""
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@65a2e14e]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.StoreKeyword"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.StoreKeyword"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4bf89d3d]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.StoreKeyword"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.StoreKeyword"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@457b8fc3]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy",
  "message" : "Building LoadPlan...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.326+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.326+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.keyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - SQL table alias mapping - storekeywo0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_ke1_11_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.326+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreKeyword [NONE]: select storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_keyword_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.326+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.326+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.keyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - SQL table alias mapping - storekeywo0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_ke1_11_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.326+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreKeyword [NONE]: select storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_keyword_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.326+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.326+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.keyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - SQL table alias mapping - storekeywo0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_ke1_11_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.326+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreKeyword [NONE]: select storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_keyword_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.326+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.328+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.keyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - SQL table alias mapping - storekeywo0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_ke1_11_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.328+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreKeyword [NONE]: select storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_keyword_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.328+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.328+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.keyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - SQL table alias mapping - storekeywo0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_ke1_11_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.328+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreKeyword [NONE]: select storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_keyword_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.328+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.328+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.keyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - SQL table alias mapping - storekeywo0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_ke1_11_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.328+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreKeyword [NONE]: select storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_keyword_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.328+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.328+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.keyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - SQL table alias mapping - storekeywo0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_ke1_11_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreKeyword [NONE]: select storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_keyword_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.keyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - SQL table alias mapping - storekeywo0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_ke1_11_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreKeyword [NONE]: select storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_keyword_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.keyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - SQL table alias mapping - storekeywo0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_ke1_11_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreKeyword [NONE]: select storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_keyword_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.keyword)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.StoreKeyword.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          - SQL table alias mapping - storekeywo0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_ke1_11_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.StoreKeyword [NONE]: select storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_keyword_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : "Static SQL for entity: com.twogather.twogatherwebbackend.domain.Category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Version select: select category_id from category where category_id =?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Snapshot select: select category_.category_id, category_.name as name2_1_ from category category_ where category_.category_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 0: insert into category (name, category_id) values (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 0: update category set name=? where category_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 0: delete from category where category_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Identity insert: insert into category (name) values (?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : ""
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@37a1beb3]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.329+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Category"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy",
  "message" : "Building LoadPlan...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Category)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Category)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Category)\r\n          - SQL table alias mapping - category0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {category1_1_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Category [NONE]: select category0_.category_id as category1_1_0_, category0_.name as name2_1_0_ from category category0_ where category0_.category_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Category)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Category)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Category)\r\n          - SQL table alias mapping - category0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {category1_1_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Category [NONE]: select category0_.category_id as category1_1_0_, category0_.name as name2_1_0_ from category category0_ where category0_.category_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Category)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Category)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Category)\r\n          - SQL table alias mapping - category0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {category1_1_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Category [NONE]: select category0_.category_id as category1_1_0_, category0_.name as name2_1_0_ from category category0_ where category0_.category_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Category)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Category)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Category)\r\n          - SQL table alias mapping - category0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {category1_1_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Category [NONE]: select category0_.category_id as category1_1_0_, category0_.name as name2_1_0_ from category category0_ where category0_.category_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.330+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Category)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Category)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Category)\r\n          - SQL table alias mapping - category0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {category1_1_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Category [NONE]: select category0_.category_id as category1_1_0_, category0_.name as name2_1_0_ from category category0_ where category0_.category_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Category)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Category)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Category)\r\n          - SQL table alias mapping - category0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {category1_1_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Category [NONE]: select category0_.category_id as category1_1_0_, category0_.name as name2_1_0_ from category category0_ where category0_.category_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Category)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Category)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Category)\r\n          - SQL table alias mapping - category0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {category1_1_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Category [NONE]: select category0_.category_id as category1_1_0_, category0_.name as name2_1_0_ from category category0_ where category0_.category_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Category)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Category)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Category)\r\n          - SQL table alias mapping - category0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {category1_1_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Category [NONE]: select category0_.category_id as category1_1_0_, category0_.name as name2_1_0_ from category category0_ where category0_.category_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Category)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Category)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Category)\r\n          - SQL table alias mapping - category0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {category1_1_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.331+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Category [NONE]: select category0_.category_id as category1_1_0_, category0_.name as name2_1_0_ from category category0_ where category0_.category_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Category)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Category)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Category)\r\n          - SQL table alias mapping - category0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {category1_1_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Category [NONE]: select category0_.category_id as category1_1_0_, category0_.name as name2_1_0_ from category category0_ where category0_.category_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : "Static SQL for entity: com.twogather.twogatherwebbackend.domain.Menu",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Version select: select menu_id from menu where menu_id =?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Snapshot select: select menu_.menu_id, menu_.name as name2_8_, menu_.price as price3_8_, menu_.store_id as store_id4_8_ from menu menu_ where menu_.menu_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 0: insert into menu (name, price, store_id, menu_id) values (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 0: update menu set name=?, price=?, store_id=? where menu_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 0: delete from menu where menu_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Identity insert: insert into menu (name, price, store_id) values (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : ""
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1e54e900]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Menu"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Menu"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : price",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Menu"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Menu"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3da61af2]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.332+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy",
  "message" : "Building LoadPlan...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Menu.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - SQL table alias mapping - menu0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {menu_id1_8_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Menu [NONE]: select menu0_.menu_id as menu_id1_8_0_, menu0_.name as name2_8_0_, menu0_.price as price3_8_0_, menu0_.store_id as store_id4_8_0_ from menu menu0_ where menu0_.menu_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Menu.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - SQL table alias mapping - menu0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {menu_id1_8_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Menu [NONE]: select menu0_.menu_id as menu_id1_8_0_, menu0_.name as name2_8_0_, menu0_.price as price3_8_0_, menu0_.store_id as store_id4_8_0_ from menu menu0_ where menu0_.menu_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Menu.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - SQL table alias mapping - menu0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {menu_id1_8_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Menu [NONE]: select menu0_.menu_id as menu_id1_8_0_, menu0_.name as name2_8_0_, menu0_.price as price3_8_0_, menu0_.store_id as store_id4_8_0_ from menu menu0_ where menu0_.menu_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Menu.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - SQL table alias mapping - menu0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {menu_id1_8_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Menu [NONE]: select menu0_.menu_id as menu_id1_8_0_, menu0_.name as name2_8_0_, menu0_.price as price3_8_0_, menu0_.store_id as store_id4_8_0_ from menu menu0_ where menu0_.menu_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Menu.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - SQL table alias mapping - menu0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {menu_id1_8_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Menu [NONE]: select menu0_.menu_id as menu_id1_8_0_, menu0_.name as name2_8_0_, menu0_.price as price3_8_0_, menu0_.store_id as store_id4_8_0_ from menu menu0_ where menu0_.menu_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.333+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Menu.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - SQL table alias mapping - menu0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {menu_id1_8_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Menu [NONE]: select menu0_.menu_id as menu_id1_8_0_, menu0_.name as name2_8_0_, menu0_.price as price3_8_0_, menu0_.store_id as store_id4_8_0_ from menu menu0_ where menu0_.menu_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Menu.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - SQL table alias mapping - menu0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {menu_id1_8_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Menu [NONE]: select menu0_.menu_id as menu_id1_8_0_, menu0_.name as name2_8_0_, menu0_.price as price3_8_0_, menu0_.store_id as store_id4_8_0_ from menu menu0_ where menu0_.menu_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Menu.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - SQL table alias mapping - menu0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {menu_id1_8_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Menu [NONE]: select menu0_.menu_id as menu_id1_8_0_, menu0_.name as name2_8_0_, menu0_.price as price3_8_0_, menu0_.store_id as store_id4_8_0_ from menu menu0_ where menu0_.menu_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Menu.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - SQL table alias mapping - menu0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {menu_id1_8_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Menu [NONE]: select menu0_.menu_id as menu_id1_8_0_, menu0_.name as name2_8_0_, menu0_.price as price3_8_0_, menu0_.store_id as store_id4_8_0_ from menu menu0_ where menu0_.menu_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Menu.store)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Menu)\r\n          - SQL table alias mapping - menu0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {menu_id1_8_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.335+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Menu [NONE]: select menu0_.menu_id as menu_id1_8_0_, menu0_.name as name2_8_0_, menu0_.price as price3_8_0_, menu0_.store_id as store_id4_8_0_ from menu menu0_ where menu0_.menu_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : "Static SQL for entity: com.twogather.twogatherwebbackend.domain.Keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Version select: select keyword_id from keyword where keyword_id =?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Snapshot select: select keyword_.keyword_id, keyword_.name as name2_5_ from keyword keyword_ where keyword_.keyword_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 0: insert into keyword (name, keyword_id) values (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 0: update keyword set name=? where keyword_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 0: delete from keyword where keyword_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Identity insert: insert into keyword (name) values (?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : ""
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7852ab30]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Keyword"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy",
  "message" : "Building LoadPlan...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n          - SQL table alias mapping - keyword0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {keyword_1_5_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Keyword [NONE]: select keyword0_.keyword_id as keyword_1_5_0_, keyword0_.name as name2_5_0_ from keyword keyword0_ where keyword0_.keyword_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n          - SQL table alias mapping - keyword0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {keyword_1_5_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Keyword [NONE]: select keyword0_.keyword_id as keyword_1_5_0_, keyword0_.name as name2_5_0_ from keyword keyword0_ where keyword0_.keyword_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n          - SQL table alias mapping - keyword0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {keyword_1_5_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.337+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Keyword [NONE]: select keyword0_.keyword_id as keyword_1_5_0_, keyword0_.name as name2_5_0_ from keyword keyword0_ where keyword0_.keyword_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n          - SQL table alias mapping - keyword0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {keyword_1_5_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Keyword [NONE]: select keyword0_.keyword_id as keyword_1_5_0_, keyword0_.name as name2_5_0_ from keyword keyword0_ where keyword0_.keyword_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n          - SQL table alias mapping - keyword0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {keyword_1_5_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Keyword [NONE]: select keyword0_.keyword_id as keyword_1_5_0_, keyword0_.name as name2_5_0_ from keyword keyword0_ where keyword0_.keyword_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n          - SQL table alias mapping - keyword0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {keyword_1_5_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Keyword [NONE]: select keyword0_.keyword_id as keyword_1_5_0_, keyword0_.name as name2_5_0_ from keyword keyword0_ where keyword0_.keyword_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n          - SQL table alias mapping - keyword0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {keyword_1_5_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Keyword [NONE]: select keyword0_.keyword_id as keyword_1_5_0_, keyword0_.name as name2_5_0_ from keyword keyword0_ where keyword0_.keyword_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n          - SQL table alias mapping - keyword0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {keyword_1_5_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Keyword [NONE]: select keyword0_.keyword_id as keyword_1_5_0_, keyword0_.name as name2_5_0_ from keyword keyword0_ where keyword0_.keyword_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n          - SQL table alias mapping - keyword0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {keyword_1_5_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Keyword [NONE]: select keyword0_.keyword_id as keyword_1_5_0_, keyword0_.name as name2_5_0_ from keyword keyword0_ where keyword0_.keyword_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Keyword, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Keyword)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Keyword)\r\n          - SQL table alias mapping - keyword0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {keyword_1_5_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Keyword [NONE]: select keyword0_.keyword_id as keyword_1_5_0_, keyword0_.name as name2_5_0_ from keyword keyword0_ where keyword0_.keyword_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : "Static SQL for entity: com.twogather.twogatherwebbackend.domain.Consumer",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Version select: select member_id from member where member_id =?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Snapshot select: select consumer_.member_id, consumer_1_.authentication_type as authenti2_7_, consumer_1_.email as email3_7_, consumer_1_.is_active as is_activ4_7_, consumer_1_.name as name5_7_, consumer_1_.password as password6_7_, consumer_1_.username as username7_7_ from consumer consumer_ inner join member consumer_1_ on consumer_.member_id=consumer_1_.member_id where consumer_.member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 0: insert into member (authentication_type, email, is_active, name, password, username, member_id) values (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 0: update member set authentication_type=?, email=?, is_active=?, name=?, password=?, username=? where member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 0: delete from member where member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 1: insert into consumer (member_id) values (?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 1: null",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 1: delete from consumer where member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Identity insert: insert into member (authentication_type, email, is_active, name, password, username) values (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : ""
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5bf4dfb]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.339+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Consumer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : authenticationType",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Consumer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : email",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Consumer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : isActive",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Consumer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Consumer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : password",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Consumer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : username",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Consumer"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Consumer"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@65259737]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Consumer"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1e27bb89]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy",
  "message" : "Building LoadPlan...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Consumer, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - SQL table alias mapping - consumer0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Consumer [NONE]: select consumer0_.member_id as member_i1_7_0_, consumer0_1_.authentication_type as authenti2_7_0_, consumer0_1_.email as email3_7_0_, consumer0_1_.is_active as is_activ4_7_0_, consumer0_1_.name as name5_7_0_, consumer0_1_.password as password6_7_0_, consumer0_1_.username as username7_7_0_ from consumer consumer0_ inner join member consumer0_1_ on consumer0_.member_id=consumer0_1_.member_id where consumer0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Consumer, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - SQL table alias mapping - consumer0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Consumer [NONE]: select consumer0_.member_id as member_i1_7_0_, consumer0_1_.authentication_type as authenti2_7_0_, consumer0_1_.email as email3_7_0_, consumer0_1_.is_active as is_activ4_7_0_, consumer0_1_.name as name5_7_0_, consumer0_1_.password as password6_7_0_, consumer0_1_.username as username7_7_0_ from consumer consumer0_ inner join member consumer0_1_ on consumer0_.member_id=consumer0_1_.member_id where consumer0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.341+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Consumer, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - SQL table alias mapping - consumer0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.341+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Consumer [NONE]: select consumer0_.member_id as member_i1_7_0_, consumer0_1_.authentication_type as authenti2_7_0_, consumer0_1_.email as email3_7_0_, consumer0_1_.is_active as is_activ4_7_0_, consumer0_1_.name as name5_7_0_, consumer0_1_.password as password6_7_0_, consumer0_1_.username as username7_7_0_ from consumer consumer0_ inner join member consumer0_1_ on consumer0_.member_id=consumer0_1_.member_id where consumer0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.341+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.341+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Consumer, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - SQL table alias mapping - consumer0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.341+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Consumer [NONE]: select consumer0_.member_id as member_i1_7_0_, consumer0_1_.authentication_type as authenti2_7_0_, consumer0_1_.email as email3_7_0_, consumer0_1_.is_active as is_activ4_7_0_, consumer0_1_.name as name5_7_0_, consumer0_1_.password as password6_7_0_, consumer0_1_.username as username7_7_0_ from consumer consumer0_ inner join member consumer0_1_ on consumer0_.member_id=consumer0_1_.member_id where consumer0_.member_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.341+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.341+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Consumer, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - SQL table alias mapping - consumer0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.341+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Consumer [NONE]: select consumer0_.member_id as member_i1_7_0_, consumer0_1_.authentication_type as authenti2_7_0_, consumer0_1_.email as email3_7_0_, consumer0_1_.is_active as is_activ4_7_0_, consumer0_1_.name as name5_7_0_, consumer0_1_.password as password6_7_0_, consumer0_1_.username as username7_7_0_ from consumer consumer0_ inner join member consumer0_1_ on consumer0_.member_id=consumer0_1_.member_id where consumer0_.member_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.341+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.341+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Consumer, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - SQL table alias mapping - consumer0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.341+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Consumer [NONE]: select consumer0_.member_id as member_i1_7_0_, consumer0_1_.authentication_type as authenti2_7_0_, consumer0_1_.email as email3_7_0_, consumer0_1_.is_active as is_activ4_7_0_, consumer0_1_.name as name5_7_0_, consumer0_1_.password as password6_7_0_, consumer0_1_.username as username7_7_0_ from consumer consumer0_ inner join member consumer0_1_ on consumer0_.member_id=consumer0_1_.member_id where consumer0_.member_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.342+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.342+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Consumer, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - SQL table alias mapping - consumer0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.342+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Consumer [NONE]: select consumer0_.member_id as member_i1_7_0_, consumer0_1_.authentication_type as authenti2_7_0_, consumer0_1_.email as email3_7_0_, consumer0_1_.is_active as is_activ4_7_0_, consumer0_1_.name as name5_7_0_, consumer0_1_.password as password6_7_0_, consumer0_1_.username as username7_7_0_ from consumer consumer0_ inner join member consumer0_1_ on consumer0_.member_id=consumer0_1_.member_id where consumer0_.member_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.342+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.342+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Consumer, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - SQL table alias mapping - consumer0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.342+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Consumer [NONE]: select consumer0_.member_id as member_i1_7_0_, consumer0_1_.authentication_type as authenti2_7_0_, consumer0_1_.email as email3_7_0_, consumer0_1_.is_active as is_activ4_7_0_, consumer0_1_.name as name5_7_0_, consumer0_1_.password as password6_7_0_, consumer0_1_.username as username7_7_0_ from consumer consumer0_ inner join member consumer0_1_ on consumer0_.member_id=consumer0_1_.member_id where consumer0_.member_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.342+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.342+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Consumer, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - SQL table alias mapping - consumer0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.342+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Consumer [NONE]: select consumer0_.member_id as member_i1_7_0_, consumer0_1_.authentication_type as authenti2_7_0_, consumer0_1_.email as email3_7_0_, consumer0_1_.is_active as is_activ4_7_0_, consumer0_1_.name as name5_7_0_, consumer0_1_.password as password6_7_0_, consumer0_1_.username as username7_7_0_ from consumer consumer0_ inner join member consumer0_1_ on consumer0_.member_id=consumer0_1_.member_id where consumer0_.member_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.342+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Consumer, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Consumer.reviewList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Consumer.reviewList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Consumer)\r\n          - SQL table alias mapping - consumer0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {member_i1_7_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Consumer [NONE]: select consumer0_.member_id as member_i1_7_0_, consumer0_1_.authentication_type as authenti2_7_0_, consumer0_1_.email as email3_7_0_, consumer0_1_.is_active as is_activ4_7_0_, consumer0_1_.name as name5_7_0_, consumer0_1_.password as password6_7_0_, consumer0_1_.username as username7_7_0_ from consumer consumer0_ inner join member consumer0_1_ on consumer0_.member_id=consumer0_1_.member_id where consumer0_.member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : "Static SQL for entity: com.twogather.twogatherwebbackend.domain.Store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Version select: select store_id from store where store_id =?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Snapshot select: select store_.store_id, store_.address as address2_10_, store_.business_name as business3_10_, store_.business_number as business4_10_, store_.business_start_date as business5_10_, store_.category_id as categor11_10_, store_.name as name6_10_, store_.member_id as member_12_10_, store_.phone as phone7_10_, store_.reason_for_rejection as reason_f8_10_, store_.request_date as request_9_10_, store_.status as status10_10_ from store store_ where store_.store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Insert 0: insert into store (address, business_name, business_number, business_start_date, category_id, name, member_id, phone, reason_for_rejection, request_date, status, store_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Update 0: update store set address=?, business_name=?, business_number=?, business_start_date=?, category_id=?, name=?, member_id=?, phone=?, reason_for_rejection=?, request_date=?, status=? where store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Delete 0: delete from store where store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.persister.entity.AbstractEntityPersister",
  "message" : " Identity insert: insert into store (address, business_name, business_number, business_start_date, category_id, name, member_id, phone, reason_for_rejection, request_date, status) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : ""
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6108fd23]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : address",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : businessHourList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3d3a28b5]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1ee22768]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : businessName",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : businessNumber",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : businessStartDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@38a52072]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : likesList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.343+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@306bf4c3]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5cf80dfb]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : menuList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@532ea86b]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4219a4cc]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : name",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : owner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:8> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2dbb8da0]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : phone",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : reasonForRejection",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : requestDate",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : reviewList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:9> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3130ca39]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:10> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@17fb5184]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : status",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : storeImageList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:11> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@184bb873]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:12> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@696ce057]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.persister.walking.spi.MetamodelGraphWalker",
  "message" : "Visiting attribute path : storeKeywordList",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:13> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5eba9e41]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "mdc" : {
    "hibernateLoadPlanWalkPath" : "com.twogather.twogatherwebbackend.domain.Store"
  },
  "logger" : "org.hibernate.loader.plan.build.internal.spaces.QuerySpacesImpl",
  "message" : "Adding QuerySpace : uid = <gen:14> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@13809363]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy",
  "message" : "Building LoadPlan...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.345+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Store)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Store)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Store.category)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Store.likesList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Store.likesList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Store.menuList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Store.menuList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Store.owner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n          - SQL table alias mapping - store0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_id1_10_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.345+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Store [NONE]: select store0_.store_id as store_id1_10_0_, store0_.address as address2_10_0_, store0_.business_name as business3_10_0_, store0_.business_number as business4_10_0_, store0_.business_start_date as business5_10_0_, store0_.category_id as categor11_10_0_, store0_.name as name6_10_0_, store0_.member_id as member_12_10_0_, store0_.phone as phone7_10_0_, store0_.reason_for_rejection as reason_f8_10_0_, store0_.request_date as request_9_10_0_, store0_.status as status10_10_0_ from store store0_ where store0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.345+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.346+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Store)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Store)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Store.category)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Store.likesList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Store.likesList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Store.menuList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Store.menuList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Store.owner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n          - SQL table alias mapping - store0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_id1_10_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.346+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Store [NONE]: select store0_.store_id as store_id1_10_0_, store0_.address as address2_10_0_, store0_.business_name as business3_10_0_, store0_.business_number as business4_10_0_, store0_.business_start_date as business5_10_0_, store0_.category_id as categor11_10_0_, store0_.name as name6_10_0_, store0_.member_id as member_12_10_0_, store0_.phone as phone7_10_0_, store0_.reason_for_rejection as reason_f8_10_0_, store0_.request_date as request_9_10_0_, store0_.status as status10_10_0_ from store store0_ where store0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.346+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.346+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Store)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Store)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Store.category)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Store.likesList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Store.likesList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Store.menuList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Store.menuList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Store.owner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n          - SQL table alias mapping - store0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_id1_10_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.346+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Store [NONE]: select store0_.store_id as store_id1_10_0_, store0_.address as address2_10_0_, store0_.business_name as business3_10_0_, store0_.business_number as business4_10_0_, store0_.business_start_date as business5_10_0_, store0_.category_id as categor11_10_0_, store0_.name as name6_10_0_, store0_.member_id as member_12_10_0_, store0_.phone as phone7_10_0_, store0_.reason_for_rejection as reason_f8_10_0_, store0_.request_date as request_9_10_0_, store0_.status as status10_10_0_ from store store0_ where store0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.346+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.347+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Store)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Store)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Store.category)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Store.likesList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Store.likesList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Store.menuList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Store.menuList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Store.owner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n          - SQL table alias mapping - store0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_id1_10_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.347+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Store [NONE]: select store0_.store_id as store_id1_10_0_, store0_.address as address2_10_0_, store0_.business_name as business3_10_0_, store0_.business_number as business4_10_0_, store0_.business_start_date as business5_10_0_, store0_.category_id as categor11_10_0_, store0_.name as name6_10_0_, store0_.member_id as member_12_10_0_, store0_.phone as phone7_10_0_, store0_.reason_for_rejection as reason_f8_10_0_, store0_.request_date as request_9_10_0_, store0_.status as status10_10_0_ from store store0_ where store0_.store_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.347+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.348+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Store)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Store)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Store.category)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Store.likesList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Store.likesList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Store.menuList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Store.menuList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Store.owner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n          - SQL table alias mapping - store0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_id1_10_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.348+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Store [NONE]: select store0_.store_id as store_id1_10_0_, store0_.address as address2_10_0_, store0_.business_name as business3_10_0_, store0_.business_number as business4_10_0_, store0_.business_start_date as business5_10_0_, store0_.category_id as categor11_10_0_, store0_.name as name6_10_0_, store0_.member_id as member_12_10_0_, store0_.phone as phone7_10_0_, store0_.reason_for_rejection as reason_f8_10_0_, store0_.request_date as request_9_10_0_, store0_.status as status10_10_0_ from store store0_ where store0_.store_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.348+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.349+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Store)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Store)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Store.category)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Store.likesList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Store.likesList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Store.menuList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Store.menuList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Store.owner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n          - SQL table alias mapping - store0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_id1_10_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.349+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Store [NONE]: select store0_.store_id as store_id1_10_0_, store0_.address as address2_10_0_, store0_.business_name as business3_10_0_, store0_.business_number as business4_10_0_, store0_.business_start_date as business5_10_0_, store0_.category_id as categor11_10_0_, store0_.name as name6_10_0_, store0_.member_id as member_12_10_0_, store0_.phone as phone7_10_0_, store0_.reason_for_rejection as reason_f8_10_0_, store0_.request_date as request_9_10_0_, store0_.status as status10_10_0_ from store store0_ where store0_.store_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.349+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.350+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Store)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Store)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Store.category)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Store.likesList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Store.likesList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Store.menuList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Store.menuList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Store.owner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n          - SQL table alias mapping - store0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_id1_10_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.350+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Store [NONE]: select store0_.store_id as store_id1_10_0_, store0_.address as address2_10_0_, store0_.business_name as business3_10_0_, store0_.business_number as business4_10_0_, store0_.business_start_date as business5_10_0_, store0_.category_id as categor11_10_0_, store0_.name as name6_10_0_, store0_.member_id as member_12_10_0_, store0_.phone as phone7_10_0_, store0_.reason_for_rejection as reason_f8_10_0_, store0_.request_date as request_9_10_0_, store0_.status as status10_10_0_ from store store0_ where store0_.store_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.350+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.350+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Store)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Store)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Store.category)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Store.likesList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Store.likesList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Store.menuList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Store.menuList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Store.owner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n          - SQL table alias mapping - store0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_id1_10_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.350+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Store [NONE]: select store0_.store_id as store_id1_10_0_, store0_.address as address2_10_0_, store0_.business_name as business3_10_0_, store0_.business_number as business4_10_0_, store0_.business_start_date as business5_10_0_, store0_.category_id as categor11_10_0_, store0_.name as name6_10_0_, store0_.member_id as member_12_10_0_, store0_.phone as phone7_10_0_, store0_.reason_for_rejection as reason_f8_10_0_, store0_.request_date as request_9_10_0_, store0_.status as status10_10_0_ from store store0_ where store0_.store_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.350+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.352+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Store)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Store)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Store.category)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Store.likesList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Store.likesList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Store.menuList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Store.menuList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Store.owner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n          - SQL table alias mapping - store0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_id1_10_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.352+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Store [NONE]: select store0_.store_id as store_id1_10_0_, store0_.address as address2_10_0_, store0_.business_name as business3_10_0_, store0_.business_number as business4_10_0_, store0_.business_start_date as business5_10_0_, store0_.category_id as categor11_10_0_, store0_.name as name6_10_0_, store0_.member_id as member_12_10_0_, store0_.phone as phone7_10_0_, store0_.reason_for_rejection as reason_f8_10_0_, store0_.request_date as request_9_10_0_, store0_.status as status10_10_0_ from store store0_ where store0_.store_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.352+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.exec.internal.LoadQueryJoinAndFetchProcessor",
  "message" : "processing queryspace <gen:0>",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.353+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter",
  "message" : "LoadPlan(entity=com.twogather.twogatherwebbackend.domain.Store)\r\n    - Returns\r\n       - EntityReturnImpl(entity=com.twogather.twogatherwebbackend.domain.Store, querySpaceUid=<gen:0>, path=com.twogather.twogatherwebbackend.domain.Store)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.businessHourList, querySpaceUid=<gen:1>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.BusinessHour, querySpaceUid=<gen:2>, path=com.twogather.twogatherwebbackend.domain.Store.businessHourList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.Category, querySpaceUid=<gen:3>, path=com.twogather.twogatherwebbackend.domain.Store.category)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.likesList, querySpaceUid=<gen:4>, path=com.twogather.twogatherwebbackend.domain.Store.likesList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Likes, querySpaceUid=<gen:5>, path=com.twogather.twogatherwebbackend.domain.Store.likesList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.menuList, querySpaceUid=<gen:6>, path=com.twogather.twogatherwebbackend.domain.Store.menuList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Menu, querySpaceUid=<gen:7>, path=com.twogather.twogatherwebbackend.domain.Store.menuList.<elements>)\r\n          - EntityAttributeFetchImpl(entity=com.twogather.twogatherwebbackend.domain.StoreOwner, querySpaceUid=<gen:8>, path=com.twogather.twogatherwebbackend.domain.Store.owner)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.reviewList, querySpaceUid=<gen:9>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Review, querySpaceUid=<gen:10>, path=com.twogather.twogatherwebbackend.domain.Store.reviewList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeImageList, querySpaceUid=<gen:11>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.Image, querySpaceUid=<gen:12>, path=com.twogather.twogatherwebbackend.domain.Store.storeImageList.<elements>)\r\n          - CollectionAttributeFetchImpl(collection=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList, querySpaceUid=<gen:13>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList)\r\n             - (collection element) CollectionFetchableElementEntityGraph(entity=com.twogather.twogatherwebbackend.domain.StoreKeyword, querySpaceUid=<gen:14>, path=com.twogather.twogatherwebbackend.domain.Store.storeKeywordList.<elements>)\r\n    - QuerySpaces\r\n       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.twogather.twogatherwebbackend.domain.Store)\r\n          - SQL table alias mapping - store0_\r\n          - alias suffix - 0_\r\n          - suffixed key columns - {store_id1_10_0_}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.353+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.entity.plan.EntityLoader",
  "message" : "Static select for entity com.twogather.twogatherwebbackend.domain.Store [NONE]: select store0_.store_id as store_id1_10_0_, store0_.address as address2_10_0_, store0_.business_name as business3_10_0_, store0_.business_number as business4_10_0_, store0_.business_start_date as business5_10_0_, store0_.category_id as categor11_10_0_, store0_.name as name6_10_0_, store0_.member_id as member_12_10_0_, store0_.phone as phone7_10_0_, store0_.reason_for_rejection as reason_f8_10_0_, store0_.request_date as request_9_10_0_, store0_.status as status10_10_0_ from store store0_ where store0_.store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.359+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.StoreOwner.storeList: select storelist0_.member_id as member_12_10_1_, storelist0_.store_id as store_id1_10_1_, storelist0_.store_id as store_id1_10_0_, storelist0_.address as address2_10_0_, storelist0_.business_name as business3_10_0_, storelist0_.business_number as business4_10_0_, storelist0_.business_start_date as business5_10_0_, storelist0_.category_id as categor11_10_0_, storelist0_.name as name6_10_0_, storelist0_.member_id as member_12_10_0_, storelist0_.phone as phone7_10_0_, storelist0_.reason_for_rejection as reason_f8_10_0_, storelist0_.request_date as request_9_10_0_, storelist0_.status as status10_10_0_ from store storelist0_ where storelist0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.359+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.StoreOwner.storeList: select storelist0_.member_id as member_12_10_1_, storelist0_.store_id as store_id1_10_1_, storelist0_.store_id as store_id1_10_0_, storelist0_.address as address2_10_0_, storelist0_.business_name as business3_10_0_, storelist0_.business_number as business4_10_0_, storelist0_.business_start_date as business5_10_0_, storelist0_.category_id as categor11_10_0_, storelist0_.name as name6_10_0_, storelist0_.member_id as member_12_10_0_, storelist0_.phone as phone7_10_0_, storelist0_.reason_for_rejection as reason_f8_10_0_, storelist0_.request_date as request_9_10_0_, storelist0_.status as status10_10_0_ from store storelist0_ where storelist0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.360+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.StoreOwner.storeList: select storelist0_.member_id as member_12_10_1_, storelist0_.store_id as store_id1_10_1_, storelist0_.store_id as store_id1_10_0_, storelist0_.address as address2_10_0_, storelist0_.business_name as business3_10_0_, storelist0_.business_number as business4_10_0_, storelist0_.business_start_date as business5_10_0_, storelist0_.category_id as categor11_10_0_, storelist0_.name as name6_10_0_, storelist0_.member_id as member_12_10_0_, storelist0_.phone as phone7_10_0_, storelist0_.reason_for_rejection as reason_f8_10_0_, storelist0_.request_date as request_9_10_0_, storelist0_.status as status10_10_0_ from store storelist0_ where storelist0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.360+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.StoreOwner.storeList: select storelist0_.member_id as member_12_10_1_, storelist0_.store_id as store_id1_10_1_, storelist0_.store_id as store_id1_10_0_, storelist0_.address as address2_10_0_, storelist0_.business_name as business3_10_0_, storelist0_.business_number as business4_10_0_, storelist0_.business_start_date as business5_10_0_, storelist0_.category_id as categor11_10_0_, storelist0_.name as name6_10_0_, storelist0_.member_id as member_12_10_0_, storelist0_.phone as phone7_10_0_, storelist0_.reason_for_rejection as reason_f8_10_0_, storelist0_.request_date as request_9_10_0_, storelist0_.status as status10_10_0_ from store storelist0_ where storelist0_.member_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.360+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.StoreOwner.storeList: select storelist0_.member_id as member_12_10_1_, storelist0_.store_id as store_id1_10_1_, storelist0_.store_id as store_id1_10_0_, storelist0_.address as address2_10_0_, storelist0_.business_name as business3_10_0_, storelist0_.business_number as business4_10_0_, storelist0_.business_start_date as business5_10_0_, storelist0_.category_id as categor11_10_0_, storelist0_.name as name6_10_0_, storelist0_.member_id as member_12_10_0_, storelist0_.phone as phone7_10_0_, storelist0_.reason_for_rejection as reason_f8_10_0_, storelist0_.request_date as request_9_10_0_, storelist0_.status as status10_10_0_ from store storelist0_ where storelist0_.member_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.360+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.StoreOwner.storeList: select storelist0_.member_id as member_12_10_1_, storelist0_.store_id as store_id1_10_1_, storelist0_.store_id as store_id1_10_0_, storelist0_.address as address2_10_0_, storelist0_.business_name as business3_10_0_, storelist0_.business_number as business4_10_0_, storelist0_.business_start_date as business5_10_0_, storelist0_.category_id as categor11_10_0_, storelist0_.name as name6_10_0_, storelist0_.member_id as member_12_10_0_, storelist0_.phone as phone7_10_0_, storelist0_.reason_for_rejection as reason_f8_10_0_, storelist0_.request_date as request_9_10_0_, storelist0_.status as status10_10_0_ from store storelist0_ where storelist0_.member_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.360+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.StoreOwner.storeList: select storelist0_.member_id as member_12_10_1_, storelist0_.store_id as store_id1_10_1_, storelist0_.store_id as store_id1_10_0_, storelist0_.address as address2_10_0_, storelist0_.business_name as business3_10_0_, storelist0_.business_number as business4_10_0_, storelist0_.business_start_date as business5_10_0_, storelist0_.category_id as categor11_10_0_, storelist0_.name as name6_10_0_, storelist0_.member_id as member_12_10_0_, storelist0_.phone as phone7_10_0_, storelist0_.reason_for_rejection as reason_f8_10_0_, storelist0_.request_date as request_9_10_0_, storelist0_.status as status10_10_0_ from store storelist0_ where storelist0_.member_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.360+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.StoreOwner.storeList: select storelist0_.member_id as member_12_10_1_, storelist0_.store_id as store_id1_10_1_, storelist0_.store_id as store_id1_10_0_, storelist0_.address as address2_10_0_, storelist0_.business_name as business3_10_0_, storelist0_.business_number as business4_10_0_, storelist0_.business_start_date as business5_10_0_, storelist0_.category_id as categor11_10_0_, storelist0_.name as name6_10_0_, storelist0_.member_id as member_12_10_0_, storelist0_.phone as phone7_10_0_, storelist0_.reason_for_rejection as reason_f8_10_0_, storelist0_.request_date as request_9_10_0_, storelist0_.status as status10_10_0_ from store storelist0_ where storelist0_.member_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.360+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.StoreOwner.storeList: select storelist0_.member_id as member_12_10_1_, storelist0_.store_id as store_id1_10_1_, storelist0_.store_id as store_id1_10_0_, storelist0_.address as address2_10_0_, storelist0_.business_name as business3_10_0_, storelist0_.business_number as business4_10_0_, storelist0_.business_start_date as business5_10_0_, storelist0_.category_id as categor11_10_0_, storelist0_.name as name6_10_0_, storelist0_.member_id as member_12_10_0_, storelist0_.phone as phone7_10_0_, storelist0_.reason_for_rejection as reason_f8_10_0_, storelist0_.request_date as request_9_10_0_, storelist0_.status as status10_10_0_ from store storelist0_ where storelist0_.member_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.360+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.StoreOwner.storeList: select storelist0_.member_id as member_12_10_1_, storelist0_.store_id as store_id1_10_1_, storelist0_.store_id as store_id1_10_0_, storelist0_.address as address2_10_0_, storelist0_.business_name as business3_10_0_, storelist0_.business_number as business4_10_0_, storelist0_.business_start_date as business5_10_0_, storelist0_.category_id as categor11_10_0_, storelist0_.name as name6_10_0_, storelist0_.member_id as member_12_10_0_, storelist0_.phone as phone7_10_0_, storelist0_.reason_for_rejection as reason_f8_10_0_, storelist0_.request_date as request_9_10_0_, storelist0_.status as status10_10_0_ from store storelist0_ where storelist0_.member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.361+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeImageList: select storeimage0_.store_id as store_id3_4_1_, storeimage0_.image_id as image_id1_4_1_, storeimage0_.image_id as image_id1_4_0_, storeimage0_.store_id as store_id3_4_0_, storeimage0_.url as url2_4_0_ from image storeimage0_ where storeimage0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.361+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeImageList: select storeimage0_.store_id as store_id3_4_1_, storeimage0_.image_id as image_id1_4_1_, storeimage0_.image_id as image_id1_4_0_, storeimage0_.store_id as store_id3_4_0_, storeimage0_.url as url2_4_0_ from image storeimage0_ where storeimage0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.361+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeImageList: select storeimage0_.store_id as store_id3_4_1_, storeimage0_.image_id as image_id1_4_1_, storeimage0_.image_id as image_id1_4_0_, storeimage0_.store_id as store_id3_4_0_, storeimage0_.url as url2_4_0_ from image storeimage0_ where storeimage0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.361+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeImageList: select storeimage0_.store_id as store_id3_4_1_, storeimage0_.image_id as image_id1_4_1_, storeimage0_.image_id as image_id1_4_0_, storeimage0_.store_id as store_id3_4_0_, storeimage0_.url as url2_4_0_ from image storeimage0_ where storeimage0_.store_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.361+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeImageList: select storeimage0_.store_id as store_id3_4_1_, storeimage0_.image_id as image_id1_4_1_, storeimage0_.image_id as image_id1_4_0_, storeimage0_.store_id as store_id3_4_0_, storeimage0_.url as url2_4_0_ from image storeimage0_ where storeimage0_.store_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.362+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeImageList: select storeimage0_.store_id as store_id3_4_1_, storeimage0_.image_id as image_id1_4_1_, storeimage0_.image_id as image_id1_4_0_, storeimage0_.store_id as store_id3_4_0_, storeimage0_.url as url2_4_0_ from image storeimage0_ where storeimage0_.store_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.362+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeImageList: select storeimage0_.store_id as store_id3_4_1_, storeimage0_.image_id as image_id1_4_1_, storeimage0_.image_id as image_id1_4_0_, storeimage0_.store_id as store_id3_4_0_, storeimage0_.url as url2_4_0_ from image storeimage0_ where storeimage0_.store_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.362+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeImageList: select storeimage0_.store_id as store_id3_4_1_, storeimage0_.image_id as image_id1_4_1_, storeimage0_.image_id as image_id1_4_0_, storeimage0_.store_id as store_id3_4_0_, storeimage0_.url as url2_4_0_ from image storeimage0_ where storeimage0_.store_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.362+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeImageList: select storeimage0_.store_id as store_id3_4_1_, storeimage0_.image_id as image_id1_4_1_, storeimage0_.image_id as image_id1_4_0_, storeimage0_.store_id as store_id3_4_0_, storeimage0_.url as url2_4_0_ from image storeimage0_ where storeimage0_.store_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.362+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeImageList: select storeimage0_.store_id as store_id3_4_1_, storeimage0_.image_id as image_id1_4_1_, storeimage0_.image_id as image_id1_4_0_, storeimage0_.store_id as store_id3_4_0_, storeimage0_.url as url2_4_0_ from image storeimage0_ where storeimage0_.store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.362+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.reviewList: select reviewlist0_.store_id as store_id6_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from review reviewlist0_ left outer join member member1_ on reviewlist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where reviewlist0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.363+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.reviewList: select reviewlist0_.store_id as store_id6_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from review reviewlist0_ left outer join member member1_ on reviewlist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where reviewlist0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.363+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.reviewList: select reviewlist0_.store_id as store_id6_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from review reviewlist0_ left outer join member member1_ on reviewlist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where reviewlist0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.363+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.reviewList: select reviewlist0_.store_id as store_id6_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from review reviewlist0_ left outer join member member1_ on reviewlist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where reviewlist0_.store_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.363+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.reviewList: select reviewlist0_.store_id as store_id6_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from review reviewlist0_ left outer join member member1_ on reviewlist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where reviewlist0_.store_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.363+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.reviewList: select reviewlist0_.store_id as store_id6_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from review reviewlist0_ left outer join member member1_ on reviewlist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where reviewlist0_.store_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.363+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.reviewList: select reviewlist0_.store_id as store_id6_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from review reviewlist0_ left outer join member member1_ on reviewlist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where reviewlist0_.store_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.363+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.reviewList: select reviewlist0_.store_id as store_id6_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from review reviewlist0_ left outer join member member1_ on reviewlist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where reviewlist0_.store_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.364+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.reviewList: select reviewlist0_.store_id as store_id6_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from review reviewlist0_ left outer join member member1_ on reviewlist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where reviewlist0_.store_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.364+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.reviewList: select reviewlist0_.store_id as store_id6_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from review reviewlist0_ left outer join member member1_ on reviewlist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where reviewlist0_.store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.364+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Consumer.reviewList: select reviewlist0_.member_id as member_i5_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, store1_.store_id as store_id1_10_0_, store1_.address as address2_10_0_, store1_.business_name as business3_10_0_, store1_.business_number as business4_10_0_, store1_.business_start_date as business5_10_0_, store1_.category_id as categor11_10_0_, store1_.name as name6_10_0_, store1_.member_id as member_12_10_0_, store1_.phone as phone7_10_0_, store1_.reason_for_rejection as reason_f8_10_0_, store1_.request_date as request_9_10_0_, store1_.status as status10_10_0_ from review reviewlist0_ left outer join store store1_ on reviewlist0_.store_id=store1_.store_id where reviewlist0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.365+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Consumer.reviewList: select reviewlist0_.member_id as member_i5_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, store1_.store_id as store_id1_10_0_, store1_.address as address2_10_0_, store1_.business_name as business3_10_0_, store1_.business_number as business4_10_0_, store1_.business_start_date as business5_10_0_, store1_.category_id as categor11_10_0_, store1_.name as name6_10_0_, store1_.member_id as member_12_10_0_, store1_.phone as phone7_10_0_, store1_.reason_for_rejection as reason_f8_10_0_, store1_.request_date as request_9_10_0_, store1_.status as status10_10_0_ from review reviewlist0_ left outer join store store1_ on reviewlist0_.store_id=store1_.store_id where reviewlist0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.365+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Consumer.reviewList: select reviewlist0_.member_id as member_i5_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, store1_.store_id as store_id1_10_0_, store1_.address as address2_10_0_, store1_.business_name as business3_10_0_, store1_.business_number as business4_10_0_, store1_.business_start_date as business5_10_0_, store1_.category_id as categor11_10_0_, store1_.name as name6_10_0_, store1_.member_id as member_12_10_0_, store1_.phone as phone7_10_0_, store1_.reason_for_rejection as reason_f8_10_0_, store1_.request_date as request_9_10_0_, store1_.status as status10_10_0_ from review reviewlist0_ left outer join store store1_ on reviewlist0_.store_id=store1_.store_id where reviewlist0_.member_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.365+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Consumer.reviewList: select reviewlist0_.member_id as member_i5_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, store1_.store_id as store_id1_10_0_, store1_.address as address2_10_0_, store1_.business_name as business3_10_0_, store1_.business_number as business4_10_0_, store1_.business_start_date as business5_10_0_, store1_.category_id as categor11_10_0_, store1_.name as name6_10_0_, store1_.member_id as member_12_10_0_, store1_.phone as phone7_10_0_, store1_.reason_for_rejection as reason_f8_10_0_, store1_.request_date as request_9_10_0_, store1_.status as status10_10_0_ from review reviewlist0_ left outer join store store1_ on reviewlist0_.store_id=store1_.store_id where reviewlist0_.member_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.365+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Consumer.reviewList: select reviewlist0_.member_id as member_i5_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, store1_.store_id as store_id1_10_0_, store1_.address as address2_10_0_, store1_.business_name as business3_10_0_, store1_.business_number as business4_10_0_, store1_.business_start_date as business5_10_0_, store1_.category_id as categor11_10_0_, store1_.name as name6_10_0_, store1_.member_id as member_12_10_0_, store1_.phone as phone7_10_0_, store1_.reason_for_rejection as reason_f8_10_0_, store1_.request_date as request_9_10_0_, store1_.status as status10_10_0_ from review reviewlist0_ left outer join store store1_ on reviewlist0_.store_id=store1_.store_id where reviewlist0_.member_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.365+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Consumer.reviewList: select reviewlist0_.member_id as member_i5_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, store1_.store_id as store_id1_10_0_, store1_.address as address2_10_0_, store1_.business_name as business3_10_0_, store1_.business_number as business4_10_0_, store1_.business_start_date as business5_10_0_, store1_.category_id as categor11_10_0_, store1_.name as name6_10_0_, store1_.member_id as member_12_10_0_, store1_.phone as phone7_10_0_, store1_.reason_for_rejection as reason_f8_10_0_, store1_.request_date as request_9_10_0_, store1_.status as status10_10_0_ from review reviewlist0_ left outer join store store1_ on reviewlist0_.store_id=store1_.store_id where reviewlist0_.member_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.366+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Consumer.reviewList: select reviewlist0_.member_id as member_i5_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, store1_.store_id as store_id1_10_0_, store1_.address as address2_10_0_, store1_.business_name as business3_10_0_, store1_.business_number as business4_10_0_, store1_.business_start_date as business5_10_0_, store1_.category_id as categor11_10_0_, store1_.name as name6_10_0_, store1_.member_id as member_12_10_0_, store1_.phone as phone7_10_0_, store1_.reason_for_rejection as reason_f8_10_0_, store1_.request_date as request_9_10_0_, store1_.status as status10_10_0_ from review reviewlist0_ left outer join store store1_ on reviewlist0_.store_id=store1_.store_id where reviewlist0_.member_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.366+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Consumer.reviewList: select reviewlist0_.member_id as member_i5_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, store1_.store_id as store_id1_10_0_, store1_.address as address2_10_0_, store1_.business_name as business3_10_0_, store1_.business_number as business4_10_0_, store1_.business_start_date as business5_10_0_, store1_.category_id as categor11_10_0_, store1_.name as name6_10_0_, store1_.member_id as member_12_10_0_, store1_.phone as phone7_10_0_, store1_.reason_for_rejection as reason_f8_10_0_, store1_.request_date as request_9_10_0_, store1_.status as status10_10_0_ from review reviewlist0_ left outer join store store1_ on reviewlist0_.store_id=store1_.store_id where reviewlist0_.member_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.366+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Consumer.reviewList: select reviewlist0_.member_id as member_i5_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, store1_.store_id as store_id1_10_0_, store1_.address as address2_10_0_, store1_.business_name as business3_10_0_, store1_.business_number as business4_10_0_, store1_.business_start_date as business5_10_0_, store1_.category_id as categor11_10_0_, store1_.name as name6_10_0_, store1_.member_id as member_12_10_0_, store1_.phone as phone7_10_0_, store1_.reason_for_rejection as reason_f8_10_0_, store1_.request_date as request_9_10_0_, store1_.status as status10_10_0_ from review reviewlist0_ left outer join store store1_ on reviewlist0_.store_id=store1_.store_id where reviewlist0_.member_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.366+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Consumer.reviewList: select reviewlist0_.member_id as member_i5_9_2_, reviewlist0_.review_id as review_i1_9_2_, reviewlist0_.review_id as review_i1_9_1_, reviewlist0_.content as content2_9_1_, reviewlist0_.created_date as created_3_9_1_, reviewlist0_.member_id as member_i5_9_1_, reviewlist0_.score as score4_9_1_, reviewlist0_.store_id as store_id6_9_1_, store1_.store_id as store_id1_10_0_, store1_.address as address2_10_0_, store1_.business_name as business3_10_0_, store1_.business_number as business4_10_0_, store1_.business_start_date as business5_10_0_, store1_.category_id as categor11_10_0_, store1_.name as name6_10_0_, store1_.member_id as member_12_10_0_, store1_.phone as phone7_10_0_, store1_.reason_for_rejection as reason_f8_10_0_, store1_.request_date as request_9_10_0_, store1_.status as status10_10_0_ from review reviewlist0_ left outer join store store1_ on reviewlist0_.store_id=store1_.store_id where reviewlist0_.member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.366+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Review.commentList: select commentlis0_.review_id as review_i5_2_2_, commentlis0_.comment_id as comment_1_2_2_, commentlis0_.comment_id as comment_1_2_1_, commentlis0_.member_id as member_i4_2_1_, commentlis0_.content as content2_2_1_, commentlis0_.created_date as created_3_2_1_, commentlis0_.review_id as review_i5_2_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from comment commentlis0_ left outer join member member1_ on commentlis0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where commentlis0_.review_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.366+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Review.commentList: select commentlis0_.review_id as review_i5_2_2_, commentlis0_.comment_id as comment_1_2_2_, commentlis0_.comment_id as comment_1_2_1_, commentlis0_.member_id as member_i4_2_1_, commentlis0_.content as content2_2_1_, commentlis0_.created_date as created_3_2_1_, commentlis0_.review_id as review_i5_2_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from comment commentlis0_ left outer join member member1_ on commentlis0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where commentlis0_.review_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.367+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Review.commentList: select commentlis0_.review_id as review_i5_2_2_, commentlis0_.comment_id as comment_1_2_2_, commentlis0_.comment_id as comment_1_2_1_, commentlis0_.member_id as member_i4_2_1_, commentlis0_.content as content2_2_1_, commentlis0_.created_date as created_3_2_1_, commentlis0_.review_id as review_i5_2_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from comment commentlis0_ left outer join member member1_ on commentlis0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where commentlis0_.review_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.367+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Review.commentList: select commentlis0_.review_id as review_i5_2_2_, commentlis0_.comment_id as comment_1_2_2_, commentlis0_.comment_id as comment_1_2_1_, commentlis0_.member_id as member_i4_2_1_, commentlis0_.content as content2_2_1_, commentlis0_.created_date as created_3_2_1_, commentlis0_.review_id as review_i5_2_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from comment commentlis0_ left outer join member member1_ on commentlis0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where commentlis0_.review_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.367+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Review.commentList: select commentlis0_.review_id as review_i5_2_2_, commentlis0_.comment_id as comment_1_2_2_, commentlis0_.comment_id as comment_1_2_1_, commentlis0_.member_id as member_i4_2_1_, commentlis0_.content as content2_2_1_, commentlis0_.created_date as created_3_2_1_, commentlis0_.review_id as review_i5_2_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from comment commentlis0_ left outer join member member1_ on commentlis0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where commentlis0_.review_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.367+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Review.commentList: select commentlis0_.review_id as review_i5_2_2_, commentlis0_.comment_id as comment_1_2_2_, commentlis0_.comment_id as comment_1_2_1_, commentlis0_.member_id as member_i4_2_1_, commentlis0_.content as content2_2_1_, commentlis0_.created_date as created_3_2_1_, commentlis0_.review_id as review_i5_2_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from comment commentlis0_ left outer join member member1_ on commentlis0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where commentlis0_.review_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.368+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Review.commentList: select commentlis0_.review_id as review_i5_2_2_, commentlis0_.comment_id as comment_1_2_2_, commentlis0_.comment_id as comment_1_2_1_, commentlis0_.member_id as member_i4_2_1_, commentlis0_.content as content2_2_1_, commentlis0_.created_date as created_3_2_1_, commentlis0_.review_id as review_i5_2_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from comment commentlis0_ left outer join member member1_ on commentlis0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where commentlis0_.review_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.368+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Review.commentList: select commentlis0_.review_id as review_i5_2_2_, commentlis0_.comment_id as comment_1_2_2_, commentlis0_.comment_id as comment_1_2_1_, commentlis0_.member_id as member_i4_2_1_, commentlis0_.content as content2_2_1_, commentlis0_.created_date as created_3_2_1_, commentlis0_.review_id as review_i5_2_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from comment commentlis0_ left outer join member member1_ on commentlis0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where commentlis0_.review_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.368+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Review.commentList: select commentlis0_.review_id as review_i5_2_2_, commentlis0_.comment_id as comment_1_2_2_, commentlis0_.comment_id as comment_1_2_1_, commentlis0_.member_id as member_i4_2_1_, commentlis0_.content as content2_2_1_, commentlis0_.created_date as created_3_2_1_, commentlis0_.review_id as review_i5_2_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from comment commentlis0_ left outer join member member1_ on commentlis0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where commentlis0_.review_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.368+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Review.commentList: select commentlis0_.review_id as review_i5_2_2_, commentlis0_.comment_id as comment_1_2_2_, commentlis0_.comment_id as comment_1_2_1_, commentlis0_.member_id as member_i4_2_1_, commentlis0_.content as content2_2_1_, commentlis0_.created_date as created_3_2_1_, commentlis0_.review_id as review_i5_2_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from comment commentlis0_ left outer join member member1_ on commentlis0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where commentlis0_.review_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.369+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.businessHourList: select businessho0_.store_id as store_id9_0_1_, businessho0_.business_hour_id as business1_0_1_, businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.369+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.businessHourList: select businessho0_.store_id as store_id9_0_1_, businessho0_.business_hour_id as business1_0_1_, businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.369+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.businessHourList: select businessho0_.store_id as store_id9_0_1_, businessho0_.business_hour_id as business1_0_1_, businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.369+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.businessHourList: select businessho0_.store_id as store_id9_0_1_, businessho0_.business_hour_id as business1_0_1_, businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.store_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.369+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.businessHourList: select businessho0_.store_id as store_id9_0_1_, businessho0_.business_hour_id as business1_0_1_, businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.store_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.369+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.businessHourList: select businessho0_.store_id as store_id9_0_1_, businessho0_.business_hour_id as business1_0_1_, businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.store_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.370+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.businessHourList: select businessho0_.store_id as store_id9_0_1_, businessho0_.business_hour_id as business1_0_1_, businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.store_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.370+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.businessHourList: select businessho0_.store_id as store_id9_0_1_, businessho0_.business_hour_id as business1_0_1_, businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.store_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.370+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.businessHourList: select businessho0_.store_id as store_id9_0_1_, businessho0_.business_hour_id as business1_0_1_, businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.store_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.370+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.businessHourList: select businessho0_.store_id as store_id9_0_1_, businessho0_.business_hour_id as business1_0_1_, businessho0_.business_hour_id as business1_0_0_, businessho0_.break_end_time as break_en2_0_0_, businessho0_.break_start_time as break_st3_0_0_, businessho0_.day_of_week as day_of_w4_0_0_, businessho0_.end_time as end_time5_0_0_, businessho0_.has_break_time as has_brea6_0_0_, businessho0_.is_open as is_open7_0_0_, businessho0_.start_time as start_ti8_0_0_, businessho0_.store_id as store_id9_0_0_ from business_hour businessho0_ where businessho0_.store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.370+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeKeywordList: select storekeywo0_.store_id as store_id3_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.370+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeKeywordList: select storekeywo0_.store_id as store_id3_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.370+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeKeywordList: select storekeywo0_.store_id as store_id3_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.370+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeKeywordList: select storekeywo0_.store_id as store_id3_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.370+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeKeywordList: select storekeywo0_.store_id as store_id3_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.370+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeKeywordList: select storekeywo0_.store_id as store_id3_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.370+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeKeywordList: select storekeywo0_.store_id as store_id3_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.371+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeKeywordList: select storekeywo0_.store_id as store_id3_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.371+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeKeywordList: select storekeywo0_.store_id as store_id3_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.371+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.storeKeywordList: select storekeywo0_.store_id as store_id3_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_1_, storekeywo0_.store_keyword_id as store_ke1_11_0_, storekeywo0_.keyword_id as keyword_2_11_0_, storekeywo0_.store_id as store_id3_11_0_ from store_keyword storekeywo0_ where storekeywo0_.store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.371+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.likesList: select likeslist0_.store_id as store_id3_6_2_, likeslist0_.likes_id as likes_id1_6_2_, likeslist0_.likes_id as likes_id1_6_1_, likeslist0_.member_id as member_i2_6_1_, likeslist0_.store_id as store_id3_6_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from likes likeslist0_ left outer join member member1_ on likeslist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where likeslist0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.371+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.likesList: select likeslist0_.store_id as store_id3_6_2_, likeslist0_.likes_id as likes_id1_6_2_, likeslist0_.likes_id as likes_id1_6_1_, likeslist0_.member_id as member_i2_6_1_, likeslist0_.store_id as store_id3_6_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from likes likeslist0_ left outer join member member1_ on likeslist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where likeslist0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.371+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.likesList: select likeslist0_.store_id as store_id3_6_2_, likeslist0_.likes_id as likes_id1_6_2_, likeslist0_.likes_id as likes_id1_6_1_, likeslist0_.member_id as member_i2_6_1_, likeslist0_.store_id as store_id3_6_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from likes likeslist0_ left outer join member member1_ on likeslist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where likeslist0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.371+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.likesList: select likeslist0_.store_id as store_id3_6_2_, likeslist0_.likes_id as likes_id1_6_2_, likeslist0_.likes_id as likes_id1_6_1_, likeslist0_.member_id as member_i2_6_1_, likeslist0_.store_id as store_id3_6_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from likes likeslist0_ left outer join member member1_ on likeslist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where likeslist0_.store_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.372+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.likesList: select likeslist0_.store_id as store_id3_6_2_, likeslist0_.likes_id as likes_id1_6_2_, likeslist0_.likes_id as likes_id1_6_1_, likeslist0_.member_id as member_i2_6_1_, likeslist0_.store_id as store_id3_6_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from likes likeslist0_ left outer join member member1_ on likeslist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where likeslist0_.store_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.372+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.likesList: select likeslist0_.store_id as store_id3_6_2_, likeslist0_.likes_id as likes_id1_6_2_, likeslist0_.likes_id as likes_id1_6_1_, likeslist0_.member_id as member_i2_6_1_, likeslist0_.store_id as store_id3_6_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from likes likeslist0_ left outer join member member1_ on likeslist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where likeslist0_.store_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.372+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.likesList: select likeslist0_.store_id as store_id3_6_2_, likeslist0_.likes_id as likes_id1_6_2_, likeslist0_.likes_id as likes_id1_6_1_, likeslist0_.member_id as member_i2_6_1_, likeslist0_.store_id as store_id3_6_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from likes likeslist0_ left outer join member member1_ on likeslist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where likeslist0_.store_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.372+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.likesList: select likeslist0_.store_id as store_id3_6_2_, likeslist0_.likes_id as likes_id1_6_2_, likeslist0_.likes_id as likes_id1_6_1_, likeslist0_.member_id as member_i2_6_1_, likeslist0_.store_id as store_id3_6_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from likes likeslist0_ left outer join member member1_ on likeslist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where likeslist0_.store_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.372+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.likesList: select likeslist0_.store_id as store_id3_6_2_, likeslist0_.likes_id as likes_id1_6_2_, likeslist0_.likes_id as likes_id1_6_1_, likeslist0_.member_id as member_i2_6_1_, likeslist0_.store_id as store_id3_6_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from likes likeslist0_ left outer join member member1_ on likeslist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where likeslist0_.store_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.372+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.likesList: select likeslist0_.store_id as store_id3_6_2_, likeslist0_.likes_id as likes_id1_6_2_, likeslist0_.likes_id as likes_id1_6_1_, likeslist0_.member_id as member_i2_6_1_, likeslist0_.store_id as store_id3_6_1_, member1_.member_id as member_i1_7_0_, member1_.authentication_type as authenti2_7_0_, member1_.email as email3_7_0_, member1_.is_active as is_activ4_7_0_, member1_.name as name5_7_0_, member1_.password as password6_7_0_, member1_.username as username7_7_0_, case when member1_1_.member_id is not null then 1 when member1_2_.member_id is not null then 2 when member1_.member_id is not null then 0 end as clazz_0_ from likes likeslist0_ left outer join member member1_ on likeslist0_.member_id=member1_.member_id left outer join consumer member1_1_ on member1_.member_id=member1_1_.member_id left outer join store_owner member1_2_ on member1_.member_id=member1_2_.member_id where likeslist0_.store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.372+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.menuList: select menulist0_.store_id as store_id4_8_1_, menulist0_.menu_id as menu_id1_8_1_, menulist0_.menu_id as menu_id1_8_0_, menulist0_.name as name2_8_0_, menulist0_.price as price3_8_0_, menulist0_.store_id as store_id4_8_0_ from menu menulist0_ where menulist0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.372+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.menuList: select menulist0_.store_id as store_id4_8_1_, menulist0_.menu_id as menu_id1_8_1_, menulist0_.menu_id as menu_id1_8_0_, menulist0_.name as name2_8_0_, menulist0_.price as price3_8_0_, menulist0_.store_id as store_id4_8_0_ from menu menulist0_ where menulist0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.372+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.menuList: select menulist0_.store_id as store_id4_8_1_, menulist0_.menu_id as menu_id1_8_1_, menulist0_.menu_id as menu_id1_8_0_, menulist0_.name as name2_8_0_, menulist0_.price as price3_8_0_, menulist0_.store_id as store_id4_8_0_ from menu menulist0_ where menulist0_.store_id in (?, ?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.373+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.menuList: select menulist0_.store_id as store_id4_8_1_, menulist0_.menu_id as menu_id1_8_1_, menulist0_.menu_id as menu_id1_8_0_, menulist0_.name as name2_8_0_, menulist0_.price as price3_8_0_, menulist0_.store_id as store_id4_8_0_ from menu menulist0_ where menulist0_.store_id in (?, ?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.373+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.menuList: select menulist0_.store_id as store_id4_8_1_, menulist0_.menu_id as menu_id1_8_1_, menulist0_.menu_id as menu_id1_8_0_, menulist0_.name as name2_8_0_, menulist0_.price as price3_8_0_, menulist0_.store_id as store_id4_8_0_ from menu menulist0_ where menulist0_.store_id in (?, ?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.373+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.menuList: select menulist0_.store_id as store_id4_8_1_, menulist0_.menu_id as menu_id1_8_1_, menulist0_.menu_id as menu_id1_8_0_, menulist0_.name as name2_8_0_, menulist0_.price as price3_8_0_, menulist0_.store_id as store_id4_8_0_ from menu menulist0_ where menulist0_.store_id in (?, ?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.373+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.menuList: select menulist0_.store_id as store_id4_8_1_, menulist0_.menu_id as menu_id1_8_1_, menulist0_.menu_id as menu_id1_8_0_, menulist0_.name as name2_8_0_, menulist0_.price as price3_8_0_, menulist0_.store_id as store_id4_8_0_ from menu menulist0_ where menulist0_.store_id in (?, ?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.373+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.menuList: select menulist0_.store_id as store_id4_8_1_, menulist0_.menu_id as menu_id1_8_1_, menulist0_.menu_id as menu_id1_8_0_, menulist0_.name as name2_8_0_, menulist0_.price as price3_8_0_, menulist0_.store_id as store_id4_8_0_ from menu menulist0_ where menulist0_.store_id in (?, ?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.373+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.menuList: select menulist0_.store_id as store_id4_8_1_, menulist0_.menu_id as menu_id1_8_1_, menulist0_.menu_id as menu_id1_8_0_, menulist0_.name as name2_8_0_, menulist0_.price as price3_8_0_, menulist0_.store_id as store_id4_8_0_ from menu menulist0_ where menulist0_.store_id in (?, ?)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.373+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.loader.collection.OneToManyLoader",
  "message" : "Static select for one-to-many com.twogather.twogatherwebbackend.domain.Store.menuList: select menulist0_.store_id as store_id4_8_1_, menulist0_.menu_id as menu_id1_8_1_, menulist0_.menu_id as menu_id1_8_0_, menulist0_.name as name2_8_0_, menulist0_.price as price3_8_0_, menulist0_.store_id as store_id4_8_0_ from menu menulist0_ where menulist0_.store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.403+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection adder",
  "logger" : "com.zaxxer.hikari.pool.HikariPool",
  "message" : "HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@358a3d71",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.501+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection adder",
  "logger" : "com.zaxxer.hikari.pool.HikariPool",
  "message" : "HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@29ca1517",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.501+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection adder",
  "logger" : "com.zaxxer.hikari.pool.HikariPool",
  "message" : "HikariPool-1 - After adding stats (total=10, active=1, idle=9, waiting=0)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.Table",
  "message" : "No alter strings for table : business_hour",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.Table",
  "message" : "No alter strings for table : category",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.Table",
  "message" : "No alter strings for table : comment",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.Table",
  "message" : "No alter strings for table : consumer",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.Table",
  "message" : "No alter strings for table : image",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.Table",
  "message" : "No alter strings for table : keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.Table",
  "message" : "No alter strings for table : likes",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.Table",
  "message" : "No alter strings for table : member",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.Table",
  "message" : "No alter strings for table : menu",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.Table",
  "message" : "No alter strings for table : review",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.Table",
  "message" : "No alter strings for table : store",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.509+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.Table",
  "message" : "No alter strings for table : store_keyword",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.509+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.mapping.Table",
  "message" : "No alter strings for table : store_owner",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.560+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table business_hour add constraint FK27fsf8jdlbj5pfgyx5ad0x618 foreign key (store_id) references store (store_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.634+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table comment add constraint FKmrrrpi513ssu63i2783jyiv9m foreign key (member_id) references member (member_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.669+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table comment add constraint FKnf4ni761w29tmtgdxymmgvg8r foreign key (review_id) references review (review_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.716+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table consumer add constraint FKpr40ag92wwfa461g5wv5fpesd foreign key (member_id) references member (member_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table image add constraint FK10wms0kbcv5yy3cmrjdbdretf foreign key (store_id) references store (store_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.821+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table likes add constraint FKa4vkf1skcfu5r6o5gfb5jf295 foreign key (member_id) references member (member_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.860+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table likes add constraint FK3l2vrcxqcq6iersn5td79dmbq foreign key (store_id) references store (store_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.906+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table menu add constraint FK4sgenfcmk1jajhgctnkpn5erg foreign key (store_id) references store (store_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.951+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table review add constraint FKk0ccx5i4ci2wd70vegug074w1 foreign key (member_id) references member (member_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:07.987+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table review add constraint FK74d12ba8sxxu9vpnc59b43y30 foreign key (store_id) references store (store_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.036+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table store add constraint FKo36xk5h32w3adfalrcm6ptis foreign key (category_id) references category (category_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.080+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table store add constraint FKlj25wdtijfjcetrnno8a9w6n9 foreign key (member_id) references store_owner (member_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.129+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table store_keyword add constraint FK87eei8w0hwppjifi3mivviwk7 foreign key (keyword_id) references keyword (keyword_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.160+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table store_keyword add constraint FKlp495t5ml3xhq5au8o0xavv1f foreign key (store_id) references store (store_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.208+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.SQL",
  "message" : "alter table store_owner add constraint FKnm7w4et6syxoy3wecyo8iu85l foreign key (member_id) references member (member_id)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.239+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator",
  "message" : "HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.243+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.service.internal.SessionFactoryServiceRegistryImpl",
  "message" : "EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.254+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.QueryTranslatorFactoryInitiator",
  "message" : "QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@3e18e693",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.257+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.query.spi.NamedQueryRepository",
  "message" : "Checking 0 named HQL queries",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.257+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.query.spi.NamedQueryRepository",
  "message" : "Checking 0 named SQL queries",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.258+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.internal.SessionFactoryRegistry",
  "message" : "Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@31dd0e2e",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.258+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.internal.SessionFactoryRegistry",
  "message" : "Registering SessionFactory: cced3ecd-32e4-4532-86cb-216bb8f9928c (<unnamed>)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.258+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.internal.SessionFactoryRegistry",
  "message" : "Not binding SessionFactory to JNDI, no JNDI name configured",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.258+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean",
  "message" : "Initialized JPA EntityManagerFactory for persistence unit 'default'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.263+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'twogatherWebBackendApplication'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'jwtAccessDeniedHandler'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.264+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'jwtAuthenticationEntryPoint'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.265+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'privateConstants'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.267+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.core.env.PropertySourcesPropertyResolver",
  "message" : "Found key 'jwt.secret' in PropertySource 'environmentProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.267+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.core.env.PropertySourcesPropertyResolver",
  "message" : "Found key 'jwt.access-token.expiration-time' in PropertySource 'environmentProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.269+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.core.env.PropertySourcesPropertyResolver",
  "message" : "Found key 'jwt.refresh-token.expiration-time' in PropertySource 'environmentProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.269+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.core.env.PropertySourcesPropertyResolver",
  "message" : "Found key 'jwt.access-header' in PropertySource 'environmentProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.269+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.core.env.PropertySourcesPropertyResolver",
  "message" : "Found key 'jwt.refresh-header' in PropertySource 'environmentProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.270+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.core.env.PropertySourcesPropertyResolver",
  "message" : "Found key 'api.validate.service.key' in PropertySource 'environmentProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.270+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.core.env.PropertySourcesPropertyResolver",
  "message" : "Found key 'api.validate.url' in PropertySource 'environmentProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.270+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'passwordEncoderConfig'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.271+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'queryDslConfig'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.289+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 's3Config'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.289+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.core.env.PropertySourcesPropertyResolver",
  "message" : "Found key 'aws.access-key' in PropertySource 'environmentProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.core.env.PropertySourcesPropertyResolver",
  "message" : "Found key 'aws.secret-key' in PropertySource 'environmentProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.core.env.PropertySourcesPropertyResolver",
  "message" : "Found key 'aws.s3.region' in PropertySource 'environmentProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'securityConfig'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.291+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.core.LocalVariableTableParameterNameDiscoverer",
  "message" : "Cannot find '.class' file for class [class com.twogather.twogatherwebbackend.config.SecurityConfig$$EnhancerBySpringCGLIB$$98d27dc1] - unable to determine constructor/method parameter names",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.291+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'memberRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.318+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'jpaMappingContext'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.config.JpaMetamodelMappingContextFactoryBean",
  "message" : "Initializing JpaMetamodelMappingContext…",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.325+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.config.JpaMetamodelMappingContextFactoryBean",
  "message" : "Finished initializing JpaMetamodelMappingContext!",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.342+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.374+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.stat.internal.StatisticsInitiator",
  "message" : "Statistics initialized [enabled=false]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.378+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.401+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Initializing repository instance for com.twogather.twogatherwebbackend.repository.MemberRepository…",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.408+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.449+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.449+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Member.existsByActiveEmail.count",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.450+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.474+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "parse() - HQL: SELECT COUNT(c) > 0 FROM com.twogather.twogatherwebbackend.domain.Member c WHERE c.email = :email AND c.isActive = true",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.477+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "Keyword  'Member' is being interpreted as an identifier due to: expecting IDENT, found 'Member'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.477+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.482+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- HQL AST ---\r\n \\-[QUERY] Node: 'query'\r\n    +-[SELECT_FROM] Node: 'SELECT_FROM'\r\n    |  +-[FROM] Node: 'FROM'\r\n    |  |  \\-[RANGE] Node: 'RANGE'\r\n    |  |     +-[DOT] Node: '.'\r\n    |  |     |  +-[DOT] Node: '.'\r\n    |  |     |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  |  +-[IDENT] Node: 'com'\r\n    |  |     |  |  |  |  \\-[IDENT] Node: 'twogather'\r\n    |  |     |  |  |  \\-[IDENT] Node: 'twogatherwebbackend'\r\n    |  |     |  |  \\-[IDENT] Node: 'domain'\r\n    |  |     |  \\-[WEIRD_IDENT] Node: 'Member'\r\n    |  |     \\-[ALIAS] Node: 'c'\r\n    |  \\-[SELECT] Node: 'SELECT'\r\n    |     \\-[GT] Node: '>'\r\n    |        +-[COUNT] Node: 'COUNT'\r\n    |        |  \\-[IDENT] Node: 'c'\r\n    |        \\-[NUM_INT] Node: '0'\r\n    \\-[WHERE] Node: 'WHERE'\r\n       \\-[AND] Node: 'AND'\r\n          +-[EQ] Node: '='\r\n          |  +-[DOT] Node: '.'\r\n          |  |  +-[IDENT] Node: 'c'\r\n          |  |  \\-[IDENT] Node: 'email'\r\n          |  \\-[COLON] Node: ':'\r\n          |     \\-[IDENT] Node: 'email'\r\n          \\-[EQ] Node: '='\r\n             +-[DOT] Node: '.'\r\n             |  +-[IDENT] Node: 'c'\r\n             |  \\-[IDENT] Node: 'isActive'\r\n             \\-[TRUE] Node: 'true'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.494+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select << begin [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.502+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromElement",
  "message" : "FromClause{level=1} : com.twogather.twogatherwebbackend.domain.Member (c) -> member0_",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.505+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : c -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.507+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : c -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : email -> org.hibernate.type.StringType@26ca12a2",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : c.email -> member0_.email",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.510+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : c -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.510+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : isActive -> org.hibernate.type.BooleanType@fe8aaeb",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.510+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : c.isActive -> member0_.is_active",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.511+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select : finishing up [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.511+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.HqlSqlWalker",
  "message" : "processQuery() :  ( SELECT ( {select clause} ( > ( COUNT member0_.member_id ) 0 ) ) ( FromClause{level=1} member member0_ ) ( WHERE ( AND ( = ( member0_.email member0_.member_id email ) ? ) ( = ( member0_.is_active member0_.member_id isActive ) true ) ) ) )",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.515+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Tables referenced from query nodes:\r\n \\-QueryNode\r\n    +-SelectClause\r\n    |  +-BinaryLogicOperatorNode\r\n    |  |  +-CountNode\r\n    |  |  |  \\-IdentNode\r\n    |  |  |    persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n    |  |  |    originalText: c\r\n    |  |  \\-LiteralNode\r\n    |  \\-SqlNode\r\n    +-FromClause\r\n    |  \\-FromElement\r\n    \\-SqlNode\r\n       \\-SqlNode\r\n          +-BinaryLogicOperatorNode\r\n          |  +-DotNode\r\n          |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n          |  | path: c.email\r\n          |  |  +-IdentNode\r\n          |  |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n          |  |  | originalText: c\r\n          |  |  \\-IdentNode\r\n          |  |    persister: null\r\n          |  |    originalText: email\r\n          |  \\-ParameterNode\r\n          \\-BinaryLogicOperatorNode\r\n             +-DotNode\r\n             | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n             | path: c.isActive\r\n             |  +-IdentNode\r\n             |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n             |  | originalText: c\r\n             |  \\-IdentNode\r\n             |    persister: null\r\n             |    originalText: isActive\r\n             \\-BooleanLiteralNode\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.519+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Using FROM fragment [member member0_]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.520+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select >> end [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.520+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- SQL AST ---\r\n \\-[SELECT] QueryNode: 'SELECT'  querySpaces (member)\r\n    +-[SELECT_CLAUSE] SelectClause: '{select clause}'\r\n    |  +-[GT] BinaryLogicOperatorNode: '>'\r\n    |  |  +-[COUNT] CountNode: 'COUNT'\r\n    |  |  |  \\-[ALIAS_REF] IdentNode: 'member0_.member_id' {alias=c, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n    |  |  \\-[NUM_INT] LiteralNode: '0'\r\n    |  \\-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'\r\n    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[c], fromElementByTableAlias=[member0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}\r\n    |  \\-[FROM_FRAGMENT] FromElement: 'member member0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=c,role=null,tableName=member,tableAlias=member0_,origin=null,columns={,className=com.twogather.twogatherwebbackend.domain.Member}}\r\n    \\-[WHERE] SqlNode: 'WHERE'\r\n       \\-[AND] SqlNode: 'AND'\r\n          +-[EQ] BinaryLogicOperatorNode: '='\r\n          |  +-[DOT] DotNode: 'member0_.email' {propertyName=email,dereferenceType=PRIMITIVE,getPropertyPath=email,path=c.email,tableAlias=member0_,className=com.twogather.twogatherwebbackend.domain.Member,classAlias=c}\r\n          |  |  +-[ALIAS_REF] IdentNode: 'member0_.member_id' {alias=c, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n          |  |  \\-[IDENT] IdentNode: 'email' {originalText=email}\r\n          |  \\-[NAMED_PARAM] ParameterNode: '?' {name=email, expectedType=org.hibernate.type.StringType@26ca12a2}\r\n          \\-[EQ] BinaryLogicOperatorNode: '='\r\n             +-[DOT] DotNode: 'member0_.is_active' {propertyName=isActive,dereferenceType=PRIMITIVE,getPropertyPath=isActive,path=c.isActive,tableAlias=member0_,className=com.twogather.twogatherwebbackend.domain.Member,classAlias=c}\r\n             |  +-[ALIAS_REF] IdentNode: 'member0_.member_id' {alias=c, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n             |  \\-[IDENT] IdentNode: 'isActive' {originalText=isActive}\r\n             \\-[TRUE] BooleanLiteralNode: 'true'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.520+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.525+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "HQL: SELECT COUNT(c) > 0 FROM com.twogather.twogatherwebbackend.domain.Member c WHERE c.email = :email AND c.isActive = true",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.526+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "SQL: select count(member0_.member_id)>0 as col_0_0_ from member member0_ where member0_.email=? and member0_.is_active=1",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.526+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.532+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.532+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Member.findActiveMemberById.count",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.533+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.534+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "parse() - HQL: select m from com.twogather.twogatherwebbackend.domain.Member m where m.memberId = :id and m.isActive = true",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.535+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "Keyword  'Member' is being interpreted as an identifier due to: expecting IDENT, found 'Member'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.535+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.535+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- HQL AST ---\r\n \\-[QUERY] Node: 'query'\r\n    +-[SELECT_FROM] Node: 'SELECT_FROM'\r\n    |  +-[FROM] Node: 'from'\r\n    |  |  \\-[RANGE] Node: 'RANGE'\r\n    |  |     +-[DOT] Node: '.'\r\n    |  |     |  +-[DOT] Node: '.'\r\n    |  |     |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  |  +-[IDENT] Node: 'com'\r\n    |  |     |  |  |  |  \\-[IDENT] Node: 'twogather'\r\n    |  |     |  |  |  \\-[IDENT] Node: 'twogatherwebbackend'\r\n    |  |     |  |  \\-[IDENT] Node: 'domain'\r\n    |  |     |  \\-[WEIRD_IDENT] Node: 'Member'\r\n    |  |     \\-[ALIAS] Node: 'm'\r\n    |  \\-[SELECT] Node: 'select'\r\n    |     \\-[IDENT] Node: 'm'\r\n    \\-[WHERE] Node: 'where'\r\n       \\-[AND] Node: 'and'\r\n          +-[EQ] Node: '='\r\n          |  +-[DOT] Node: '.'\r\n          |  |  +-[IDENT] Node: 'm'\r\n          |  |  \\-[IDENT] Node: 'memberId'\r\n          |  \\-[COLON] Node: ':'\r\n          |     \\-[IDENT] Node: 'id'\r\n          \\-[EQ] Node: '='\r\n             +-[DOT] Node: '.'\r\n             |  +-[IDENT] Node: 'm'\r\n             |  \\-[IDENT] Node: 'isActive'\r\n             \\-[TRUE] Node: 'true'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.536+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select << begin [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.536+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromElement",
  "message" : "FromClause{level=1} : com.twogather.twogatherwebbackend.domain.Member (m) -> member0_",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.536+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.536+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.537+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : memberId -> org.hibernate.type.LongType@781c2497",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.537+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m.memberId -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.537+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.537+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : isActive -> org.hibernate.type.BooleanType@fe8aaeb",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.537+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m.isActive -> member0_.is_active",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.537+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select : finishing up [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.537+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.HqlSqlWalker",
  "message" : "processQuery() :  ( SELECT ( {select clause} member0_.member_id ) ( FromClause{level=1} member member0_ ) ( where ( and ( = ( member0_.member_id member0_.member_id memberId ) ? ) ( = ( member0_.is_active member0_.member_id isActive ) true ) ) ) )",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.540+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Tables referenced from query nodes:\r\n \\-QueryNode\r\n    +-SelectClause\r\n    | referencedTables(entity Member): [member]\r\n    |  +-IdentNode\r\n    |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n    |  | originalText: m\r\n    |  \\-SqlFragment\r\n    +-FromClause\r\n    |  \\-FromElement\r\n    \\-SqlNode\r\n       \\-SqlNode\r\n          +-BinaryLogicOperatorNode\r\n          |  +-DotNode\r\n          |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n          |  | path: m.memberId\r\n          |  |  +-IdentNode\r\n          |  |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n          |  |  | originalText: m\r\n          |  |  \\-IdentNode\r\n          |  |    persister: null\r\n          |  |    originalText: memberId\r\n          |  \\-ParameterNode\r\n          \\-BinaryLogicOperatorNode\r\n             +-DotNode\r\n             | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n             | path: m.isActive\r\n             |  +-IdentNode\r\n             |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n             |  | originalText: m\r\n             |  \\-IdentNode\r\n             |    persister: null\r\n             |    originalText: isActive\r\n             \\-BooleanLiteralNode\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.540+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Using FROM fragment [member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.540+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select >> end [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.540+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- SQL AST ---\r\n \\-[SELECT] QueryNode: 'SELECT'  querySpaces (member)\r\n    +-[SELECT_CLAUSE] SelectClause: '{select clause}'\r\n    |  +-[ALIAS_REF] IdentNode: 'member0_.member_id as member_i1_7_' {alias=m, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n    |  \\-[SQL_TOKEN] SqlFragment: 'member0_.authentication_type as authenti2_7_, member0_.email as email3_7_, member0_.is_active as is_activ4_7_, member0_.name as name5_7_, member0_.password as password6_7_, member0_.username as username7_7_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_'\r\n    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[m], fromElementByTableAlias=[member0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}\r\n    |  \\-[FROM_FRAGMENT] FromElement: 'member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=m,role=null,tableName=member,tableAlias=member0_,origin=null,columns={,className=com.twogather.twogatherwebbackend.domain.Member}}\r\n    \\-[WHERE] SqlNode: 'where'\r\n       \\-[AND] SqlNode: 'and'\r\n          +-[EQ] BinaryLogicOperatorNode: '='\r\n          |  +-[DOT] DotNode: 'member0_.member_id' {propertyName=memberId,dereferenceType=PRIMITIVE,getPropertyPath=memberId,path=m.memberId,tableAlias=member0_,className=com.twogather.twogatherwebbackend.domain.Member,classAlias=m}\r\n          |  |  +-[ALIAS_REF] IdentNode: 'member0_.member_id' {alias=m, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n          |  |  \\-[IDENT] IdentNode: 'memberId' {originalText=memberId}\r\n          |  \\-[NAMED_PARAM] ParameterNode: '?' {name=id, expectedType=org.hibernate.type.LongType@781c2497}\r\n          \\-[EQ] BinaryLogicOperatorNode: '='\r\n             +-[DOT] DotNode: 'member0_.is_active' {propertyName=isActive,dereferenceType=PRIMITIVE,getPropertyPath=isActive,path=m.isActive,tableAlias=member0_,className=com.twogather.twogatherwebbackend.domain.Member,classAlias=m}\r\n             |  +-[ALIAS_REF] IdentNode: 'member0_.member_id' {alias=m, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n             |  \\-[IDENT] IdentNode: 'isActive' {originalText=isActive}\r\n             \\-[TRUE] BooleanLiteralNode: 'true'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.541+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.541+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "HQL: select m from com.twogather.twogatherwebbackend.domain.Member m where m.memberId = :id and m.isActive = true",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.541+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "SQL: select member0_.member_id as member_i1_7_, member0_.authentication_type as authenti2_7_, member0_.email as email3_7_, member0_.is_active as is_activ4_7_, member0_.name as name5_7_, member0_.password as password6_7_, member0_.username as username7_7_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_ from member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id where member0_.member_id=? and member0_.is_active=1",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.541+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.542+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.542+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Member.existsByActiveUsername.count",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.542+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.545+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "parse() - HQL: SELECT COUNT(c) > 0 FROM com.twogather.twogatherwebbackend.domain.Member c WHERE c.username = :username AND c.isActive = true",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.545+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "Keyword  'Member' is being interpreted as an identifier due to: expecting IDENT, found 'Member'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.545+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.546+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- HQL AST ---\r\n \\-[QUERY] Node: 'query'\r\n    +-[SELECT_FROM] Node: 'SELECT_FROM'\r\n    |  +-[FROM] Node: 'FROM'\r\n    |  |  \\-[RANGE] Node: 'RANGE'\r\n    |  |     +-[DOT] Node: '.'\r\n    |  |     |  +-[DOT] Node: '.'\r\n    |  |     |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  |  +-[IDENT] Node: 'com'\r\n    |  |     |  |  |  |  \\-[IDENT] Node: 'twogather'\r\n    |  |     |  |  |  \\-[IDENT] Node: 'twogatherwebbackend'\r\n    |  |     |  |  \\-[IDENT] Node: 'domain'\r\n    |  |     |  \\-[WEIRD_IDENT] Node: 'Member'\r\n    |  |     \\-[ALIAS] Node: 'c'\r\n    |  \\-[SELECT] Node: 'SELECT'\r\n    |     \\-[GT] Node: '>'\r\n    |        +-[COUNT] Node: 'COUNT'\r\n    |        |  \\-[IDENT] Node: 'c'\r\n    |        \\-[NUM_INT] Node: '0'\r\n    \\-[WHERE] Node: 'WHERE'\r\n       \\-[AND] Node: 'AND'\r\n          +-[EQ] Node: '='\r\n          |  +-[DOT] Node: '.'\r\n          |  |  +-[IDENT] Node: 'c'\r\n          |  |  \\-[IDENT] Node: 'username'\r\n          |  \\-[COLON] Node: ':'\r\n          |     \\-[IDENT] Node: 'username'\r\n          \\-[EQ] Node: '='\r\n             +-[DOT] Node: '.'\r\n             |  +-[IDENT] Node: 'c'\r\n             |  \\-[IDENT] Node: 'isActive'\r\n             \\-[TRUE] Node: 'true'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.546+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select << begin [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.547+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromElement",
  "message" : "FromClause{level=1} : com.twogather.twogatherwebbackend.domain.Member (c) -> member0_",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.547+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : c -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.547+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : c -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.547+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : username -> org.hibernate.type.StringType@26ca12a2",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.547+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : c.username -> member0_.username",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.547+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : c -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.547+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : isActive -> org.hibernate.type.BooleanType@fe8aaeb",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.547+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : c.isActive -> member0_.is_active",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.547+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select : finishing up [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.547+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.HqlSqlWalker",
  "message" : "processQuery() :  ( SELECT ( {select clause} ( > ( COUNT member0_.member_id ) 0 ) ) ( FromClause{level=1} member member0_ ) ( WHERE ( AND ( = ( member0_.username member0_.member_id username ) ? ) ( = ( member0_.is_active member0_.member_id isActive ) true ) ) ) )",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.548+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Tables referenced from query nodes:\r\n \\-QueryNode\r\n    +-SelectClause\r\n    |  +-BinaryLogicOperatorNode\r\n    |  |  +-CountNode\r\n    |  |  |  \\-IdentNode\r\n    |  |  |    persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n    |  |  |    originalText: c\r\n    |  |  \\-LiteralNode\r\n    |  \\-SqlNode\r\n    +-FromClause\r\n    |  \\-FromElement\r\n    \\-SqlNode\r\n       \\-SqlNode\r\n          +-BinaryLogicOperatorNode\r\n          |  +-DotNode\r\n          |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n          |  | path: c.username\r\n          |  |  +-IdentNode\r\n          |  |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n          |  |  | originalText: c\r\n          |  |  \\-IdentNode\r\n          |  |    persister: null\r\n          |  |    originalText: username\r\n          |  \\-ParameterNode\r\n          \\-BinaryLogicOperatorNode\r\n             +-DotNode\r\n             | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n             | path: c.isActive\r\n             |  +-IdentNode\r\n             |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n             |  | originalText: c\r\n             |  \\-IdentNode\r\n             |    persister: null\r\n             |    originalText: isActive\r\n             \\-BooleanLiteralNode\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.549+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Using FROM fragment [member member0_]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.549+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select >> end [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.549+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- SQL AST ---\r\n \\-[SELECT] QueryNode: 'SELECT'  querySpaces (member)\r\n    +-[SELECT_CLAUSE] SelectClause: '{select clause}'\r\n    |  +-[GT] BinaryLogicOperatorNode: '>'\r\n    |  |  +-[COUNT] CountNode: 'COUNT'\r\n    |  |  |  \\-[ALIAS_REF] IdentNode: 'member0_.member_id' {alias=c, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n    |  |  \\-[NUM_INT] LiteralNode: '0'\r\n    |  \\-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'\r\n    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[c], fromElementByTableAlias=[member0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}\r\n    |  \\-[FROM_FRAGMENT] FromElement: 'member member0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=c,role=null,tableName=member,tableAlias=member0_,origin=null,columns={,className=com.twogather.twogatherwebbackend.domain.Member}}\r\n    \\-[WHERE] SqlNode: 'WHERE'\r\n       \\-[AND] SqlNode: 'AND'\r\n          +-[EQ] BinaryLogicOperatorNode: '='\r\n          |  +-[DOT] DotNode: 'member0_.username' {propertyName=username,dereferenceType=PRIMITIVE,getPropertyPath=username,path=c.username,tableAlias=member0_,className=com.twogather.twogatherwebbackend.domain.Member,classAlias=c}\r\n          |  |  +-[ALIAS_REF] IdentNode: 'member0_.member_id' {alias=c, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n          |  |  \\-[IDENT] IdentNode: 'username' {originalText=username}\r\n          |  \\-[NAMED_PARAM] ParameterNode: '?' {name=username, expectedType=org.hibernate.type.StringType@26ca12a2}\r\n          \\-[EQ] BinaryLogicOperatorNode: '='\r\n             +-[DOT] DotNode: 'member0_.is_active' {propertyName=isActive,dereferenceType=PRIMITIVE,getPropertyPath=isActive,path=c.isActive,tableAlias=member0_,className=com.twogather.twogatherwebbackend.domain.Member,classAlias=c}\r\n             |  +-[ALIAS_REF] IdentNode: 'member0_.member_id' {alias=c, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n             |  \\-[IDENT] IdentNode: 'isActive' {originalText=isActive}\r\n             \\-[TRUE] BooleanLiteralNode: 'true'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.549+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.549+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "HQL: SELECT COUNT(c) > 0 FROM com.twogather.twogatherwebbackend.domain.Member c WHERE c.username = :username AND c.isActive = true",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.549+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "SQL: select count(member0_.member_id)>0 as col_0_0_ from member member0_ where member0_.username=? and member0_.is_active=1",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.549+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.550+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.551+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Member.findActiveMemberByUsername.count",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.551+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.553+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "parse() - HQL: select m from com.twogather.twogatherwebbackend.domain.Member m where m.username =:username and m.isActive = true",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.553+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "Keyword  'Member' is being interpreted as an identifier due to: expecting IDENT, found 'Member'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.553+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.554+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- HQL AST ---\r\n \\-[QUERY] Node: 'query'\r\n    +-[SELECT_FROM] Node: 'SELECT_FROM'\r\n    |  +-[FROM] Node: 'from'\r\n    |  |  \\-[RANGE] Node: 'RANGE'\r\n    |  |     +-[DOT] Node: '.'\r\n    |  |     |  +-[DOT] Node: '.'\r\n    |  |     |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  |  +-[IDENT] Node: 'com'\r\n    |  |     |  |  |  |  \\-[IDENT] Node: 'twogather'\r\n    |  |     |  |  |  \\-[IDENT] Node: 'twogatherwebbackend'\r\n    |  |     |  |  \\-[IDENT] Node: 'domain'\r\n    |  |     |  \\-[WEIRD_IDENT] Node: 'Member'\r\n    |  |     \\-[ALIAS] Node: 'm'\r\n    |  \\-[SELECT] Node: 'select'\r\n    |     \\-[IDENT] Node: 'm'\r\n    \\-[WHERE] Node: 'where'\r\n       \\-[AND] Node: 'and'\r\n          +-[EQ] Node: '='\r\n          |  +-[DOT] Node: '.'\r\n          |  |  +-[IDENT] Node: 'm'\r\n          |  |  \\-[IDENT] Node: 'username'\r\n          |  \\-[COLON] Node: ':'\r\n          |     \\-[IDENT] Node: 'username'\r\n          \\-[EQ] Node: '='\r\n             +-[DOT] Node: '.'\r\n             |  +-[IDENT] Node: 'm'\r\n             |  \\-[IDENT] Node: 'isActive'\r\n             \\-[TRUE] Node: 'true'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.554+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select << begin [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.554+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromElement",
  "message" : "FromClause{level=1} : com.twogather.twogatherwebbackend.domain.Member (m) -> member0_",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.554+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.554+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.554+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : username -> org.hibernate.type.StringType@26ca12a2",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.554+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m.username -> member0_.username",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.554+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.555+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : isActive -> org.hibernate.type.BooleanType@fe8aaeb",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.555+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m.isActive -> member0_.is_active",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.555+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select : finishing up [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.555+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.HqlSqlWalker",
  "message" : "processQuery() :  ( SELECT ( {select clause} member0_.member_id ) ( FromClause{level=1} member member0_ ) ( where ( and ( = ( member0_.username member0_.member_id username ) ? ) ( = ( member0_.is_active member0_.member_id isActive ) true ) ) ) )",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.556+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Tables referenced from query nodes:\r\n \\-QueryNode\r\n    +-SelectClause\r\n    | referencedTables(entity Member): [member]\r\n    |  +-IdentNode\r\n    |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n    |  | originalText: m\r\n    |  \\-SqlFragment\r\n    +-FromClause\r\n    |  \\-FromElement\r\n    \\-SqlNode\r\n       \\-SqlNode\r\n          +-BinaryLogicOperatorNode\r\n          |  +-DotNode\r\n          |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n          |  | path: m.username\r\n          |  |  +-IdentNode\r\n          |  |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n          |  |  | originalText: m\r\n          |  |  \\-IdentNode\r\n          |  |    persister: null\r\n          |  |    originalText: username\r\n          |  \\-ParameterNode\r\n          \\-BinaryLogicOperatorNode\r\n             +-DotNode\r\n             | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n             | path: m.isActive\r\n             |  +-IdentNode\r\n             |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n             |  | originalText: m\r\n             |  \\-IdentNode\r\n             |    persister: null\r\n             |    originalText: isActive\r\n             \\-BooleanLiteralNode\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.556+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Using FROM fragment [member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.556+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select >> end [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.556+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- SQL AST ---\r\n \\-[SELECT] QueryNode: 'SELECT'  querySpaces (member)\r\n    +-[SELECT_CLAUSE] SelectClause: '{select clause}'\r\n    |  +-[ALIAS_REF] IdentNode: 'member0_.member_id as member_i1_7_' {alias=m, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n    |  \\-[SQL_TOKEN] SqlFragment: 'member0_.authentication_type as authenti2_7_, member0_.email as email3_7_, member0_.is_active as is_activ4_7_, member0_.name as name5_7_, member0_.password as password6_7_, member0_.username as username7_7_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_'\r\n    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[m], fromElementByTableAlias=[member0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}\r\n    |  \\-[FROM_FRAGMENT] FromElement: 'member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=m,role=null,tableName=member,tableAlias=member0_,origin=null,columns={,className=com.twogather.twogatherwebbackend.domain.Member}}\r\n    \\-[WHERE] SqlNode: 'where'\r\n       \\-[AND] SqlNode: 'and'\r\n          +-[EQ] BinaryLogicOperatorNode: '='\r\n          |  +-[DOT] DotNode: 'member0_.username' {propertyName=username,dereferenceType=PRIMITIVE,getPropertyPath=username,path=m.username,tableAlias=member0_,className=com.twogather.twogatherwebbackend.domain.Member,classAlias=m}\r\n          |  |  +-[ALIAS_REF] IdentNode: 'member0_.member_id' {alias=m, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n          |  |  \\-[IDENT] IdentNode: 'username' {originalText=username}\r\n          |  \\-[NAMED_PARAM] ParameterNode: '?' {name=username, expectedType=org.hibernate.type.StringType@26ca12a2}\r\n          \\-[EQ] BinaryLogicOperatorNode: '='\r\n             +-[DOT] DotNode: 'member0_.is_active' {propertyName=isActive,dereferenceType=PRIMITIVE,getPropertyPath=isActive,path=m.isActive,tableAlias=member0_,className=com.twogather.twogatherwebbackend.domain.Member,classAlias=m}\r\n             |  +-[ALIAS_REF] IdentNode: 'member0_.member_id' {alias=m, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n             |  \\-[IDENT] IdentNode: 'isActive' {originalText=isActive}\r\n             \\-[TRUE] BooleanLiteralNode: 'true'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.556+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.556+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "HQL: select m from com.twogather.twogatherwebbackend.domain.Member m where m.username =:username and m.isActive = true",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.556+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "SQL: select member0_.member_id as member_i1_7_, member0_.authentication_type as authenti2_7_, member0_.email as email3_7_, member0_.is_active as is_activ4_7_, member0_.name as name5_7_, member0_.password as password6_7_, member0_.username as username7_7_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_ from member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id where member0_.username=? and member0_.is_active=1",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.556+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.558+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.558+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Member.findActiveMemberByEmail.count",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.558+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.559+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "parse() - HQL: select m from com.twogather.twogatherwebbackend.domain.Member m where m.email =:email and m.isActive = true",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.559+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "Keyword  'Member' is being interpreted as an identifier due to: expecting IDENT, found 'Member'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.560+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.560+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- HQL AST ---\r\n \\-[QUERY] Node: 'query'\r\n    +-[SELECT_FROM] Node: 'SELECT_FROM'\r\n    |  +-[FROM] Node: 'from'\r\n    |  |  \\-[RANGE] Node: 'RANGE'\r\n    |  |     +-[DOT] Node: '.'\r\n    |  |     |  +-[DOT] Node: '.'\r\n    |  |     |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  |  +-[IDENT] Node: 'com'\r\n    |  |     |  |  |  |  \\-[IDENT] Node: 'twogather'\r\n    |  |     |  |  |  \\-[IDENT] Node: 'twogatherwebbackend'\r\n    |  |     |  |  \\-[IDENT] Node: 'domain'\r\n    |  |     |  \\-[WEIRD_IDENT] Node: 'Member'\r\n    |  |     \\-[ALIAS] Node: 'm'\r\n    |  \\-[SELECT] Node: 'select'\r\n    |     \\-[IDENT] Node: 'm'\r\n    \\-[WHERE] Node: 'where'\r\n       \\-[AND] Node: 'and'\r\n          +-[EQ] Node: '='\r\n          |  +-[DOT] Node: '.'\r\n          |  |  +-[IDENT] Node: 'm'\r\n          |  |  \\-[IDENT] Node: 'email'\r\n          |  \\-[COLON] Node: ':'\r\n          |     \\-[IDENT] Node: 'email'\r\n          \\-[EQ] Node: '='\r\n             +-[DOT] Node: '.'\r\n             |  +-[IDENT] Node: 'm'\r\n             |  \\-[IDENT] Node: 'isActive'\r\n             \\-[TRUE] Node: 'true'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.560+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select << begin [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.560+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromElement",
  "message" : "FromClause{level=1} : com.twogather.twogatherwebbackend.domain.Member (m) -> member0_",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.560+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.560+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.560+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : email -> org.hibernate.type.StringType@26ca12a2",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.560+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m.email -> member0_.email",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.561+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m -> member0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.561+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : isActive -> org.hibernate.type.BooleanType@fe8aaeb",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.561+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : m.isActive -> member0_.is_active",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.561+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select : finishing up [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.561+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.HqlSqlWalker",
  "message" : "processQuery() :  ( SELECT ( {select clause} member0_.member_id ) ( FromClause{level=1} member member0_ ) ( where ( and ( = ( member0_.email member0_.member_id email ) ? ) ( = ( member0_.is_active member0_.member_id isActive ) true ) ) ) )",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.562+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Tables referenced from query nodes:\r\n \\-QueryNode\r\n    +-SelectClause\r\n    | referencedTables(entity Member): [member]\r\n    |  +-IdentNode\r\n    |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n    |  | originalText: m\r\n    |  \\-SqlFragment\r\n    +-FromClause\r\n    |  \\-FromElement\r\n    \\-SqlNode\r\n       \\-SqlNode\r\n          +-BinaryLogicOperatorNode\r\n          |  +-DotNode\r\n          |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n          |  | path: m.email\r\n          |  |  +-IdentNode\r\n          |  |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n          |  |  | originalText: m\r\n          |  |  \\-IdentNode\r\n          |  |    persister: null\r\n          |  |    originalText: email\r\n          |  \\-ParameterNode\r\n          \\-BinaryLogicOperatorNode\r\n             +-DotNode\r\n             | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n             | path: m.isActive\r\n             |  +-IdentNode\r\n             |  | persister: JoinedSubclassEntityPersister(com.twogather.twogatherwebbackend.domain.Member)\r\n             |  | originalText: m\r\n             |  \\-IdentNode\r\n             |    persister: null\r\n             |    originalText: isActive\r\n             \\-BooleanLiteralNode\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.562+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Using FROM fragment [member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.562+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select >> end [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.562+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- SQL AST ---\r\n \\-[SELECT] QueryNode: 'SELECT'  querySpaces (member)\r\n    +-[SELECT_CLAUSE] SelectClause: '{select clause}'\r\n    |  +-[ALIAS_REF] IdentNode: 'member0_.member_id as member_i1_7_' {alias=m, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n    |  \\-[SQL_TOKEN] SqlFragment: 'member0_.authentication_type as authenti2_7_, member0_.email as email3_7_, member0_.is_active as is_activ4_7_, member0_.name as name5_7_, member0_.password as password6_7_, member0_.username as username7_7_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_'\r\n    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[m], fromElementByTableAlias=[member0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}\r\n    |  \\-[FROM_FRAGMENT] FromElement: 'member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=m,role=null,tableName=member,tableAlias=member0_,origin=null,columns={,className=com.twogather.twogatherwebbackend.domain.Member}}\r\n    \\-[WHERE] SqlNode: 'where'\r\n       \\-[AND] SqlNode: 'and'\r\n          +-[EQ] BinaryLogicOperatorNode: '='\r\n          |  +-[DOT] DotNode: 'member0_.email' {propertyName=email,dereferenceType=PRIMITIVE,getPropertyPath=email,path=m.email,tableAlias=member0_,className=com.twogather.twogatherwebbackend.domain.Member,classAlias=m}\r\n          |  |  +-[ALIAS_REF] IdentNode: 'member0_.member_id' {alias=m, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n          |  |  \\-[IDENT] IdentNode: 'email' {originalText=email}\r\n          |  \\-[NAMED_PARAM] ParameterNode: '?' {name=email, expectedType=org.hibernate.type.StringType@26ca12a2}\r\n          \\-[EQ] BinaryLogicOperatorNode: '='\r\n             +-[DOT] DotNode: 'member0_.is_active' {propertyName=isActive,dereferenceType=PRIMITIVE,getPropertyPath=isActive,path=m.isActive,tableAlias=member0_,className=com.twogather.twogatherwebbackend.domain.Member,classAlias=m}\r\n             |  +-[ALIAS_REF] IdentNode: 'member0_.member_id' {alias=m, className=com.twogather.twogatherwebbackend.domain.Member, tableAlias=member0_}\r\n             |  \\-[IDENT] IdentNode: 'isActive' {originalText=isActive}\r\n             \\-[TRUE] BooleanLiteralNode: 'true'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.562+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.562+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "HQL: select m from com.twogather.twogatherwebbackend.domain.Member m where m.email =:email and m.isActive = true",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.562+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "SQL: select member0_.member_id as member_i1_7_, member0_.authentication_type as authenti2_7_, member0_.email as email3_7_, member0_.is_active as is_activ4_7_, member0_.name as name5_7_, member0_.password as password6_7_, member0_.username as username7_7_, case when member0_1_.member_id is not null then 1 when member0_2_.member_id is not null then 2 when member0_.member_id is not null then 0 end as clazz_ from member member0_ left outer join consumer member0_1_ on member0_.member_id=member0_1_.member_id left outer join store_owner member0_2_ on member0_.member_id=member0_2_.member_id where member0_.email=? and member0_.is_active=1",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.562+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.566+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Finished creation of repository instance for com.twogather.twogatherwebbackend.repository.MemberRepository.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.574+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'securityConfig' via constructor to bean named 'memberRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.574+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'securityConfig' via constructor to bean named 'jwtAccessDeniedHandler'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.574+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'securityConfig' via constructor to bean named 'corsConfig'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.574+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'securityConfig' via constructor to bean named 'jwtAuthenticationEntryPoint'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.574+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'securityConfig' via constructor to bean named 'privateConstants'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.574+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'adminController'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.579+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'storeService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.589+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'storeRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.591+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'storeCustomRepositoryImplFragment'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.591+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'storeCustomRepositoryImpl'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.597+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'jpaQueryFactory'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.613+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeCustomRepositoryImpl' via constructor to bean named 'jpaQueryFactory'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.628+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.656+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Initializing repository instance for com.twogather.twogatherwebbackend.repository.store.StoreRepository…",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.657+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.678+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query Store.existsByName",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.678+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.678+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Store.existsByName",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.679+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.705+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.706+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Store.findAllStoreById.count",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.706+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.707+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "parse() - HQL: select s from com.twogather.twogatherwebbackend.domain.Store s where s.storeId = :id and s.status <> com.twogather.twogatherwebbackend.domain.StoreStatus.DELETED ",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.707+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.708+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- HQL AST ---\r\n \\-[QUERY] Node: 'query'\r\n    +-[SELECT_FROM] Node: 'SELECT_FROM'\r\n    |  +-[FROM] Node: 'from'\r\n    |  |  \\-[RANGE] Node: 'RANGE'\r\n    |  |     +-[DOT] Node: '.'\r\n    |  |     |  +-[DOT] Node: '.'\r\n    |  |     |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  |  +-[IDENT] Node: 'com'\r\n    |  |     |  |  |  |  \\-[IDENT] Node: 'twogather'\r\n    |  |     |  |  |  \\-[IDENT] Node: 'twogatherwebbackend'\r\n    |  |     |  |  \\-[IDENT] Node: 'domain'\r\n    |  |     |  \\-[IDENT] Node: 'Store'\r\n    |  |     \\-[ALIAS] Node: 's'\r\n    |  \\-[SELECT] Node: 'select'\r\n    |     \\-[IDENT] Node: 's'\r\n    \\-[WHERE] Node: 'where'\r\n       \\-[AND] Node: 'and'\r\n          +-[EQ] Node: '='\r\n          |  +-[DOT] Node: '.'\r\n          |  |  +-[IDENT] Node: 's'\r\n          |  |  \\-[IDENT] Node: 'storeId'\r\n          |  \\-[COLON] Node: ':'\r\n          |     \\-[IDENT] Node: 'id'\r\n          \\-[NE] Node: '<>'\r\n             +-[DOT] Node: '.'\r\n             |  +-[IDENT] Node: 's'\r\n             |  \\-[IDENT] Node: 'status'\r\n             \\-[JAVA_CONSTANT] Node: 'com.twogather.twogatherwebbackend.domain.StoreStatus.DELETED'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.708+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select << begin [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.708+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromElement",
  "message" : "FromClause{level=1} : com.twogather.twogatherwebbackend.domain.Store (s) -> store0_",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.708+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : s -> store0_.store_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.709+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : s -> store0_.store_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.709+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : storeId -> org.hibernate.type.LongType@781c2497",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.709+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : s.storeId -> store0_.store_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.709+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : s -> store0_.store_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.709+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : status -> org.hibernate.type.CustomType@763ddfc3",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.709+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : s.status -> store0_.status",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.709+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select : finishing up [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.710+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.HqlSqlWalker",
  "message" : "processQuery() :  ( SELECT ( {select clause} store0_.store_id ) ( FromClause{level=1} store store0_ ) ( where ( and ( = ( store0_.store_id store0_.store_id storeId ) ? ) ( <> ( store0_.status store0_.store_id status ) com.twogather.twogatherwebbackend.domain.StoreStatus.DELETED ) ) ) )",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.710+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Tables referenced from query nodes:\r\n \\-QueryNode\r\n    +-SelectClause\r\n    | referencedTables(entity Store): [store]\r\n    |  +-IdentNode\r\n    |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Store)\r\n    |  | originalText: s\r\n    |  \\-SqlFragment\r\n    +-FromClause\r\n    |  \\-FromElement\r\n    \\-SqlNode\r\n       \\-SqlNode\r\n          +-BinaryLogicOperatorNode\r\n          |  +-DotNode\r\n          |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Store)\r\n          |  | path: s.storeId\r\n          |  |  +-IdentNode\r\n          |  |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Store)\r\n          |  |  | originalText: s\r\n          |  |  \\-IdentNode\r\n          |  |    persister: null\r\n          |  |    originalText: storeId\r\n          |  \\-ParameterNode\r\n          \\-BinaryLogicOperatorNode\r\n             +-DotNode\r\n             | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Store)\r\n             | path: s.status\r\n             |  +-IdentNode\r\n             |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Store)\r\n             |  | originalText: s\r\n             |  \\-IdentNode\r\n             |    persister: null\r\n             |    originalText: status\r\n             \\-JavaConstantNode\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.710+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Using FROM fragment [store store0_]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.710+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select >> end [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.710+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- SQL AST ---\r\n \\-[SELECT] QueryNode: 'SELECT'  querySpaces (store)\r\n    +-[SELECT_CLAUSE] SelectClause: '{select clause}'\r\n    |  +-[ALIAS_REF] IdentNode: 'store0_.store_id as store_id1_10_' {alias=s, className=com.twogather.twogatherwebbackend.domain.Store, tableAlias=store0_}\r\n    |  \\-[SQL_TOKEN] SqlFragment: 'store0_.address as address2_10_, store0_.business_name as business3_10_, store0_.business_number as business4_10_, store0_.business_start_date as business5_10_, store0_.category_id as categor11_10_, store0_.name as name6_10_, store0_.member_id as member_12_10_, store0_.phone as phone7_10_, store0_.reason_for_rejection as reason_f8_10_, store0_.request_date as request_9_10_, store0_.status as status10_10_'\r\n    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[s], fromElementByTableAlias=[store0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}\r\n    |  \\-[FROM_FRAGMENT] FromElement: 'store store0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=s,role=null,tableName=store,tableAlias=store0_,origin=null,columns={,className=com.twogather.twogatherwebbackend.domain.Store}}\r\n    \\-[WHERE] SqlNode: 'where'\r\n       \\-[AND] SqlNode: 'and'\r\n          +-[EQ] BinaryLogicOperatorNode: '='\r\n          |  +-[DOT] DotNode: 'store0_.store_id' {propertyName=storeId,dereferenceType=PRIMITIVE,getPropertyPath=storeId,path=s.storeId,tableAlias=store0_,className=com.twogather.twogatherwebbackend.domain.Store,classAlias=s}\r\n          |  |  +-[ALIAS_REF] IdentNode: 'store0_.store_id' {alias=s, className=com.twogather.twogatherwebbackend.domain.Store, tableAlias=store0_}\r\n          |  |  \\-[IDENT] IdentNode: 'storeId' {originalText=storeId}\r\n          |  \\-[NAMED_PARAM] ParameterNode: '?' {name=id, expectedType=org.hibernate.type.LongType@781c2497}\r\n          \\-[NE] BinaryLogicOperatorNode: '<>'\r\n             +-[DOT] DotNode: 'store0_.status' {propertyName=status,dereferenceType=PRIMITIVE,getPropertyPath=status,path=s.status,tableAlias=store0_,className=com.twogather.twogatherwebbackend.domain.Store,classAlias=s}\r\n             |  +-[ALIAS_REF] IdentNode: 'store0_.store_id' {alias=s, className=com.twogather.twogatherwebbackend.domain.Store, tableAlias=store0_}\r\n             |  \\-[IDENT] IdentNode: 'status' {originalText=status}\r\n             \\-[JAVA_CONSTANT] JavaConstantNode: 'com.twogather.twogatherwebbackend.domain.StoreStatus.DELETED'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.710+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.710+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "HQL: select s from com.twogather.twogatherwebbackend.domain.Store s where s.storeId = :id and s.status <> com.twogather.twogatherwebbackend.domain.StoreStatus.DELETED ",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.710+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "SQL: select store0_.store_id as store_id1_10_, store0_.address as address2_10_, store0_.business_name as business3_10_, store0_.business_number as business4_10_, store0_.business_start_date as business5_10_, store0_.category_id as categor11_10_, store0_.name as name6_10_, store0_.member_id as member_12_10_, store0_.phone as phone7_10_, store0_.reason_for_rejection as reason_f8_10_, store0_.request_date as request_9_10_, store0_.status as status10_10_ from store store0_ where store0_.store_id=? and store0_.status<>'DELETED'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.710+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.711+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query Store.findByName",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.711+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.711+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Store.findByName",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.711+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.712+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.712+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Store.findActiveStoreById.count",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.712+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "parse() - HQL: select s from com.twogather.twogatherwebbackend.domain.Store s where s.storeId = :id and s.status = com.twogather.twogatherwebbackend.domain.StoreStatus.APPROVED ",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- HQL AST ---\r\n \\-[QUERY] Node: 'query'\r\n    +-[SELECT_FROM] Node: 'SELECT_FROM'\r\n    |  +-[FROM] Node: 'from'\r\n    |  |  \\-[RANGE] Node: 'RANGE'\r\n    |  |     +-[DOT] Node: '.'\r\n    |  |     |  +-[DOT] Node: '.'\r\n    |  |     |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  |  +-[IDENT] Node: 'com'\r\n    |  |     |  |  |  |  \\-[IDENT] Node: 'twogather'\r\n    |  |     |  |  |  \\-[IDENT] Node: 'twogatherwebbackend'\r\n    |  |     |  |  \\-[IDENT] Node: 'domain'\r\n    |  |     |  \\-[IDENT] Node: 'Store'\r\n    |  |     \\-[ALIAS] Node: 's'\r\n    |  \\-[SELECT] Node: 'select'\r\n    |     \\-[IDENT] Node: 's'\r\n    \\-[WHERE] Node: 'where'\r\n       \\-[AND] Node: 'and'\r\n          +-[EQ] Node: '='\r\n          |  +-[DOT] Node: '.'\r\n          |  |  +-[IDENT] Node: 's'\r\n          |  |  \\-[IDENT] Node: 'storeId'\r\n          |  \\-[COLON] Node: ':'\r\n          |     \\-[IDENT] Node: 'id'\r\n          \\-[EQ] Node: '='\r\n             +-[DOT] Node: '.'\r\n             |  +-[IDENT] Node: 's'\r\n             |  \\-[IDENT] Node: 'status'\r\n             \\-[JAVA_CONSTANT] Node: 'com.twogather.twogatherwebbackend.domain.StoreStatus.APPROVED'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.714+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select << begin [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.714+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromElement",
  "message" : "FromClause{level=1} : com.twogather.twogatherwebbackend.domain.Store (s) -> store0_",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.714+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : s -> store0_.store_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.714+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : s -> store0_.store_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.714+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : storeId -> org.hibernate.type.LongType@781c2497",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.714+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : s.storeId -> store0_.store_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.715+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : s -> store0_.store_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.715+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : status -> org.hibernate.type.CustomType@763ddfc3",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.715+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : s.status -> store0_.status",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.715+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select : finishing up [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.715+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.HqlSqlWalker",
  "message" : "processQuery() :  ( SELECT ( {select clause} store0_.store_id ) ( FromClause{level=1} store store0_ ) ( where ( and ( = ( store0_.store_id store0_.store_id storeId ) ? ) ( = ( store0_.status store0_.store_id status ) com.twogather.twogatherwebbackend.domain.StoreStatus.APPROVED ) ) ) )",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.716+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Tables referenced from query nodes:\r\n \\-QueryNode\r\n    +-SelectClause\r\n    | referencedTables(entity Store): [store]\r\n    |  +-IdentNode\r\n    |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Store)\r\n    |  | originalText: s\r\n    |  \\-SqlFragment\r\n    +-FromClause\r\n    |  \\-FromElement\r\n    \\-SqlNode\r\n       \\-SqlNode\r\n          +-BinaryLogicOperatorNode\r\n          |  +-DotNode\r\n          |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Store)\r\n          |  | path: s.storeId\r\n          |  |  +-IdentNode\r\n          |  |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Store)\r\n          |  |  | originalText: s\r\n          |  |  \\-IdentNode\r\n          |  |    persister: null\r\n          |  |    originalText: storeId\r\n          |  \\-ParameterNode\r\n          \\-BinaryLogicOperatorNode\r\n             +-DotNode\r\n             | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Store)\r\n             | path: s.status\r\n             |  +-IdentNode\r\n             |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Store)\r\n             |  | originalText: s\r\n             |  \\-IdentNode\r\n             |    persister: null\r\n             |    originalText: status\r\n             \\-JavaConstantNode\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.716+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Using FROM fragment [store store0_]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.716+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select >> end [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.716+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- SQL AST ---\r\n \\-[SELECT] QueryNode: 'SELECT'  querySpaces (store)\r\n    +-[SELECT_CLAUSE] SelectClause: '{select clause}'\r\n    |  +-[ALIAS_REF] IdentNode: 'store0_.store_id as store_id1_10_' {alias=s, className=com.twogather.twogatherwebbackend.domain.Store, tableAlias=store0_}\r\n    |  \\-[SQL_TOKEN] SqlFragment: 'store0_.address as address2_10_, store0_.business_name as business3_10_, store0_.business_number as business4_10_, store0_.business_start_date as business5_10_, store0_.category_id as categor11_10_, store0_.name as name6_10_, store0_.member_id as member_12_10_, store0_.phone as phone7_10_, store0_.reason_for_rejection as reason_f8_10_, store0_.request_date as request_9_10_, store0_.status as status10_10_'\r\n    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[s], fromElementByTableAlias=[store0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}\r\n    |  \\-[FROM_FRAGMENT] FromElement: 'store store0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=s,role=null,tableName=store,tableAlias=store0_,origin=null,columns={,className=com.twogather.twogatherwebbackend.domain.Store}}\r\n    \\-[WHERE] SqlNode: 'where'\r\n       \\-[AND] SqlNode: 'and'\r\n          +-[EQ] BinaryLogicOperatorNode: '='\r\n          |  +-[DOT] DotNode: 'store0_.store_id' {propertyName=storeId,dereferenceType=PRIMITIVE,getPropertyPath=storeId,path=s.storeId,tableAlias=store0_,className=com.twogather.twogatherwebbackend.domain.Store,classAlias=s}\r\n          |  |  +-[ALIAS_REF] IdentNode: 'store0_.store_id' {alias=s, className=com.twogather.twogatherwebbackend.domain.Store, tableAlias=store0_}\r\n          |  |  \\-[IDENT] IdentNode: 'storeId' {originalText=storeId}\r\n          |  \\-[NAMED_PARAM] ParameterNode: '?' {name=id, expectedType=org.hibernate.type.LongType@781c2497}\r\n          \\-[EQ] BinaryLogicOperatorNode: '='\r\n             +-[DOT] DotNode: 'store0_.status' {propertyName=status,dereferenceType=PRIMITIVE,getPropertyPath=status,path=s.status,tableAlias=store0_,className=com.twogather.twogatherwebbackend.domain.Store,classAlias=s}\r\n             |  +-[ALIAS_REF] IdentNode: 'store0_.store_id' {alias=s, className=com.twogather.twogatherwebbackend.domain.Store, tableAlias=store0_}\r\n             |  \\-[IDENT] IdentNode: 'status' {originalText=status}\r\n             \\-[JAVA_CONSTANT] JavaConstantNode: 'com.twogather.twogatherwebbackend.domain.StoreStatus.APPROVED'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.716+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.717+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "HQL: select s from com.twogather.twogatherwebbackend.domain.Store s where s.storeId = :id and s.status = com.twogather.twogatherwebbackend.domain.StoreStatus.APPROVED ",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.717+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "SQL: select store0_.store_id as store_id1_10_, store0_.address as address2_10_, store0_.business_name as business3_10_, store0_.business_number as business4_10_, store0_.business_start_date as business5_10_, store0_.category_id as categor11_10_, store0_.name as name6_10_, store0_.member_id as member_12_10_, store0_.phone as phone7_10_, store0_.reason_for_rejection as reason_f8_10_, store0_.request_date as request_9_10_, store0_.status as status10_10_ from store store0_ where store0_.store_id=? and store0_.status='APPROVED'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.717+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.718+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Finished creation of repository instance for com.twogather.twogatherwebbackend.repository.store.StoreRepository.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.722+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'menuService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.724+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'menuRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.727+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.727+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Initializing repository instance for com.twogather.twogatherwebbackend.repository.MenuRepository…",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.727+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.743+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query Menu.findByStoreStoreIdAndMenuId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.743+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.743+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Menu.findByStoreStoreIdAndMenuId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.743+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query Menu.findByStoreStoreId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Menu.findByStoreStoreId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.750+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.753+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Finished creation of repository instance for com.twogather.twogatherwebbackend.repository.MenuRepository.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.760+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'menuService' via constructor to bean named 'menuRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.760+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'menuService' via constructor to bean named 'storeRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.769+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'imageService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.773+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'imageRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.775+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.775+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Initializing repository instance for com.twogather.twogatherwebbackend.repository.ImageRepository…",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.775+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.785+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query Image.findByStoreStoreId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.785+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.785+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Image.findByStoreStoreId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.785+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.788+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Finished creation of repository instance for com.twogather.twogatherwebbackend.repository.ImageRepository.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.791+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 's3Uploader'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.793+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'amazonS3'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.933+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.amazonaws.AmazonWebServiceClient",
  "message" : "Internal logging successfully configured to commons logger: true",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:08.938+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.amazonaws.metrics.AwsSdkMetrics",
  "message" : "Admin mbean registered under com.amazonaws.management:type=AwsSdkMetrics",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.079+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.amazonaws.monitoring.CsmConfigurationProviderChain",
  "message" : "Unable to load configuration from com.amazonaws.monitoring.EnvironmentVariableCsmConfigurationProvider@22c0c0bc: Unable to load Client Side Monitoring configurations from environment variables!",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.079+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.amazonaws.monitoring.CsmConfigurationProviderChain",
  "message" : "Unable to load configuration from com.amazonaws.monitoring.SystemPropertyCsmConfigurationProvider@36a25457: Unable to load Client Side Monitoring configurations from system properties variables!",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.078+09",
  "level" : "DEBUG",
  "thread" : "java-sdk-http-connection-reaper",
  "logger" : "org.apache.http.impl.conn.PoolingHttpClientConnectionManager",
  "message" : "Closing connections idle longer than 60000 MILLISECONDS",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.079+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "com.amazonaws.monitoring.CsmConfigurationProviderChain",
  "message" : "Unable to load configuration from com.amazonaws.monitoring.ProfileCsmConfigurationProvider@489c15e2: Unable to load config file",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.160+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 's3Uploader' via constructor to bean named 'amazonS3'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.160+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.core.env.PropertySourcesPropertyResolver",
  "message" : "Found key 'aws.s3.bucket.name' in PropertySource 'environmentProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.160+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.core.env.PropertySourcesPropertyResolver",
  "message" : "Found key 'aws.s3.store.directory' in PropertySource 'environmentProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.160+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.core.env.PropertySourcesPropertyResolver",
  "message" : "Found key 'aws.s3.region' in PropertySource 'environmentProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.161+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'imageService' via constructor to bean named 'storeRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.161+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'imageService' via constructor to bean named 'imageRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.161+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'imageService' via constructor to bean named 's3Uploader'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.164+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'storeKeywordService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.166+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'storeKeywordRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.168+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.168+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Initializing repository instance for com.twogather.twogatherwebbackend.repository.StoreKeywordRepository…",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.169+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.179+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query StoreKeyword.findByStoreStoreId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.179+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.179+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query StoreKeyword.findByStoreStoreId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.179+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.181+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.181+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query StoreKeyword.findKeywordsByStoreId.count",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.181+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.183+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "parse() - HQL: SELECT sk.keyword FROM com.twogather.twogatherwebbackend.domain.StoreKeyword sk WHERE sk.store.storeId = :storeId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.183+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.184+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- HQL AST ---\r\n \\-[QUERY] Node: 'query'\r\n    +-[SELECT_FROM] Node: 'SELECT_FROM'\r\n    |  +-[FROM] Node: 'FROM'\r\n    |  |  \\-[RANGE] Node: 'RANGE'\r\n    |  |     +-[DOT] Node: '.'\r\n    |  |     |  +-[DOT] Node: '.'\r\n    |  |     |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  |  +-[IDENT] Node: 'com'\r\n    |  |     |  |  |  |  \\-[IDENT] Node: 'twogather'\r\n    |  |     |  |  |  \\-[IDENT] Node: 'twogatherwebbackend'\r\n    |  |     |  |  \\-[IDENT] Node: 'domain'\r\n    |  |     |  \\-[IDENT] Node: 'StoreKeyword'\r\n    |  |     \\-[ALIAS] Node: 'sk'\r\n    |  \\-[SELECT] Node: 'SELECT'\r\n    |     \\-[DOT] Node: '.'\r\n    |        +-[IDENT] Node: 'sk'\r\n    |        \\-[IDENT] Node: 'keyword'\r\n    \\-[WHERE] Node: 'WHERE'\r\n       \\-[EQ] Node: '='\r\n          +-[DOT] Node: '.'\r\n          |  +-[DOT] Node: '.'\r\n          |  |  +-[IDENT] Node: 'sk'\r\n          |  |  \\-[IDENT] Node: 'store'\r\n          |  \\-[IDENT] Node: 'storeId'\r\n          \\-[COLON] Node: ':'\r\n             \\-[IDENT] Node: 'storeId'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.185+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select << begin [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.185+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromElement",
  "message" : "FromClause{level=1} : com.twogather.twogatherwebbackend.domain.StoreKeyword (sk) -> storekeywo0_",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.185+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : sk -> storekeywo0_.store_keyword_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.185+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : keyword -> org.hibernate.type.ManyToOneType(com.twogather.twogatherwebbackend.domain.Keyword)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.185+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "dereferenceEntityJoin() : generating join for keyword in com.twogather.twogatherwebbackend.domain.StoreKeyword (<no alias>) parent = [ {null} ]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.185+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromElement",
  "message" : "FromClause{level=1} : com.twogather.twogatherwebbackend.domain.Keyword (<no alias>) -> keyword1_",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.185+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromClause",
  "message" : "addJoinByPathMap() : sk.keyword -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=keyword,tableAlias=keyword1_,origin=store_keyword storekeywo0_,columns={storekeywo0_.keyword_id,className=com.twogather.twogatherwebbackend.domain.Keyword}}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.186+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : sk.keyword -> storekeywo0_.keyword_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.186+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : sk -> storekeywo0_.store_keyword_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.186+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : store -> org.hibernate.type.ManyToOneType(com.twogather.twogatherwebbackend.domain.Store)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.186+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "dereferenceShortcut() : property storeId in com.twogather.twogatherwebbackend.domain.StoreKeyword does not require a join.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.186+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "Unresolved property path is now 'store.storeId'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.186+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : sk.store -> storekeywo0_.store_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.186+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : store.storeId -> org.hibernate.type.LongType@781c2497",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.186+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : sk.store.storeId -> storekeywo0_.store_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.186+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select : finishing up [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.186+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.HqlSqlWalker",
  "message" : "processQuery() :  ( SELECT ( {select clause} ( storekeywo0_.keyword_id storekeywo0_.store_keyword_id keyword ) ) ( FromClause{level=1} ( store_keyword storekeywo0_ keyword keyword1_ ) ) ( WHERE ( = ( storekeywo0_.store_id ( storekeywo0_.store_id storekeywo0_.store_keyword_id store ) storeId ) ? ) ) )",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Tables referenced from query nodes:\r\n \\-QueryNode\r\n    +-SelectClause\r\n    | referencedTables(entity Keyword): [keyword]\r\n    |  +-DotNode\r\n    |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Keyword)\r\n    |  | path: sk.keyword\r\n    |  |  +-IdentNode\r\n    |  |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n    |  |  | originalText: sk\r\n    |  |  \\-IdentNode\r\n    |  |    persister: null\r\n    |  |    originalText: keyword\r\n    |  \\-SqlFragment\r\n    +-FromClause\r\n    |  \\-FromElement\r\n    |     \\-FromElement\r\n    \\-SqlNode\r\n       \\-BinaryLogicOperatorNode\r\n          +-DotNode\r\n          | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          | path: sk.store.storeId\r\n          |  +-DotNode\r\n          |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          |  | path: sk.store\r\n          |  |  +-IdentNode\r\n          |  |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.StoreKeyword)\r\n          |  |  | originalText: sk\r\n          |  |  \\-IdentNode\r\n          |  |    persister: null\r\n          |  |    originalText: store\r\n          |  \\-IdentNode\r\n          |    persister: null\r\n          |    originalText: storeId\r\n          \\-ParameterNode\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Using FROM fragment [store_keyword storekeywo0_]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Using FROM fragment [inner join keyword keyword1_ on storekeywo0_.keyword_id=keyword1_.keyword_id]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select >> end [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- SQL AST ---\r\n \\-[SELECT] QueryNode: 'SELECT'  querySpaces (store_keyword,keyword)\r\n    +-[SELECT_CLAUSE] SelectClause: '{select clause}'\r\n    |  +-[DOT] DotNode: 'keyword1_.keyword_id as keyword_1_5_' {propertyName=keyword,dereferenceType=ENTITY,getPropertyPath=keyword,path=sk.keyword,tableAlias=keyword1_,className=com.twogather.twogatherwebbackend.domain.Keyword,classAlias=null}\r\n    |  |  +-[ALIAS_REF] IdentNode: 'storekeywo0_.store_keyword_id' {alias=sk, className=com.twogather.twogatherwebbackend.domain.StoreKeyword, tableAlias=storekeywo0_}\r\n    |  |  \\-[IDENT] IdentNode: 'keyword' {originalText=keyword}\r\n    |  \\-[SQL_TOKEN] SqlFragment: 'keyword1_.name as name2_5_'\r\n    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=2, fromElements=2, fromElementByClassAlias=[sk], fromElementByTableAlias=[keyword1_, storekeywo0_], fromElementsByPath=[sk.keyword], collectionJoinFromElementsByPath=[], impliedElements=[]}\r\n    |  \\-[FROM_FRAGMENT] FromElement: 'store_keyword storekeywo0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=sk,role=null,tableName=store_keyword,tableAlias=storekeywo0_,origin=null,columns={,className=com.twogather.twogatherwebbackend.domain.StoreKeyword}}\r\n    |     \\-[JOIN_FRAGMENT] FromElement: 'inner join keyword keyword1_ on storekeywo0_.keyword_id=keyword1_.keyword_id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=com.twogather.twogatherwebbackend.domain.StoreKeyword.keyword,tableName=keyword,tableAlias=keyword1_,origin=store_keyword storekeywo0_,columns={storekeywo0_.keyword_id,className=com.twogather.twogatherwebbackend.domain.Keyword}}\r\n    \\-[WHERE] SqlNode: 'WHERE'\r\n       \\-[EQ] BinaryLogicOperatorNode: '='\r\n          +-[DOT] DotNode: 'storekeywo0_.store_id' {propertyName=storeId,dereferenceType=PRIMITIVE,getPropertyPath=store.storeId,path=sk.store.storeId,tableAlias=storekeywo0_,className=com.twogather.twogatherwebbackend.domain.StoreKeyword,classAlias=sk}\r\n          |  +-[DOT] DotNode: 'storekeywo0_.store_id' {propertyName=storeId,dereferenceType=UNKNOWN,getPropertyPath=store.storeId,path=sk.store,tableAlias=storekeywo0_,className=com.twogather.twogatherwebbackend.domain.StoreKeyword,classAlias=sk}\r\n          |  |  +-[ALIAS_REF] IdentNode: 'storekeywo0_.store_keyword_id' {alias=sk, className=com.twogather.twogatherwebbackend.domain.StoreKeyword, tableAlias=storekeywo0_}\r\n          |  |  \\-[IDENT] IdentNode: 'store' {originalText=store}\r\n          |  \\-[IDENT] IdentNode: 'storeId' {originalText=storeId}\r\n          \\-[NAMED_PARAM] ParameterNode: '?' {name=storeId, expectedType=org.hibernate.type.LongType@781c2497}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "HQL: SELECT sk.keyword FROM com.twogather.twogatherwebbackend.domain.StoreKeyword sk WHERE sk.store.storeId = :storeId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "SQL: select keyword1_.keyword_id as keyword_1_5_, keyword1_.name as name2_5_ from store_keyword storekeywo0_ inner join keyword keyword1_ on storekeywo0_.keyword_id=keyword1_.keyword_id where storekeywo0_.store_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.188+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query StoreKeyword.deleteByStoreStoreId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query StoreKeyword.deleteByStoreStoreId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.189+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.191+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Finished creation of repository instance for com.twogather.twogatherwebbackend.repository.StoreKeywordRepository.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.195+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'keywordRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.197+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.198+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Initializing repository instance for com.twogather.twogatherwebbackend.repository.KeywordRepository…",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.198+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.207+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.207+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Keyword.findRandomKeywords.count",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.207+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.211+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query Keyword.findByName",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.211+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.211+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Keyword.findByName",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.211+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.214+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Finished creation of repository instance for com.twogather.twogatherwebbackend.repository.KeywordRepository.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.218+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeKeywordService' via constructor to bean named 'storeKeywordRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.218+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeKeywordService' via constructor to bean named 'keywordRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.218+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeKeywordService' via constructor to bean named 'storeRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.220+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'storeOwnerRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.224+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.224+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Initializing repository instance for com.twogather.twogatherwebbackend.repository.StoreOwnerRepository…",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.224+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.234+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query StoreOwner.existsByUsername",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.234+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.234+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query StoreOwner.existsByUsername",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.234+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.236+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query StoreOwner.findByUsername",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.236+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.236+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query StoreOwner.findByUsername",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.236+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.238+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Finished creation of repository instance for com.twogather.twogatherwebbackend.repository.StoreOwnerRepository.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.243+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'bizRegNumberValidator'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.244+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'bizRegNumberValidator' via constructor to bean named 'privateConstants'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.244+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'categoryService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.248+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'categoryRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.250+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.251+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Initializing repository instance for com.twogather.twogatherwebbackend.repository.CategoryRepository…",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.251+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.259+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Finished creation of repository instance for com.twogather.twogatherwebbackend.repository.CategoryRepository.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.261+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'categoryService' via constructor to bean named 'storeRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.261+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'categoryService' via constructor to bean named 'categoryRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.263+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'businessHourService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.268+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'businessHourRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.270+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.271+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Initializing repository instance for com.twogather.twogatherwebbackend.repository.BusinessHourRepository…",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.272+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.281+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query BusinessHour.findByStoreStoreIdAndDayOfWeek",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.281+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.281+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query BusinessHour.findByStoreStoreIdAndDayOfWeek",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.281+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.282+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query BusinessHour.findByStoreStoreId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.283+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.283+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query BusinessHour.findByStoreStoreId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.283+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.283+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query BusinessHour.deleteByStoreStoreIdAndDayOfWeek",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.283+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.283+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query BusinessHour.deleteByStoreStoreIdAndDayOfWeek",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.283+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.285+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Finished creation of repository instance for com.twogather.twogatherwebbackend.repository.BusinessHourRepository.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'businessHourValidator'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'businessHourService' via constructor to bean named 'businessHourRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'businessHourService' via constructor to bean named 'storeRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.288+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'businessHourService' via constructor to bean named 'businessHourValidator'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeService' via constructor to bean named 'storeRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeService' via constructor to bean named 'memberRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeService' via constructor to bean named 'menuService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeService' via constructor to bean named 'imageService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeService' via constructor to bean named 'storeKeywordService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.290+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeService' via constructor to bean named 'storeOwnerRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.291+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeService' via constructor to bean named 'bizRegNumberValidator'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.291+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeService' via constructor to bean named 'categoryService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.291+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeService' via constructor to bean named 'businessHourService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'adminController' via constructor to bean named 'storeService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.294+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'ADMIN\\')\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.AdminController.getAllStore(com.twogather.twogatherwebbackend.domain.StoreStatus,org.springframework.data.domain.Pageable)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.300+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.AdminController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.AdminController.getAllStore(com.twogather.twogatherwebbackend.domain.StoreStatus,org.springframework.data.domain.Pageable)]] with attributes [[authorize: 'hasRole('ADMIN')', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.301+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'methodSecurityInterceptor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.301+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'methodSecurityInterceptor' via factory method to bean named 'methodSecurityMetadataSource'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.308+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'ADMIN\\')\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.AdminController.approveStore(java.lang.Long)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.308+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.AdminController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.AdminController.approveStore(java.lang.Long)]] with attributes [[authorize: 'hasRole('ADMIN')', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.308+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'ADMIN\\')\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.AdminController.rejectStore(java.lang.Long,com.twogather.twogatherwebbackend.dto.store.RejectReason)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.308+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.AdminController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.AdminController.rejectStore(java.lang.Long,com.twogather.twogatherwebbackend.dto.store.RejectReason)]] with attributes [[authorize: 'hasRole('ADMIN')', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.309+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'businessHourController'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.312+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'businessHourController' via constructor to bean named 'businessHourService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.312+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeService.isMyStore(#storeId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.BusinessHourController.deleteList(java.lang.Long,com.twogather.twogatherwebbackend.dto.businesshour.BusinessHourIdList)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.315+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.BusinessHourController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.BusinessHourController.deleteList(java.lang.Long,com.twogather.twogatherwebbackend.dto.businesshour.BusinessHourIdList)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeService.isMyStore(#storeId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.315+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeService.isMyStore(#storeId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.BusinessHourController.updateList(java.lang.Long,com.twogather.twogatherwebbackend.dto.businesshour.BusinessHourSaveUpdateListRequest)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.315+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.BusinessHourController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.BusinessHourController.updateList(java.lang.Long,com.twogather.twogatherwebbackend.dto.businesshour.BusinessHourSaveUpdateListRequest)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeService.isMyStore(#storeId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.317+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'categoryController'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.318+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'categoryController' via constructor to bean named 'categoryService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.318+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeService.isMyStore(#storeId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.CategoryController.setCategoriesForStore(java.lang.Long,java.lang.Long)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.319+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.CategoryController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.CategoryController.setCategoriesForStore(java.lang.Long,java.lang.Long)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeService.isMyStore(#storeId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.320+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'commentController'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.323+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'commentService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.326+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'commentRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.328+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.328+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Initializing repository instance for com.twogather.twogatherwebbackend.repository.CommentRepository…",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.328+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.336+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Finished creation of repository instance for com.twogather.twogatherwebbackend.repository.CommentRepository.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.338+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'reviewRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'reviewCustomRepositoryImplFragment'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.340+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'reviewCustomRepositoryImpl'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.341+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'reviewCustomRepositoryImpl' via constructor to bean named 'jpaQueryFactory'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.344+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.345+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Initializing repository instance for com.twogather.twogatherwebbackend.repository.review.ReviewRepository…",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.345+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.361+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Finished creation of repository instance for com.twogather.twogatherwebbackend.repository.review.ReviewRepository.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.363+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'commentService' via constructor to bean named 'memberRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.363+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'commentService' via constructor to bean named 'commentRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.363+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'commentService' via constructor to bean named 'reviewRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.363+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'commentService' via constructor to bean named 'storeRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.367+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'commentController' via constructor to bean named 'commentService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.367+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"@commentService.isMyComment(#commentId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.CommentController.update(java.lang.Long,java.lang.Long,java.lang.Long,com.twogather.twogatherwebbackend.dto.comment.CommentSaveUpdateRequest)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.367+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.CommentController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.CommentController.update(java.lang.Long,java.lang.Long,java.lang.Long,com.twogather.twogatherwebbackend.dto.comment.CommentSaveUpdateRequest)]] with attributes [[authorize: '@commentService.isMyComment(#commentId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.368+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"@commentService.isMyComment(#commentId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.CommentController.delete(java.lang.Long,java.lang.Long,java.lang.Long)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.368+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.CommentController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.CommentController.delete(java.lang.Long,java.lang.Long,java.lang.Long)]] with attributes [[authorize: '@commentService.isMyComment(#commentId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.370+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'consumerController'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.372+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'memberService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.374+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'passwordEncoder'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.381+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'memberService' via constructor to bean named 'memberRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.381+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'memberService' via constructor to bean named 'passwordEncoder'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.387+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'consumerService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.389+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'consumerRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.392+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.396+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Initializing repository instance for com.twogather.twogatherwebbackend.repository.ConsumerRepository…",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.396+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.410+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query Consumer.existsByUsername",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.410+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.410+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Consumer.existsByUsername",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.410+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.412+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.412+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Consumer.getAverageReviewScore.count",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.413+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.413+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "parse() - HQL: select avg(r.score) from com.twogather.twogatherwebbackend.domain.Review r group by r.reviewId having r.reviewId = :id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.415+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.415+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- HQL AST ---\r\n \\-[QUERY] Node: 'query'\r\n    +-[SELECT_FROM] Node: 'SELECT_FROM'\r\n    |  +-[FROM] Node: 'from'\r\n    |  |  \\-[RANGE] Node: 'RANGE'\r\n    |  |     +-[DOT] Node: '.'\r\n    |  |     |  +-[DOT] Node: '.'\r\n    |  |     |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  |  +-[IDENT] Node: 'com'\r\n    |  |     |  |  |  |  \\-[IDENT] Node: 'twogather'\r\n    |  |     |  |  |  \\-[IDENT] Node: 'twogatherwebbackend'\r\n    |  |     |  |  \\-[IDENT] Node: 'domain'\r\n    |  |     |  \\-[IDENT] Node: 'Review'\r\n    |  |     \\-[ALIAS] Node: 'r'\r\n    |  \\-[SELECT] Node: 'select'\r\n    |     \\-[AGGREGATE] Node: 'avg'\r\n    |        \\-[DOT] Node: '.'\r\n    |           +-[IDENT] Node: 'r'\r\n    |           \\-[IDENT] Node: 'score'\r\n    \\-[GROUP] Node: 'group'\r\n       +-[DOT] Node: '.'\r\n       |  +-[IDENT] Node: 'r'\r\n       |  \\-[IDENT] Node: 'reviewId'\r\n       \\-[HAVING] Node: 'having'\r\n          \\-[EQ] Node: '='\r\n             +-[DOT] Node: '.'\r\n             |  +-[IDENT] Node: 'r'\r\n             |  \\-[IDENT] Node: 'reviewId'\r\n             \\-[COLON] Node: ':'\r\n                \\-[IDENT] Node: 'id'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.415+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select << begin [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.416+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromElement",
  "message" : "FromClause{level=1} : com.twogather.twogatherwebbackend.domain.Review (r) -> review0_",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.417+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : r -> review0_.review_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.417+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : score -> org.hibernate.type.DoubleType@239b98cb",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.418+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : r.score -> review0_.score",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.418+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : r -> review0_.review_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.418+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : reviewId -> org.hibernate.type.LongType@781c2497",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.418+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : r.reviewId -> review0_.review_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.418+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : r -> review0_.review_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.418+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : reviewId -> org.hibernate.type.LongType@781c2497",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.418+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : r.reviewId -> review0_.review_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.418+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select : finishing up [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.418+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.HqlSqlWalker",
  "message" : "processQuery() :  ( SELECT ( {select clause} ( avg ( review0_.score review0_.review_id score ) ) ) ( FromClause{level=1} review review0_ ) ( group ( review0_.review_id review0_.review_id reviewId ) ( having ( = ( review0_.review_id review0_.review_id reviewId ) ? ) ) ) )",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.419+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Tables referenced from query nodes:\r\n \\-QueryNode\r\n    +-SelectClause\r\n    |  +-AggregateNode\r\n    |  |  \\-DotNode\r\n    |  |    persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Review)\r\n    |  |    path: r.score\r\n    |  |     +-IdentNode\r\n    |  |     | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Review)\r\n    |  |     | originalText: r\r\n    |  |     \\-IdentNode\r\n    |  |       persister: null\r\n    |  |       originalText: score\r\n    |  \\-SqlNode\r\n    +-FromClause\r\n    |  \\-FromElement\r\n    \\-SqlNode\r\n       +-DotNode\r\n       | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Review)\r\n       | path: r.reviewId\r\n       |  +-IdentNode\r\n       |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Review)\r\n       |  | originalText: r\r\n       |  \\-IdentNode\r\n       |    persister: null\r\n       |    originalText: reviewId\r\n       \\-SqlNode\r\n          \\-BinaryLogicOperatorNode\r\n             +-DotNode\r\n             | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Review)\r\n             | path: r.reviewId\r\n             |  +-IdentNode\r\n             |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Review)\r\n             |  | originalText: r\r\n             |  \\-IdentNode\r\n             |    persister: null\r\n             |    originalText: reviewId\r\n             \\-ParameterNode\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.419+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Using FROM fragment [review review0_]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.419+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select >> end [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.419+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- SQL AST ---\r\n \\-[SELECT] QueryNode: 'SELECT'  querySpaces (review)\r\n    +-[SELECT_CLAUSE] SelectClause: '{select clause}'\r\n    |  +-[AGGREGATE] AggregateNode: 'avg'\r\n    |  |  \\-[DOT] DotNode: 'review0_.score' {propertyName=score,dereferenceType=PRIMITIVE,getPropertyPath=score,path=r.score,tableAlias=review0_,className=com.twogather.twogatherwebbackend.domain.Review,classAlias=r}\r\n    |  |     +-[ALIAS_REF] IdentNode: 'review0_.review_id' {alias=r, className=com.twogather.twogatherwebbackend.domain.Review, tableAlias=review0_}\r\n    |  |     \\-[IDENT] IdentNode: 'score' {originalText=score}\r\n    |  \\-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'\r\n    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[r], fromElementByTableAlias=[review0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}\r\n    |  \\-[FROM_FRAGMENT] FromElement: 'review review0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=r,role=null,tableName=review,tableAlias=review0_,origin=null,columns={,className=com.twogather.twogatherwebbackend.domain.Review}}\r\n    \\-[GROUP] SqlNode: 'group'\r\n       +-[DOT] DotNode: 'review0_.review_id' {propertyName=reviewId,dereferenceType=PRIMITIVE,getPropertyPath=reviewId,path=r.reviewId,tableAlias=review0_,className=com.twogather.twogatherwebbackend.domain.Review,classAlias=r}\r\n       |  +-[ALIAS_REF] IdentNode: 'review0_.review_id' {alias=r, className=com.twogather.twogatherwebbackend.domain.Review, tableAlias=review0_}\r\n       |  \\-[IDENT] IdentNode: 'reviewId' {originalText=reviewId}\r\n       \\-[HAVING] SqlNode: 'having'\r\n          \\-[EQ] BinaryLogicOperatorNode: '='\r\n             +-[DOT] DotNode: 'review0_.review_id' {propertyName=reviewId,dereferenceType=PRIMITIVE,getPropertyPath=reviewId,path=r.reviewId,tableAlias=review0_,className=com.twogather.twogatherwebbackend.domain.Review,classAlias=r}\r\n             |  +-[ALIAS_REF] IdentNode: 'review0_.review_id' {alias=r, className=com.twogather.twogatherwebbackend.domain.Review, tableAlias=review0_}\r\n             |  \\-[IDENT] IdentNode: 'reviewId' {originalText=reviewId}\r\n             \\-[NAMED_PARAM] ParameterNode: '?' {name=id, expectedType=org.hibernate.type.LongType@781c2497}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.419+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.420+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "HQL: select avg(r.score) from com.twogather.twogatherwebbackend.domain.Review r group by r.reviewId having r.reviewId = :id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.420+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "SQL: select avg(review0_.score) as col_0_0_ from review review0_ group by review0_.review_id having review0_.review_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.420+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.421+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query Consumer.findByUsername",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.422+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.422+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Consumer.findByUsername",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.422+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.424+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Finished creation of repository instance for com.twogather.twogatherwebbackend.repository.ConsumerRepository.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.427+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'consumerService' via constructor to bean named 'consumerRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.427+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'consumerService' via constructor to bean named 'passwordEncoder'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.427+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'consumerService' via constructor to bean named 'memberRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.431+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'consumerController' via constructor to bean named 'memberService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.431+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'consumerController' via constructor to bean named 'consumerService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.432+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'CONSUMER\\') and @consumerService.isConsumer(#memberId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ConsumerController.getConsumerInfo(java.lang.Long)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.433+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.ConsumerController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ConsumerController.getConsumerInfo(java.lang.Long)]] with attributes [[authorize: 'hasRole('CONSUMER') and @consumerService.isConsumer(#memberId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.433+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'CONSUMER\\') and @consumerService.isConsumer(#memberId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ConsumerController.leave(java.lang.Long)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.433+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.ConsumerController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ConsumerController.leave(java.lang.Long)]] with attributes [[authorize: 'hasRole('CONSUMER') and @consumerService.isConsumer(#memberId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.433+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'CONSUMER\\') and @consumerService.isConsumer(#memberId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ConsumerController.updateConsumerInfo(java.lang.Long,com.twogather.twogatherwebbackend.dto.member.MemberSaveUpdateRequest)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.433+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.ConsumerController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ConsumerController.updateConsumerInfo(java.lang.Long,com.twogather.twogatherwebbackend.dto.member.MemberSaveUpdateRequest)]] with attributes [[authorize: 'hasRole('CONSUMER') and @consumerService.isConsumer(#memberId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.436+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'controllerAdvice'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.442+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'emailController'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.445+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'emailService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.448+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'mailSender'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.448+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.mail.MailSenderPropertiesConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.449+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.mail-org.springframework.boot.autoconfigure.mail.MailProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.452+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'mailSender' via factory method to bean named 'spring.mail-org.springframework.boot.autoconfigure.mail.MailProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.465+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'emailService' via constructor to bean named 'mailSender'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.465+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'emailService' via constructor to bean named 'memberService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.471+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'emailController' via constructor to bean named 'emailService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.471+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'imageController'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.473+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'imageController' via constructor to bean named 'imageService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.475+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeService.isMyStore(#storeId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ImageController.delete(java.lang.Long,com.twogather.twogatherwebbackend.dto.image.ImageIdList)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.475+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.ImageController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ImageController.delete(java.lang.Long,com.twogather.twogatherwebbackend.dto.image.ImageIdList)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeService.isMyStore(#storeId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.475+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeService.isMyStore(#storeId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ImageController.upload(java.lang.Long,java.util.List)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.476+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.ImageController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ImageController.upload(java.lang.Long,java.util.List)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeService.isMyStore(#storeId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.476+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeService.isMyStore(#storeId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ImageController.getStoreImageInfos(java.lang.Long)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.476+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.ImageController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ImageController.getStoreImageInfos(java.lang.Long)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeService.isMyStore(#storeId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.478+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'keywordController'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.479+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'keywordService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.482+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'keywordService' via constructor to bean named 'keywordRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.483+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'keywordController' via constructor to bean named 'keywordService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.483+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'keywordController' via constructor to bean named 'storeKeywordService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.484+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeService.isMyStore(#storeId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.KeywordController.setStoreKeywordAssociation(java.lang.Long,java.util.List)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.484+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.KeywordController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.KeywordController.setStoreKeywordAssociation(java.lang.Long,java.util.List)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeService.isMyStore(#storeId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.486+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'likeController'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.488+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'likeService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.491+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'likeRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.493+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.494+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Initializing repository instance for com.twogather.twogatherwebbackend.repository.LikeRepository…",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.494+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.502+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.502+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Likes.findByStoreIdAndMemberId.count",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.502+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.505+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "parse() - HQL: SELECT l FROM com.twogather.twogatherwebbackend.domain.Likes l WHERE l.store.storeId = :storeId AND l.member.memberId = :memberId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.505+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.HqlParser",
  "message" : "handleDotIdent() : new LT(3) token - [\"l\",<111> previously: <111>,line=1,col=101,possibleID=true]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.506+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.506+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- HQL AST ---\r\n \\-[QUERY] Node: 'query'\r\n    +-[SELECT_FROM] Node: 'SELECT_FROM'\r\n    |  +-[FROM] Node: 'FROM'\r\n    |  |  \\-[RANGE] Node: 'RANGE'\r\n    |  |     +-[DOT] Node: '.'\r\n    |  |     |  +-[DOT] Node: '.'\r\n    |  |     |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  +-[DOT] Node: '.'\r\n    |  |     |  |  |  |  +-[IDENT] Node: 'com'\r\n    |  |     |  |  |  |  \\-[IDENT] Node: 'twogather'\r\n    |  |     |  |  |  \\-[IDENT] Node: 'twogatherwebbackend'\r\n    |  |     |  |  \\-[IDENT] Node: 'domain'\r\n    |  |     |  \\-[IDENT] Node: 'Likes'\r\n    |  |     \\-[ALIAS] Node: 'l'\r\n    |  \\-[SELECT] Node: 'SELECT'\r\n    |     \\-[IDENT] Node: 'l'\r\n    \\-[WHERE] Node: 'WHERE'\r\n       \\-[AND] Node: 'AND'\r\n          +-[EQ] Node: '='\r\n          |  +-[DOT] Node: '.'\r\n          |  |  +-[DOT] Node: '.'\r\n          |  |  |  +-[IDENT] Node: 'l'\r\n          |  |  |  \\-[IDENT] Node: 'store'\r\n          |  |  \\-[IDENT] Node: 'storeId'\r\n          |  \\-[COLON] Node: ':'\r\n          |     \\-[IDENT] Node: 'storeId'\r\n          \\-[EQ] Node: '='\r\n             +-[DOT] Node: '.'\r\n             |  +-[DOT] Node: '.'\r\n             |  |  +-[IDENT] Node: 'l'\r\n             |  |  \\-[IDENT] Node: 'member'\r\n             |  \\-[IDENT] Node: 'memberId'\r\n             \\-[COLON] Node: ':'\r\n                \\-[IDENT] Node: 'memberId'\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.506+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select << begin [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.507+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromElement",
  "message" : "FromClause{level=1} : com.twogather.twogatherwebbackend.domain.Likes (l) -> likes0_",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.507+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : l -> likes0_.likes_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.507+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : l -> likes0_.likes_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.507+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : store -> org.hibernate.type.ManyToOneType(com.twogather.twogatherwebbackend.domain.Store)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.507+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "dereferenceShortcut() : property storeId in com.twogather.twogatherwebbackend.domain.Likes does not require a join.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.507+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "Unresolved property path is now 'store.storeId'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.507+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : l.store -> likes0_.store_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.507+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : store.storeId -> org.hibernate.type.LongType@781c2497",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.507+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : l.store.storeId -> likes0_.store_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : l -> likes0_.likes_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : member -> org.hibernate.type.ManyToOneType(com.twogather.twogatherwebbackend.domain.Member)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "dereferenceShortcut() : property memberId in com.twogather.twogatherwebbackend.domain.Likes does not require a join.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "Unresolved property path is now 'member.memberId'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : l.member -> likes0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.DotNode",
  "message" : "getDataType() : member.memberId -> org.hibernate.type.LongType@781c2497",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.tree.FromReferenceNode",
  "message" : "Resolved : l.member.memberId -> likes0_.member_id",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select : finishing up [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.508+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.HqlSqlWalker",
  "message" : "processQuery() :  ( SELECT ( {select clause} likes0_.likes_id ) ( FromClause{level=1} likes likes0_ ) ( WHERE ( AND ( = ( likes0_.store_id ( likes0_.store_id likes0_.likes_id store ) storeId ) ? ) ( = ( likes0_.member_id ( likes0_.member_id likes0_.likes_id member ) memberId ) ? ) ) ) )",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.509+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Tables referenced from query nodes:\r\n \\-QueryNode\r\n    +-SelectClause\r\n    | referencedTables(entity Likes): [likes]\r\n    |  +-IdentNode\r\n    |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Likes)\r\n    |  | originalText: l\r\n    |  \\-SqlFragment\r\n    +-FromClause\r\n    |  \\-FromElement\r\n    \\-SqlNode\r\n       \\-SqlNode\r\n          +-BinaryLogicOperatorNode\r\n          |  +-DotNode\r\n          |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Likes)\r\n          |  | path: l.store.storeId\r\n          |  |  +-DotNode\r\n          |  |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Likes)\r\n          |  |  | path: l.store\r\n          |  |  |  +-IdentNode\r\n          |  |  |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Likes)\r\n          |  |  |  | originalText: l\r\n          |  |  |  \\-IdentNode\r\n          |  |  |    persister: null\r\n          |  |  |    originalText: store\r\n          |  |  \\-IdentNode\r\n          |  |    persister: null\r\n          |  |    originalText: storeId\r\n          |  \\-ParameterNode\r\n          \\-BinaryLogicOperatorNode\r\n             +-DotNode\r\n             | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Likes)\r\n             | path: l.member.memberId\r\n             |  +-DotNode\r\n             |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Likes)\r\n             |  | path: l.member\r\n             |  |  +-IdentNode\r\n             |  |  | persister: SingleTableEntityPersister(com.twogather.twogatherwebbackend.domain.Likes)\r\n             |  |  | originalText: l\r\n             |  |  \\-IdentNode\r\n             |  |    persister: null\r\n             |  |    originalText: member\r\n             |  \\-IdentNode\r\n             |    persister: null\r\n             |    originalText: memberId\r\n             \\-ParameterNode\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.509+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.util.JoinProcessor",
  "message" : "Using FROM fragment [likes likes0_]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.509+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.antlr.HqlSqlBaseWalker",
  "message" : "select >> end [level=1, statement=select]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.509+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "--- SQL AST ---\r\n \\-[SELECT] QueryNode: 'SELECT'  querySpaces (likes)\r\n    +-[SELECT_CLAUSE] SelectClause: '{select clause}'\r\n    |  +-[ALIAS_REF] IdentNode: 'likes0_.likes_id as likes_id1_6_' {alias=l, className=com.twogather.twogatherwebbackend.domain.Likes, tableAlias=likes0_}\r\n    |  \\-[SQL_TOKEN] SqlFragment: 'likes0_.member_id as member_i2_6_, likes0_.store_id as store_id3_6_'\r\n    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[l], fromElementByTableAlias=[likes0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}\r\n    |  \\-[FROM_FRAGMENT] FromElement: 'likes likes0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=l,role=null,tableName=likes,tableAlias=likes0_,origin=null,columns={,className=com.twogather.twogatherwebbackend.domain.Likes}}\r\n    \\-[WHERE] SqlNode: 'WHERE'\r\n       \\-[AND] SqlNode: 'AND'\r\n          +-[EQ] BinaryLogicOperatorNode: '='\r\n          |  +-[DOT] DotNode: 'likes0_.store_id' {propertyName=storeId,dereferenceType=PRIMITIVE,getPropertyPath=store.storeId,path=l.store.storeId,tableAlias=likes0_,className=com.twogather.twogatherwebbackend.domain.Likes,classAlias=l}\r\n          |  |  +-[DOT] DotNode: 'likes0_.store_id' {propertyName=storeId,dereferenceType=UNKNOWN,getPropertyPath=store.storeId,path=l.store,tableAlias=likes0_,className=com.twogather.twogatherwebbackend.domain.Likes,classAlias=l}\r\n          |  |  |  +-[ALIAS_REF] IdentNode: 'likes0_.likes_id' {alias=l, className=com.twogather.twogatherwebbackend.domain.Likes, tableAlias=likes0_}\r\n          |  |  |  \\-[IDENT] IdentNode: 'store' {originalText=store}\r\n          |  |  \\-[IDENT] IdentNode: 'storeId' {originalText=storeId}\r\n          |  \\-[NAMED_PARAM] ParameterNode: '?' {name=storeId, expectedType=org.hibernate.type.LongType@781c2497}\r\n          \\-[EQ] BinaryLogicOperatorNode: '='\r\n             +-[DOT] DotNode: 'likes0_.member_id' {propertyName=memberId,dereferenceType=PRIMITIVE,getPropertyPath=member.memberId,path=l.member.memberId,tableAlias=likes0_,className=com.twogather.twogatherwebbackend.domain.Likes,classAlias=l}\r\n             |  +-[DOT] DotNode: 'likes0_.member_id' {propertyName=memberId,dereferenceType=UNKNOWN,getPropertyPath=member.memberId,path=l.member,tableAlias=likes0_,className=com.twogather.twogatherwebbackend.domain.Likes,classAlias=l}\r\n             |  |  +-[ALIAS_REF] IdentNode: 'likes0_.likes_id' {alias=l, className=com.twogather.twogatherwebbackend.domain.Likes, tableAlias=likes0_}\r\n             |  |  \\-[IDENT] IdentNode: 'member' {originalText=member}\r\n             |  \\-[IDENT] IdentNode: 'memberId' {originalText=memberId}\r\n             \\-[NAMED_PARAM] ParameterNode: '?' {name=memberId, expectedType=org.hibernate.type.LongType@781c2497}\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.509+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.510+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "HQL: SELECT l FROM com.twogather.twogatherwebbackend.domain.Likes l WHERE l.store.storeId = :storeId AND l.member.memberId = :memberId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.510+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.QueryTranslatorImpl",
  "message" : "SQL: select likes0_.likes_id as likes_id1_6_, likes0_.member_id as member_i2_6_, likes0_.store_id as store_id3_6_ from likes likes0_ where likes0_.store_id=? and likes0_.member_id=?",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.510+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.hql.internal.ast.ErrorTracker",
  "message" : "throwQueryException() : no errors",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.511+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Looking up named query Likes.deleteByStoreStoreIdAndMemberMemberId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.511+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.engine.transaction.internal.TransactionImpl",
  "message" : "On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.511+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.jpa.repository.query.NamedQuery",
  "message" : "Did not find named query Likes.deleteByStoreStoreIdAndMemberMemberId",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.511+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler",
  "message" : "Creating new EntityManager for shared EntityManager invocation",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.513+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.data.repository.core.support.RepositoryFactorySupport",
  "message" : "Finished creation of repository instance for com.twogather.twogatherwebbackend.repository.LikeRepository.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.517+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'likeService' via constructor to bean named 'memberRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.517+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'likeService' via constructor to bean named 'storeRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.517+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'likeService' via constructor to bean named 'likeRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.519+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'likeController' via constructor to bean named 'likeService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.520+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'menuController'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.523+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'menuController' via constructor to bean named 'menuService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.523+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeService.isMyStore(#storeId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.MenuController.deleteList(java.lang.Long,com.twogather.twogatherwebbackend.dto.menu.MenuIdList)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.523+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.MenuController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.MenuController.deleteList(java.lang.Long,com.twogather.twogatherwebbackend.dto.menu.MenuIdList)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeService.isMyStore(#storeId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.523+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeService.isMyStore(#storeId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.MenuController.updateList(java.lang.Long,com.twogather.twogatherwebbackend.dto.menu.MenuUpdateListRequest)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.524+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.MenuController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.MenuController.updateList(java.lang.Long,com.twogather.twogatherwebbackend.dto.menu.MenuUpdateListRequest)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeService.isMyStore(#storeId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.524+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'reviewController'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.527+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'reviewService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.529+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'reviewController' via constructor to bean named 'reviewService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.529+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"@reviewService.isMyReview(#reviewId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ReviewController.update(java.lang.Long,java.lang.Long,com.twogather.twogatherwebbackend.dto.review.ReviewUpdateRequest)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.530+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.ReviewController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ReviewController.update(java.lang.Long,java.lang.Long,com.twogather.twogatherwebbackend.dto.review.ReviewUpdateRequest)]] with attributes [[authorize: '@reviewService.isMyReview(#reviewId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.530+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"@reviewService.isMyReeview(#reviewId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ReviewController.delete(java.lang.Long,java.lang.String)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.530+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.ReviewController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.ReviewController.delete(java.lang.Long,java.lang.String)]] with attributes [[authorize: '@reviewService.isMyReeview(#reviewId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.531+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'storeController'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.533+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeController' via constructor to bean named 'storeService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.533+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeService.isMyStore(#storeId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreController.update(java.lang.Long,com.twogather.twogatherwebbackend.dto.store.StoreSaveUpdateRequest)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.534+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.StoreController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreController.update(java.lang.Long,com.twogather.twogatherwebbackend.dto.store.StoreSaveUpdateRequest)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeService.isMyStore(#storeId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.534+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeService.isMyStore(#storeId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreController.delete(java.lang.Long)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.534+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.StoreController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreController.delete(java.lang.Long)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeService.isMyStore(#storeId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.534+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\')\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreController.save(java.lang.Long,com.twogather.twogatherwebbackend.dto.businesshour.BusinessHourSaveUpdateListRequest,com.twogather.twogatherwebbackend.dto.store.StoreSaveUpdateRequest,com.twogather.twogatherwebbackend.dto.menu.MenuSaveListRequest,java.util.List,java.util.List)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.534+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.StoreController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreController.save(java.lang.Long,com.twogather.twogatherwebbackend.dto.businesshour.BusinessHourSaveUpdateListRequest,com.twogather.twogatherwebbackend.dto.store.StoreSaveUpdateRequest,com.twogather.twogatherwebbackend.dto.menu.MenuSaveListRequest,java.util.List,java.util.List)]] with attributes [[authorize: 'hasRole('STORE_OWNER')', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.535+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeService.isMyStore(#storeId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreController.reapply(java.lang.Long)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.535+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.StoreController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreController.reapply(java.lang.Long)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeService.isMyStore(#storeId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.535+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeOwnerService.isStoreOwner(#ownerId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreController.getMyStoreInfo(java.lang.Long,org.springframework.data.domain.Pageable)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.535+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.StoreController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreController.getMyStoreInfo(java.lang.Long,org.springframework.data.domain.Pageable)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeOwnerService.isStoreOwner(#ownerId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.538+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'storeOwnerController'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.540+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'storeOwnerService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.541+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeOwnerService' via constructor to bean named 'storeOwnerRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.541+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeOwnerService' via constructor to bean named 'memberRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.541+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeOwnerService' via constructor to bean named 'passwordEncoder'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.543+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeOwnerController' via constructor to bean named 'storeOwnerService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.543+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'storeOwnerController' via constructor to bean named 'memberService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.544+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"isAuthenticated()\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreOwnerController.verifyPassword(com.twogather.twogatherwebbackend.dto.member.VerifyPasswordRequest)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.544+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.StoreOwnerController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreOwnerController.verifyPassword(com.twogather.twogatherwebbackend.dto.member.VerifyPasswordRequest)]] with attributes [[authorize: 'isAuthenticated()', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.544+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeOwnerService.isStoreOwner(#memberId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreOwnerController.leave(java.lang.Long)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.545+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.StoreOwnerController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreOwnerController.leave(java.lang.Long)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeOwnerService.isStoreOwner(#memberId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.545+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeOwnerService.isStoreOwner(#memberId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreOwnerController.getOwnerInfo(java.lang.Long)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.545+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.StoreOwnerController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreOwnerController.getOwnerInfo(java.lang.Long)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeOwnerService.isStoreOwner(#memberId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.545+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource",
  "message" : "@org.springframework.security.access.prepost.PreAuthorize(\"hasRole(\\'STORE_OWNER\\') and @storeOwnerService.isStoreOwner(#memberId)\") found on specific method: public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreOwnerController.updateOwnerInfo(java.lang.Long,com.twogather.twogatherwebbackend.dto.member.MemberSaveUpdateRequest)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.545+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource",
  "message" : "Caching method [CacheKey[com.twogather.twogatherwebbackend.controller.StoreOwnerController; public org.springframework.http.ResponseEntity com.twogather.twogatherwebbackend.controller.StoreOwnerController.updateOwnerInfo(java.lang.Long,com.twogather.twogatherwebbackend.dto.member.MemberSaveUpdateRequest)]] with attributes [[authorize: 'hasRole('STORE_OWNER') and @storeOwnerService.isStoreOwner(#memberId)', filter: 'null', filterTarget: 'null']]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.547+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'userDetailsService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.551+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'userDetailsService' via constructor to bean named 'memberRepository'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.554+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.557+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'enableGlobalAuthenticationAutowiredConfigurer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.557+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'enableGlobalAuthenticationAutowiredConfigurer' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.558+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'initializeUserDetailsBeanManagerConfigurer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.558+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'initializeUserDetailsBeanManagerConfigurer' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.558+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'initializeAuthenticationProviderBeanManagerConfigurer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.559+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'initializeAuthenticationProviderBeanManagerConfigurer' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.560+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'authenticationManagerBuilder'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.560+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'authenticationManagerBuilder' via factory method to bean named 'objectPostProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.560+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'authenticationManagerBuilder' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.561+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'authenticationEventPublisher'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.561+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.561+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'authenticationEventPublisher' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.570+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.579+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'ignoreStaticResources'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.581+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'filterChain'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.583+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.645+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'filterChain' via factory method to bean named 'org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration.httpSecurity'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.675+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [authenticated] for Ant [pattern='/api/stores/**/comments']",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.676+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [authenticated] for Ant [pattern='/api/my/stores']",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.676+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [permitAll] for Ant [pattern='/api/stores/**', GET]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.676+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [permitAll] for Ant [pattern='/api/owners', POST]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.676+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [authenticated] for Ant [pattern='/api/stores/**/business-hours']",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.676+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [permitAll] for Ant [pattern='/api/stores/**/business-hours', GET]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.676+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [authenticated] for Ant [pattern='/api/**/categories']",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.676+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [authenticated] for Ant [pattern='/api/consumers/**']",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.676+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [permitAll] for Ant [pattern='/api/consumers', POST]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.677+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [authenticated] for Ant [pattern='/api/owners/**']",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.677+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [permitAll] for Ant [pattern='/api/email']",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.677+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [authenticated] for Ant [pattern='/api/stores/**/images']",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.677+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [permitAll] for Ant [pattern='/api/keywords', GET]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.677+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [authenticated] for Ant [pattern='/api/keywords/stores/**']",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.677+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [authenticated] for Ant [pattern='/api/stores/**/likes']",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.677+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [authenticated] for Ant [pattern='/api/stores/**/menus']",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.677+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [permitAll] for Ant [pattern='/api/stores/**/menus', GET]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.677+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource",
  "message" : "Adding web access control expression [authenticated] for Ant [pattern='/api/stores/**/reviews']",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.683+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.security.web.DefaultSecurityFilterChain",
  "message" : "Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@145ce025, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1deca369, org.springframework.security.web.context.SecurityContextPersistenceFilter@4400026, org.springframework.security.web.header.HeaderWriterFilter@189fb01b, org.springframework.web.filter.CorsFilter@2ee39e73, org.springframework.web.filter.CorsFilter@2ee39e73, org.springframework.security.web.authentication.logout.LogoutFilter@6020cd42, com.twogather.twogatherwebbackend.auth.JwtAuthenticationFilter@2d0ce8a1, com.twogather.twogatherwebbackend.auth.JwtAuthorizationFilter@2735a7dc, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@443d94ae, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@322399e6, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@549b26d7, org.springframework.security.web.session.SessionManagementFilter@77587422, org.springframework.security.web.access.ExceptionTranslationFilter@14e54a35, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4bc75792]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.684+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'delegatingApplicationListener'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.685+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'springSecurityFilterChain'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.686+09",
  "level" : "WARN",
  "thread" : "main",
  "logger" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
  "message" : "You are asking Spring Security to ignore Ant [pattern='/api/stores/**', GET]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.686+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.security.web.DefaultSecurityFilterChain",
  "message" : "Will not secure Ant [pattern='/api/stores/**', GET]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.686+09",
  "level" : "WARN",
  "thread" : "main",
  "logger" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
  "message" : "You are asking Spring Security to ignore Ant [pattern='/api/owners', POST]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.686+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.security.web.DefaultSecurityFilterChain",
  "message" : "Will not secure Ant [pattern='/api/owners', POST]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.686+09",
  "level" : "WARN",
  "thread" : "main",
  "logger" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
  "message" : "You are asking Spring Security to ignore Ant [pattern='/api/consumers', POST]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.687+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.security.web.DefaultSecurityFilterChain",
  "message" : "Will not secure Ant [pattern='/api/consumers', POST]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.687+09",
  "level" : "WARN",
  "thread" : "main",
  "logger" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
  "message" : "You are asking Spring Security to ignore Ant [pattern='/api/email']. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.687+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.security.web.DefaultSecurityFilterChain",
  "message" : "Will not secure Ant [pattern='/api/email']",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.687+09",
  "level" : "WARN",
  "thread" : "main",
  "logger" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
  "message" : "You are asking Spring Security to ignore Ant [pattern='/api/categories']. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.687+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.security.web.DefaultSecurityFilterChain",
  "message" : "Will not secure Ant [pattern='/api/categories']",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.687+09",
  "level" : "WARN",
  "thread" : "main",
  "logger" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
  "message" : "You are asking Spring Security to ignore Ant [pattern='/api/keywords', GET]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.687+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.security.web.DefaultSecurityFilterChain",
  "message" : "Will not secure Ant [pattern='/api/keywords', GET]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.687+09",
  "level" : "WARN",
  "thread" : "main",
  "logger" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
  "message" : "You are asking Spring Security to ignore Ant [pattern='/api/stores/**/menus', GET]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.687+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.security.web.DefaultSecurityFilterChain",
  "message" : "Will not secure Ant [pattern='/api/stores/**/menus', GET]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.687+09",
  "level" : "WARN",
  "thread" : "main",
  "logger" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
  "message" : "You are asking Spring Security to ignore Ant [pattern='/api/stores/**/business-hours', GET]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.687+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.security.web.DefaultSecurityFilterChain",
  "message" : "Will not secure Ant [pattern='/api/stores/**/business-hours', GET]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.691+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'webSecurityExpressionHandler'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.691+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'privilegeEvaluator'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.692+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.692+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'requestDataValueProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.693+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'preInvocationAuthorizationAdvice'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.693+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.693+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.694+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.694+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.695+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'taskExecutorBuilder'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.696+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.696+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'taskExecutorBuilder' via factory method to bean named 'spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.698+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.698+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'defaultValidator'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.698+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'defaultValidator' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.699+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator",
  "message" : "Loaded expression factory via original TCCL",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.701+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.AbstractConfigurationImpl",
  "message" : "Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.701+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.AbstractConfigurationImpl",
  "message" : "Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.701+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.AbstractConfigurationImpl",
  "message" : "Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.702+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.xml.config.ValidationXmlParser",
  "message" : "Trying to load META-INF/validation.xml for XML based Validator configuration.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.702+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.xml.config.ResourceLoaderHelper",
  "message" : "Trying to load META-INF/validation.xml via user class loader",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.702+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.xml.config.ResourceLoaderHelper",
  "message" : "Trying to load META-INF/validation.xml via TCCL",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.702+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.xml.config.ResourceLoaderHelper",
  "message" : "Trying to load META-INF/validation.xml via Hibernate Validator's class loader",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.702+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.xml.config.ValidationXmlParser",
  "message" : "No META-INF/validation.xml found. Using annotation based configuration only.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.702+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.resolver.TraversableResolvers",
  "message" : "Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.702+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.resolver.TraversableResolvers",
  "message" : "Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.703+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000252: Using org.hibernate.validator.internal.engine.DefaultPropertyNodeNameProvider as property node name provider.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.703+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator as ValidatorFactory-scoped message interpolator.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.703+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.hibernate.validator.internal.engine.resolver.JPATraversableResolver as ValidatorFactory-scoped traversable resolver.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.703+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.703+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.705+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper",
  "message" : "HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.707+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.707+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'error'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.708+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'beanNameViewResolver'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.708+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.709+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.web-org.springframework.boot.autoconfigure.web.WebProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.711+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration' via constructor to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.711+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration' via constructor to bean named 'spring.web-org.springframework.boot.autoconfigure.web.WebProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.711+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'conventionErrorViewResolver'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.712+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'errorAttributes'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'basicErrorController'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.713+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'basicErrorController' via factory method to bean named 'errorAttributes'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.714+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.715+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration' via constructor to bean named 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.715+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration' via constructor to bean named 'spring.web-org.springframework.boot.autoconfigure.web.WebProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.715+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration' via constructor to bean named 'org.springframework.beans.factory.support.DefaultListableBeanFactory@1813f3e9'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.723+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.723+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter' via constructor to bean named 'spring.web-org.springframework.boot.autoconfigure.web.WebProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.723+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter' via constructor to bean named 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.723+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter' via constructor to bean named 'org.springframework.beans.factory.support.DefaultListableBeanFactory@1813f3e9'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.724+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'openEntityManagerInViewInterceptorConfigurer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.724+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.725+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration' via constructor to bean named 'spring.jpa-org.springframework.boot.autoconfigure.orm.jpa.JpaProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.725+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'openEntityManagerInViewInterceptor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.725+09",
  "level" : "WARN",
  "thread" : "main",
  "logger" : "org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration",
  "message" : "spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.727+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'openEntityManagerInViewInterceptorConfigurer' via factory method to bean named 'openEntityManagerInViewInterceptor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.727+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.data.web.config.SpringDataWebConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.728+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.data.web.config.SpringDataWebConfiguration' via constructor to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.729+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.data.web.config.QuerydslWebConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.732+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'requestMappingHandlerAdapter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.733+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'mvcContentNegotiationManager'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.736+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'mvcConversionService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.746+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'mvcValidator'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.748+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'requestMappingHandlerAdapter' via factory method to bean named 'mvcContentNegotiationManager'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.748+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'requestMappingHandlerAdapter' via factory method to bean named 'mvcConversionService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.748+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'requestMappingHandlerAdapter' via factory method to bean named 'mvcValidator'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.748+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'requestMappingHandlerAdapter' via factory method to bean named 'mvcContentNegotiationManager'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.748+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'requestMappingHandlerAdapter' via factory method to bean named 'mvcConversionService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.748+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'requestMappingHandlerAdapter' via factory method to bean named 'mvcValidator'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.753+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'messageConverters'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.753+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.756+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'stringHttpMessageConverter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.757+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'stringHttpMessageConverter' via factory method to bean named 'environment'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'mappingJackson2HttpMessageConverter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.763+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.764+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'jacksonObjectMapper'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.764+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'standardJacksonObjectMapperBuilderCustomizer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.765+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.766+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'standardJacksonObjectMapperBuilderCustomizer' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.767+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'standardJacksonObjectMapperBuilderCustomizer' via factory method to bean named 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.768+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'jacksonObjectMapperBuilder' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.768+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'jacksonObjectMapperBuilder' via factory method to bean named 'standardJacksonObjectMapperBuilderCustomizer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.769+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'parameterNamesModule'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.769+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.775+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'jsonComponentModule'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.775+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.780+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'jsonMixinModule'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.780+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'jsonMixinModule' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.803+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'jacksonGeoModule'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.803+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.810+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'jacksonObjectMapper' via factory method to bean named 'jacksonObjectMapperBuilder'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.831+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'mappingJackson2HttpMessageConverter' via factory method to bean named 'jacksonObjectMapper'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.843+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'sortResolver'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.843+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'sortCustomizer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.843+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.844+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.data.web-org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.845+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration' via constructor to bean named 'spring.data.web-org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.847+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'pageableResolver'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.849+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'pageableCustomizer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.850+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'querydslPredicateArgumentResolver'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.851+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'querydslBindingsFactory'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.858+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'applicationTaskExecutor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.859+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'applicationTaskExecutor' via factory method to bean named 'taskExecutorBuilder'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.861+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor",
  "message" : "Initializing ExecutorService 'applicationTaskExecutor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.875+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter",
  "message" : "ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.892+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'welcomePageHandlerMapping'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.892+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'mvcResourceUrlProvider'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.895+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'welcomePageHandlerMapping' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.895+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'welcomePageHandlerMapping' via factory method to bean named 'mvcConversionService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.895+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'welcomePageHandlerMapping' via factory method to bean named 'mvcResourceUrlProvider'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.905+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'localeResolver'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.906+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'themeResolver'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.906+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'flashMapManager'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.908+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'requestMappingHandlerMapping'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.909+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'requestMappingHandlerMapping' via factory method to bean named 'mvcContentNegotiationManager'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.909+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'requestMappingHandlerMapping' via factory method to bean named 'mvcConversionService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.909+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'requestMappingHandlerMapping' via factory method to bean named 'mvcResourceUrlProvider'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.924+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "\n\tc.t.t.c.AdminController:\n\t{GET [/api/admin/stores/{type}]}: getAllStore(StoreStatus,Pageable)\n\t{PATCH [/api/admin/stores/approve/{storeId}]}: approveStore(Long)\n\t{PATCH [/api/admin/stores/reject/{storeId}]}: rejectStore(Long,RejectReason)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.927+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "\n\tc.t.t.c.BusinessHourController:\n\t{DELETE [/api/stores/{storeId}/business-hours]}: deleteList(Long,BusinessHourIdList)\n\t{PUT [/api/stores/{storeId}/business-hours]}: updateList(Long,BusinessHourSaveUpdateListRequest)\n\t{GET [/api/stores/{storeId}/business-hours]}: getBusinessHoursByStoreId(Long)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.929+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "\n\tc.t.t.c.CategoryController:\n\t{PATCH [/api/stores/{storeId}/categories/{categoryId}]}: setCategoriesForStore(Long,Long)\n\t{GET [/api/categories]}: getAllCategories()",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.930+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "\n\tc.t.t.c.CommentController:\n\t{PUT [/api/stores/{storeId}/reviews/{reviewId}/comments/{commentId}]}: update(Long,Long,Long,CommentSaveUpdateRequest)\n\t{DELETE [/api/stores/{storeId}/reviews/{reviewId}/comments/{commentId}]}: delete(Long,Long,Long)\n\t{POST [/api/stores/{storeId}/reviews/{reviewId}/comments]}: upload(Long,Long,CommentSaveUpdateRequest)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.932+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "\n\tc.t.t.c.ConsumerController:\n\t{POST [/api/consumers]}: join(MemberSaveUpdateRequest)\n\t{POST [/api/consumers/verify-password]}: verifyPassword(String)\n\t{GET [/api/consumers/{memberId}]}: getConsumerInfo(Long)\n\t{DELETE [/api/consumers/{memberId}]}: leave(Long)\n\t{PUT [/api/consumers/{memberId}]}: updateConsumerInfo(Long,MemberSaveUpdateRequest)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.932+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "\n\tc.t.t.c.EmailController:\n\t{POST [/api/email]}: sendMail(EmailRequest)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.933+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "\n\tc.t.t.c.ImageController:\n\t{DELETE [/api/stores/{storeId}/images]}: delete(Long,ImageIdList)\n\t{POST [/api/stores/{storeId}/images]}: upload(Long,List)\n\t{GET [/api/stores/{storeId}/images]}: getStoreImageInfos(Long)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.933+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "\n\tc.t.t.c.KeywordController:\n\t{PUT [/api/keywords/stores/{storeId}]}: setStoreKeywordAssociation(Long,List)\n\t{GET [/api/keywords]}: getNKeywordList(int)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.933+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "\n\tc.t.t.c.LikeController:\n\t{DELETE [/api/stores/{storeId}/likes]}: deleteStoreLike(Long)\n\t{POST [/api/stores/{storeId}/likes]}: addStoreLike(Long)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.934+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "\n\tc.t.t.c.MenuController:\n\t{DELETE [/api/stores/{storeId}/menus]}: deleteList(Long,MenuIdList)\n\t{PATCH [/api/stores/{storeId}/menus]}: updateList(Long,MenuUpdateListRequest)\n\t{GET [/api/stores/{storeId}/menus]}: getMenuByStore(Long)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.934+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "\n\tc.t.t.c.ReviewController:\n\t{PUT [/api/stores/{storeId}/reviews/{reviewId}]}: update(Long,Long,ReviewUpdateRequest)\n\t{DELETE [/api/stores/{storeId}/reviews/{reviewId}]}: delete(Long,String)\n\t{POST [/api/stores/{storeId}/reviews]}: upload(Long,ReviewSaveRequest)\n\t{GET [/api/stores/{storeId}/reviews/members/{memberId}]}: getMyReviewInfos(Long,Long,String,String,int,int)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.936+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "\n\tc.t.t.c.StoreController:\n\t{PUT [/api/stores/{storeId}]}: update(Long,StoreSaveUpdateRequest)\n\t{GET [/api/stores/test]}: test()\n\t{DELETE [/api/stores/{storeId}]}: delete(Long)\n\t{POST [/api/stores/categories/{categoryId}]}: save(Long,BusinessHourSaveUpdateListRequest,StoreSaveUpdateRequest,MenuSaveListRequest,List,List)\n\t{GET [/api/stores/search]}: getStoreInfos(Pageable,String,String,String)\n\t{PATCH [/api/stores/{storeId}]}: reapply(Long)\n\t{GET [/api/stores/{storeId}]}: getStoreInfo(Long)\n\t{GET [/api/stores/top/{type}/{count}]}: getStoreTopInfos(StoreSearchType,int)\n\t{GET [/api/my/stores]}: getMyStoreInfo(Long,Pageable)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.937+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "\n\tc.t.t.c.StoreOwnerController:\n\t{POST [/api/owners]}: join(MemberSaveUpdateRequest)\n\t{POST [/api/owners/verify-password]}: verifyPassword(VerifyPasswordRequest)\n\t{DELETE [/api/owners/{memberId}]}: leave(Long)\n\t{GET [/api/owners/{memberId}]}: getOwnerInfo(Long)\n\t{PUT [/api/owners/{memberId}]}: updateOwnerInfo(Long,MemberSaveUpdateRequest)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.939+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "\n\to.s.b.a.w.s.e.BasicErrorController:\n\t{ [/error]}: error(HttpServletRequest)\n\t{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.941+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping",
  "message" : "47 mappings in 'requestMappingHandlerMapping'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.946+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'mvcPatternParser'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.953+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'mvcUrlPathHelper'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.953+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'mvcPathMatcher'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.954+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'viewControllerHandlerMapping'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.954+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'viewControllerHandlerMapping' via factory method to bean named 'mvcConversionService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.954+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'viewControllerHandlerMapping' via factory method to bean named 'mvcResourceUrlProvider'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.954+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'beanNameHandlerMapping'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.956+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'beanNameHandlerMapping' via factory method to bean named 'mvcConversionService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.956+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'beanNameHandlerMapping' via factory method to bean named 'mvcResourceUrlProvider'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.957+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "'beanNameHandlerMapping' {}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.960+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'routerFunctionMapping'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.960+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'routerFunctionMapping' via factory method to bean named 'mvcConversionService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.960+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'routerFunctionMapping' via factory method to bean named 'mvcResourceUrlProvider'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.963+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'resourceHandlerMapping'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.964+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'resourceHandlerMapping' via factory method to bean named 'mvcContentNegotiationManager'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.964+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'resourceHandlerMapping' via factory method to bean named 'mvcConversionService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.964+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'resourceHandlerMapping' via factory method to bean named 'mvcResourceUrlProvider'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.972+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "_org.springframework.web.servlet.HandlerMapping.Mappings",
  "message" : "'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.975+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'defaultServletHandlerMapping'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.975+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'handlerFunctionAdapter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.976+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'mvcUriComponentsContributor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.977+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'mvcUriComponentsContributor' via factory method to bean named 'mvcConversionService'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.977+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'mvcUriComponentsContributor' via factory method to bean named 'requestMappingHandlerAdapter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.978+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'httpRequestHandlerAdapter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.979+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'simpleControllerHandlerAdapter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.979+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'handlerExceptionResolver'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.979+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'handlerExceptionResolver' via factory method to bean named 'mvcContentNegotiationManager'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.982+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver",
  "message" : "ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.983+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'mvcViewResolver'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.983+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'mvcViewResolver' via factory method to bean named 'mvcContentNegotiationManager'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.985+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'viewNameTranslator'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.985+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'defaultViewResolver'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.990+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'viewResolver'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.990+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'viewResolver' via factory method to bean named 'org.springframework.beans.factory.support.DefaultListableBeanFactory@1813f3e9'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.991+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'viewResolver'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.993+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.993+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.jmx-org.springframework.boot.autoconfigure.jmx.JmxProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.993+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration' via constructor to bean named 'spring.jmx-org.springframework.boot.autoconfigure.jmx.JmxProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.994+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'mbeanExporter'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.994+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'objectNamingStrategy'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.996+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'mbeanExporter' via factory method to bean named 'objectNamingStrategy'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.996+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'mbeanExporter' via factory method to bean named 'org.springframework.beans.factory.support.DefaultListableBeanFactory@1813f3e9'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:09.998+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'mbeanServer'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.000+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.jmx.support.JmxUtils",
  "message" : "Found MBeanServer: com.sun.jmx.mbeanserver.JmxMBeanServer@c818063",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.008+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.008+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'springApplicationAdminRegistrar'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.008+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'springApplicationAdminRegistrar' via factory method to bean named 'environment'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.010+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin",
  "message" : "Application Admin MBean registered with name 'org.springframework.boot:type=Admin,name=SpringApplication'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.011+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.011+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.011+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.aop.AopAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.011+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.011+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'applicationAvailability'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.013+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.013+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration$Hikari'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.013+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration$Hikari' via constructor to bean named 'dataSource'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.013+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.013+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$PooledDataSourceConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.013+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.013+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.013+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'transactionManager'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.014+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'platformTransactionManagerCustomizers'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.014+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.015+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.022+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.023+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.023+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.023+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'lifecycleProcessor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.023+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.024+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'lifecycleProcessor' via factory method to bean named 'spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.025+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.026+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.026+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.data.jpa.util.JpaMetamodelCacheCleanup'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.026+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.data.jpa.repository.support.JpaEvaluationContextExtension'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.026+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.027+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.data.web.config.ProjectingArgumentResolverRegistrar'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.027+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.028+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.028+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration' via constructor to bean named 'spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.028+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.029+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'jdbcTemplate'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.029+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.jdbc-org.springframework.boot.autoconfigure.jdbc.JdbcProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.029+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'jdbcTemplate' via factory method to bean named 'dataSource'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.029+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'jdbcTemplate' via factory method to bean named 'spring.jdbc-org.springframework.boot.autoconfigure.jdbc.JdbcProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.040+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.040+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'namedParameterJdbcTemplate'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.040+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'namedParameterJdbcTemplate' via factory method to bean named 'jdbcTemplate'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.043+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.043+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.044+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.security.servlet.SpringBootWebSecurityConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.044+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.044+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.045+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'taskSchedulerBuilder'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.045+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.046+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'taskSchedulerBuilder' via factory method to bean named 'spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.047+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$JdbcTransactionManagerConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.047+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.047+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration$CglibAutoProxyConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.047+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.047+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.047+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'transactionTemplate'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.049+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Autowiring by type from bean name 'transactionTemplate' via factory method to bean named 'transactionManager'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.050+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.051+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.051+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.beans.factory.support.DefaultListableBeanFactory",
  "message" : "Creating shared instance of singleton bean 'multipartResolver'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.058+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.jmx.export.annotation.AnnotationMBeanExporter",
  "message" : "Registering beans for JMX exposure on startup",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.058+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.jmx.export.annotation.AnnotationMBeanExporter",
  "message" : "Autodetecting user-defined JMX MBeans",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.059+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.jmx.export.annotation.AnnotationMBeanExporter",
  "message" : "Bean with name 'dataSource' has been autodetected for JMX exposure",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.062+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.jmx.export.annotation.AnnotationMBeanExporter",
  "message" : "Located MBean 'dataSource': registering with JMX server as MBean [com.zaxxer.hikari:name=dataSource,type=HikariDataSource]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.065+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.support.DefaultLifecycleProcessor",
  "message" : "Starting beans in phase -2147483647",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.065+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.support.DefaultLifecycleProcessor",
  "message" : "Successfully started bean 'springBootLoggingLifecycle'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.065+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.support.DefaultLifecycleProcessor",
  "message" : "Starting beans in phase 2147483646",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.065+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.apache.coyote.http11.Http11NioProtocol",
  "message" : "Starting ProtocolHandler [\"http-nio-8080\"]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.086+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "org.springframework.boot.web.embedded.tomcat.TomcatWebServer",
  "message" : "Tomcat started on port(s): 8080 (http) with context path ''",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.087+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.support.DefaultLifecycleProcessor",
  "message" : "Successfully started bean 'webServerStartStop'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.087+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.support.DefaultLifecycleProcessor",
  "message" : "Starting beans in phase 2147483647",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.087+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.context.support.DefaultLifecycleProcessor",
  "message" : "Successfully started bean 'webServerGracefulShutdown'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.116+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener",
  "message" : "\r\n\r\n\r\n============================\r\nCONDITIONS EVALUATION REPORT\r\n============================\r\n\r\n\r\nPositive matches:\r\n-----------------\r\n\r\n   AopAutoConfiguration matched:\r\n      - @ConditionalOnProperty (spring.aop.auto=true) matched (OnPropertyCondition)\r\n\r\n   AopAutoConfiguration.AspectJAutoProxyingConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.aspectj.weaver.Advice' (OnClassCondition)\r\n\r\n   AopAutoConfiguration.AspectJAutoProxyingConfiguration.CglibAutoProxyConfiguration matched:\r\n      - @ConditionalOnProperty (spring.aop.proxy-target-class=true) matched (OnPropertyCondition)\r\n\r\n   DataSourceAutoConfiguration matched:\r\n      - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType' (OnClassCondition)\r\n      - @ConditionalOnMissingBean (types: io.r2dbc.spi.ConnectionFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   DataSourceAutoConfiguration.PooledDataSourceConfiguration matched:\r\n      - AnyNestedCondition 1 matched 1 did not; NestedCondition on DataSourceAutoConfiguration.PooledDataSourceCondition.PooledDataSourceAvailable PooledDataSource found supported DataSource; NestedCondition on DataSourceAutoConfiguration.PooledDataSourceCondition.ExplicitType @ConditionalOnProperty (spring.datasource.type) did not find property 'type' (DataSourceAutoConfiguration.PooledDataSourceCondition)\r\n      - @ConditionalOnMissingBean (types: javax.sql.DataSource,javax.sql.XADataSource; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   DataSourceConfiguration.Hikari matched:\r\n      - @ConditionalOnClass found required class 'com.zaxxer.hikari.HikariDataSource' (OnClassCondition)\r\n      - @ConditionalOnProperty (spring.datasource.type=com.zaxxer.hikari.HikariDataSource) matched (OnPropertyCondition)\r\n      - @ConditionalOnMissingBean (types: javax.sql.DataSource; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   DataSourceInitializationConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.jdbc.datasource.init.DatabasePopulator' (OnClassCondition)\r\n      - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a single bean 'dataSource'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.sql.init.SqlDataSourceScriptDatabaseInitializer,org.springframework.boot.autoconfigure.sql.init.SqlR2dbcScriptDatabaseInitializer; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   DataSourceJmxConfiguration matched:\r\n      - @ConditionalOnProperty (spring.jmx.enabled=true) matched (OnPropertyCondition)\r\n\r\n   DataSourceJmxConfiguration.Hikari matched:\r\n      - @ConditionalOnClass found required class 'com.zaxxer.hikari.HikariDataSource' (OnClassCondition)\r\n      - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a single bean 'dataSource' (OnBeanCondition)\r\n\r\n   DataSourcePoolMetadataProvidersConfiguration.HikariPoolDataSourceMetadataProviderConfiguration matched:\r\n      - @ConditionalOnClass found required class 'com.zaxxer.hikari.HikariDataSource' (OnClassCondition)\r\n\r\n   DataSourceTransactionManagerAutoConfiguration matched:\r\n      - @ConditionalOnClass found required classes 'org.springframework.jdbc.core.JdbcTemplate', 'org.springframework.transaction.TransactionManager' (OnClassCondition)\r\n\r\n   DataSourceTransactionManagerAutoConfiguration.JdbcTransactionManagerConfiguration matched:\r\n      - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a single bean 'dataSource' (OnBeanCondition)\r\n\r\n   DispatcherServletAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)\r\n      - found 'session' scope (OnWebApplicationCondition)\r\n\r\n   DispatcherServletAutoConfiguration.DispatcherServletConfiguration matched:\r\n      - @ConditionalOnClass found required class 'javax.servlet.ServletRegistration' (OnClassCondition)\r\n      - Default DispatcherServlet did not find dispatcher servlet beans (DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition)\r\n\r\n   DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration matched:\r\n      - @ConditionalOnClass found required class 'javax.servlet.ServletRegistration' (OnClassCondition)\r\n      - DispatcherServlet Registration did not find servlet registration bean (DispatcherServletAutoConfiguration.DispatcherServletRegistrationCondition)\r\n\r\n   DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration#dispatcherServletRegistration matched:\r\n      - @ConditionalOnBean (names: dispatcherServlet types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet' (OnBeanCondition)\r\n\r\n   EmbeddedWebServerFactoryCustomizerAutoConfiguration matched:\r\n      - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)\r\n\r\n   EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration matched:\r\n      - @ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol' (OnClassCondition)\r\n\r\n   ErrorMvcAutoConfiguration matched:\r\n      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)\r\n      - found 'session' scope (OnWebApplicationCondition)\r\n\r\n   ErrorMvcAutoConfiguration#basicErrorController matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorController; SearchStrategy: current) did not find any beans (OnBeanCondition)\r\n\r\n   ErrorMvcAutoConfiguration#errorAttributes matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorAttributes; SearchStrategy: current) did not find any beans (OnBeanCondition)\r\n\r\n   ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration#conventionErrorViewResolver matched:\r\n      - @ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.servlet.error.ErrorViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration matched:\r\n      - @ConditionalOnProperty (server.error.whitelabel.enabled) matched (OnPropertyCondition)\r\n      - ErrorTemplate Missing did not find error template view (ErrorMvcAutoConfiguration.ErrorTemplateMissingCondition)\r\n\r\n   ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#beanNameViewResolver matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#defaultErrorView matched:\r\n      - @ConditionalOnMissingBean (names: error; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   GenericCacheConfiguration matched:\r\n      - Cache org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration automatic cache type (CacheCondition)\r\n\r\n   HibernateJpaAutoConfiguration matched:\r\n      - @ConditionalOnClass found required classes 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean', 'javax.persistence.EntityManager', 'org.hibernate.engine.spi.SessionImplementor' (OnClassCondition)\r\n\r\n   HibernateJpaConfiguration matched:\r\n      - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a single bean 'dataSource' (OnBeanCondition)\r\n\r\n   HttpEncodingAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.web.filter.CharacterEncodingFilter' (OnClassCondition)\r\n      - found 'session' scope (OnWebApplicationCondition)\r\n      - @ConditionalOnProperty (server.servlet.encoding.enabled) matched (OnPropertyCondition)\r\n\r\n   HttpEncodingAutoConfiguration#characterEncodingFilter matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.web.filter.CharacterEncodingFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   HttpMessageConvertersAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.http.converter.HttpMessageConverter' (OnClassCondition)\r\n      - NoneNestedConditions 0 matched 1 did not; NestedCondition on HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition.ReactiveWebApplication did not find reactive web application classes (HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition)\r\n\r\n   HttpMessageConvertersAutoConfiguration#messageConverters matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.http.HttpMessageConverters; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.http.converter.StringHttpMessageConverter' (OnClassCondition)\r\n\r\n   HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration#stringHttpMessageConverter matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.http.converter.StringHttpMessageConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   JacksonAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper' (OnClassCondition)\r\n\r\n   JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)\r\n\r\n   JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)\r\n\r\n   JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration#jacksonObjectMapperBuilder matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   JacksonAutoConfiguration.JacksonObjectMapperConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)\r\n\r\n   JacksonAutoConfiguration.JacksonObjectMapperConfiguration#jacksonObjectMapper matched:\r\n      - @ConditionalOnMissingBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   JacksonAutoConfiguration.ParameterNamesModuleConfiguration matched:\r\n      - @ConditionalOnClass found required class 'com.fasterxml.jackson.module.paramnames.ParameterNamesModule' (OnClassCondition)\r\n\r\n   JacksonAutoConfiguration.ParameterNamesModuleConfiguration#parameterNamesModule matched:\r\n      - @ConditionalOnMissingBean (types: com.fasterxml.jackson.module.paramnames.ParameterNamesModule; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration matched:\r\n      - @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper' (OnClassCondition)\r\n      - @ConditionalOnProperty (spring.mvc.converters.preferred-json-mapper=jackson) matched (OnPropertyCondition)\r\n      - @ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper' (OnBeanCondition)\r\n\r\n   JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration#mappingJackson2HttpMessageConverter matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter ignored: org.springframework.hateoas.server.mvc.TypeConstrainedMappingJackson2HttpMessageConverter,org.springframework.data.rest.webmvc.alps.AlpsJsonHttpMessageConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   JdbcTemplateAutoConfiguration matched:\r\n      - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'org.springframework.jdbc.core.JdbcTemplate' (OnClassCondition)\r\n      - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a single bean 'dataSource' (OnBeanCondition)\r\n\r\n   JdbcTemplateConfiguration matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.jdbc.core.JdbcOperations; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   JmxAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.jmx.export.MBeanExporter' (OnClassCondition)\r\n      - @ConditionalOnProperty (spring.jmx.enabled=true) matched (OnPropertyCondition)\r\n\r\n   JmxAutoConfiguration#mbeanExporter matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: current) did not find any beans (OnBeanCondition)\r\n\r\n   JmxAutoConfiguration#mbeanServer matched:\r\n      - @ConditionalOnMissingBean (types: javax.management.MBeanServer; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   JmxAutoConfiguration#objectNamingStrategy matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.jmx.export.naming.ObjectNamingStrategy; SearchStrategy: current) did not find any beans (OnBeanCondition)\r\n\r\n   JpaBaseConfiguration#entityManagerFactory matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean,javax.persistence.EntityManagerFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   JpaBaseConfiguration#entityManagerFactoryBuilder matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   JpaBaseConfiguration#jpaVendorAdapter matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.orm.jpa.JpaVendorAdapter; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   JpaBaseConfiguration#transactionManager matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.transaction.TransactionManager; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   JpaBaseConfiguration.JpaWebConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer' (OnClassCondition)\r\n      - found 'session' scope (OnWebApplicationCondition)\r\n      - @ConditionalOnProperty (spring.jpa.open-in-view=true) matched (OnPropertyCondition)\r\n      - @ConditionalOnMissingBean (types: org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor,org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   JpaRepositoriesAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.data.jpa.repository.JpaRepository' (OnClassCondition)\r\n      - @ConditionalOnProperty (spring.data.jpa.repositories.enabled=true) matched (OnPropertyCondition)\r\n      - @ConditionalOnBean (types: javax.sql.DataSource; SearchStrategy: all) found bean 'dataSource'; @ConditionalOnMissingBean (types: org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean,org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   JtaAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'javax.transaction.Transaction' (OnClassCondition)\r\n      - @ConditionalOnProperty (spring.jta.enabled) matched (OnPropertyCondition)\r\n\r\n   LifecycleAutoConfiguration#defaultLifecycleProcessor matched:\r\n      - @ConditionalOnMissingBean (names: lifecycleProcessor; SearchStrategy: current) did not find any beans (OnBeanCondition)\r\n\r\n   MailSenderAutoConfiguration matched:\r\n      - @ConditionalOnClass found required classes 'javax.mail.internet.MimeMessage', 'javax.activation.MimeType', 'org.springframework.mail.MailSender' (OnClassCondition)\r\n      - AnyNestedCondition 1 matched 1 did not; NestedCondition on MailSenderAutoConfiguration.MailSenderCondition.JndiNameProperty @ConditionalOnProperty (spring.mail.jndi-name) did not find property 'jndi-name'; NestedCondition on MailSenderAutoConfiguration.MailSenderCondition.HostProperty @ConditionalOnProperty (spring.mail.host) matched (MailSenderAutoConfiguration.MailSenderCondition)\r\n      - @ConditionalOnMissingBean (types: org.springframework.mail.MailSender; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   MailSenderPropertiesConfiguration matched:\r\n      - @ConditionalOnProperty (spring.mail.host) matched (OnPropertyCondition)\r\n\r\n   MailSenderPropertiesConfiguration#mailSender matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.mail.javamail.JavaMailSender; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   MultipartAutoConfiguration matched:\r\n      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.multipart.support.StandardServletMultipartResolver', 'javax.servlet.MultipartConfigElement' (OnClassCondition)\r\n      - found 'session' scope (OnWebApplicationCondition)\r\n      - @ConditionalOnProperty (spring.servlet.multipart.enabled) matched (OnPropertyCondition)\r\n\r\n   MultipartAutoConfiguration#multipartConfigElement matched:\r\n      - @ConditionalOnMissingBean (types: javax.servlet.MultipartConfigElement,org.springframework.web.multipart.commons.CommonsMultipartResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   MultipartAutoConfiguration#multipartResolver matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   NamedParameterJdbcTemplateConfiguration matched:\r\n      - @ConditionalOnSingleCandidate (types: org.springframework.jdbc.core.JdbcTemplate; SearchStrategy: all) found a single bean 'jdbcTemplate'; @ConditionalOnMissingBean (types: org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   NoOpCacheConfiguration matched:\r\n      - Cache org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration automatic cache type (CacheCondition)\r\n\r\n   PersistenceExceptionTranslationAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor' (OnClassCondition)\r\n\r\n   PersistenceExceptionTranslationAutoConfiguration#persistenceExceptionTranslationPostProcessor matched:\r\n      - @ConditionalOnProperty (spring.dao.exceptiontranslation.enabled) matched (OnPropertyCondition)\r\n      - @ConditionalOnMissingBean (types: org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans (OnBeanCondition)\r\n\r\n   RestTemplateAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate' (OnClassCondition)\r\n      - NoneNestedConditions 0 matched 1 did not; NestedCondition on RestTemplateAutoConfiguration.NotReactiveWebApplicationCondition.ReactiveWebApplication did not find reactive web application classes (RestTemplateAutoConfiguration.NotReactiveWebApplicationCondition)\r\n\r\n   RestTemplateAutoConfiguration#restTemplateBuilder matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.boot.web.client.RestTemplateBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   RestTemplateAutoConfiguration#restTemplateBuilderConfigurer matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   SecurityAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.security.authentication.DefaultAuthenticationEventPublisher' (OnClassCondition)\r\n\r\n   SecurityAutoConfiguration#authenticationEventPublisher matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.security.authentication.AuthenticationEventPublisher; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   SecurityFilterAutoConfiguration matched:\r\n      - @ConditionalOnClass found required classes 'org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer', 'org.springframework.security.config.http.SessionCreationPolicy' (OnClassCondition)\r\n      - found 'session' scope (OnWebApplicationCondition)\r\n\r\n   SecurityFilterAutoConfiguration#securityFilterChainRegistration matched:\r\n      - @ConditionalOnBean (names: springSecurityFilterChain; SearchStrategy: all) found bean 'springSecurityFilterChain' (OnBeanCondition)\r\n\r\n   ServletWebServerFactoryAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'javax.servlet.ServletRequest' (OnClassCondition)\r\n      - found 'session' scope (OnWebApplicationCondition)\r\n\r\n   ServletWebServerFactoryAutoConfiguration#tomcatServletWebServerFactoryCustomizer matched:\r\n      - @ConditionalOnClass found required class 'org.apache.catalina.startup.Tomcat' (OnClassCondition)\r\n\r\n   ServletWebServerFactoryConfiguration.EmbeddedTomcat matched:\r\n      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol' (OnClassCondition)\r\n      - @ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.server.ServletWebServerFactory; SearchStrategy: current) did not find any beans (OnBeanCondition)\r\n\r\n   SimpleCacheConfiguration matched:\r\n      - Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration automatic cache type (CacheCondition)\r\n\r\n   SpringApplicationAdminJmxAutoConfiguration matched:\r\n      - @ConditionalOnProperty (spring.application.admin.enabled=true) matched (OnPropertyCondition)\r\n\r\n   SpringApplicationAdminJmxAutoConfiguration#springApplicationAdminRegistrar matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   SpringBootWebSecurityConfiguration matched:\r\n      - found 'session' scope (OnWebApplicationCondition)\r\n\r\n   SpringBootWebSecurityConfiguration.ErrorPageSecurityFilterConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.security.web.access.WebInvocationPrivilegeEvaluator' (OnClassCondition)\r\n      - @ConditionalOnBean (types: org.springframework.security.web.access.WebInvocationPrivilegeEvaluator; SearchStrategy: all) found bean 'privilegeEvaluator' (OnBeanCondition)\r\n\r\n   SpringDataWebAutoConfiguration matched:\r\n      - @ConditionalOnClass found required classes 'org.springframework.data.web.PageableHandlerMethodArgumentResolver', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer' (OnClassCondition)\r\n      - found 'session' scope (OnWebApplicationCondition)\r\n      - @ConditionalOnMissingBean (types: org.springframework.data.web.PageableHandlerMethodArgumentResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   SpringDataWebAutoConfiguration#pageableCustomizer matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.data.web.config.PageableHandlerMethodArgumentResolverCustomizer; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   SpringDataWebAutoConfiguration#sortCustomizer matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.data.web.config.SortHandlerMethodArgumentResolverCustomizer; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   SqlInitializationAutoConfiguration matched:\r\n      - @ConditionalOnProperty (spring.sql.init.enabled) matched (OnPropertyCondition)\r\n      - NoneNestedConditions 0 matched 1 did not; NestedCondition on SqlInitializationAutoConfiguration.SqlInitializationModeCondition.ModeIsNever @ConditionalOnProperty (spring.sql.init.mode=never) did not find property 'mode' (SqlInitializationAutoConfiguration.SqlInitializationModeCondition)\r\n\r\n   TaskExecutionAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor' (OnClassCondition)\r\n\r\n   TaskExecutionAutoConfiguration#applicationTaskExecutor matched:\r\n      - @ConditionalOnMissingBean (types: java.util.concurrent.Executor; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   TaskExecutionAutoConfiguration#taskExecutorBuilder matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.boot.task.TaskExecutorBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   TaskSchedulingAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler' (OnClassCondition)\r\n\r\n   TaskSchedulingAutoConfiguration#taskSchedulerBuilder matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.boot.task.TaskSchedulerBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   TransactionAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'org.springframework.transaction.PlatformTransactionManager' (OnClassCondition)\r\n\r\n   TransactionAutoConfiguration#platformTransactionManagerCustomizers matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   TransactionAutoConfiguration.EnableTransactionManagementConfiguration matched:\r\n      - @ConditionalOnBean (types: org.springframework.transaction.TransactionManager; SearchStrategy: all) found bean 'transactionManager'; @ConditionalOnMissingBean (types: org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration matched:\r\n      - @ConditionalOnProperty (spring.aop.proxy-target-class=true) matched (OnPropertyCondition)\r\n\r\n   TransactionAutoConfiguration.TransactionTemplateConfiguration matched:\r\n      - @ConditionalOnSingleCandidate (types: org.springframework.transaction.PlatformTransactionManager; SearchStrategy: all) found a single bean 'transactionManager' (OnBeanCondition)\r\n\r\n   TransactionAutoConfiguration.TransactionTemplateConfiguration#transactionTemplate matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.transaction.support.TransactionOperations; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   ValidationAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class 'javax.validation.executable.ExecutableValidator' (OnClassCondition)\r\n      - @ConditionalOnResource found location classpath:META-INF/services/javax.validation.spi.ValidationProvider (OnResourceCondition)\r\n\r\n   ValidationAutoConfiguration#defaultValidator matched:\r\n      - @ConditionalOnMissingBean (types: javax.validation.Validator; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   ValidationAutoConfiguration#methodValidationPostProcessor matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.validation.beanvalidation.MethodValidationPostProcessor; SearchStrategy: current) did not find any beans (OnBeanCondition)\r\n\r\n   WebMvcAutoConfiguration matched:\r\n      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer' (OnClassCondition)\r\n      - found 'session' scope (OnWebApplicationCondition)\r\n      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   WebMvcAutoConfiguration#formContentFilter matched:\r\n      - @ConditionalOnProperty (spring.mvc.formcontent.filter.enabled) matched (OnPropertyCondition)\r\n      - @ConditionalOnMissingBean (types: org.springframework.web.filter.FormContentFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   WebMvcAutoConfiguration.EnableWebMvcConfiguration#flashMapManager matched:\r\n      - @ConditionalOnMissingBean (names: flashMapManager; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   WebMvcAutoConfiguration.EnableWebMvcConfiguration#localeResolver matched:\r\n      - @ConditionalOnMissingBean (names: localeResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   WebMvcAutoConfiguration.EnableWebMvcConfiguration#themeResolver matched:\r\n      - @ConditionalOnMissingBean (names: themeResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#defaultViewResolver matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.InternalResourceViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#requestContextFilter matched:\r\n      - @ConditionalOnMissingBean (types: org.springframework.web.context.request.RequestContextListener,org.springframework.web.filter.RequestContextFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#viewResolver matched:\r\n      - @ConditionalOnBean (types: org.springframework.web.servlet.ViewResolver; SearchStrategy: all) found beans 'defaultViewResolver', 'beanNameViewResolver', 'mvcViewResolver'; @ConditionalOnMissingBean (names: viewResolver types: org.springframework.web.servlet.view.ContentNegotiatingViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   WebSocketServletAutoConfiguration matched:\r\n      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'javax.websocket.server.ServerContainer' (OnClassCondition)\r\n      - found 'session' scope (OnWebApplicationCondition)\r\n\r\n   WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration matched:\r\n      - @ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.tomcat.websocket.server.WsSci' (OnClassCondition)\r\n\r\n   WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration#websocketServletWebServerCustomizer matched:\r\n      - @ConditionalOnMissingBean (names: websocketServletWebServerCustomizer; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n\r\nNegative matches:\r\n-----------------\r\n\r\n   ActiveMQAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory' (OnClassCondition)\r\n\r\n   AopAutoConfiguration.AspectJAutoProxyingConfiguration.JdkDynamicAutoProxyConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnProperty (spring.aop.proxy-target-class=false) did not find property 'proxy-target-class' (OnPropertyCondition)\r\n\r\n   AopAutoConfiguration.ClassProxyingConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnMissingClass found unwanted class 'org.aspectj.weaver.Advice' (OnClassCondition)\r\n\r\n   ArtemisAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory' (OnClassCondition)\r\n\r\n   AtomikosJtaConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.atomikos.icatch.jta.UserTransactionManager' (OnClassCondition)\r\n\r\n   BatchAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.batch.core.launch.JobLauncher' (OnClassCondition)\r\n\r\n   Cache2kCacheConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.cache2k.Cache2kBuilder' (OnClassCondition)\r\n\r\n   CacheAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnBean (types: org.springframework.cache.interceptor.CacheAspectSupport; SearchStrategy: all) did not find any beans of type org.springframework.cache.interceptor.CacheAspectSupport (OnBeanCondition)\r\n      Matched:\r\n         - @ConditionalOnClass found required class 'org.springframework.cache.CacheManager' (OnClassCondition)\r\n\r\n   CacheAutoConfiguration.CacheManagerEntityManagerFactoryDependsOnPostProcessor:\r\n      Did not match:\r\n         - Ancestor org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration did not match (ConditionEvaluationReport.AncestorsMatchedCondition)\r\n      Matched:\r\n         - @ConditionalOnClass found required class 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean' (OnClassCondition)\r\n\r\n   CaffeineCacheConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.github.benmanes.caffeine.cache.Caffeine' (OnClassCondition)\r\n\r\n   CassandraAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)\r\n\r\n   CassandraDataAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)\r\n\r\n   CassandraReactiveDataAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)\r\n\r\n   CassandraReactiveRepositoriesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.data.cassandra.ReactiveSession' (OnClassCondition)\r\n\r\n   CassandraRepositoriesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)\r\n\r\n   ClientHttpConnectorAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)\r\n\r\n   CodecsAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)\r\n\r\n   CouchbaseAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)\r\n\r\n   CouchbaseCacheConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)\r\n\r\n   CouchbaseDataAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)\r\n\r\n   CouchbaseReactiveDataAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)\r\n\r\n   CouchbaseReactiveRepositoriesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)\r\n\r\n   CouchbaseRepositoriesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)\r\n\r\n   DataSourceAutoConfiguration.EmbeddedDatabaseConfiguration:\r\n      Did not match:\r\n         - EmbeddedDataSource spring.datasource.url is set (DataSourceAutoConfiguration.EmbeddedDatabaseCondition)\r\n\r\n   DataSourceConfiguration.Dbcp2:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.apache.commons.dbcp2.BasicDataSource' (OnClassCondition)\r\n\r\n   DataSourceConfiguration.Generic:\r\n      Did not match:\r\n         - @ConditionalOnProperty (spring.datasource.type) did not find property 'spring.datasource.type' (OnPropertyCondition)\r\n\r\n   DataSourceConfiguration.OracleUcp:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required classes 'oracle.ucp.jdbc.PoolDataSourceImpl', 'oracle.jdbc.OracleConnection' (OnClassCondition)\r\n\r\n   DataSourceConfiguration.Tomcat:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.apache.tomcat.jdbc.pool.DataSource' (OnClassCondition)\r\n\r\n   DataSourceJmxConfiguration.TomcatDataSourceJmxConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.apache.tomcat.jdbc.pool.DataSourceProxy' (OnClassCondition)\r\n\r\n   DataSourcePoolMetadataProvidersConfiguration.CommonsDbcp2PoolDataSourceMetadataProviderConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.apache.commons.dbcp2.BasicDataSource' (OnClassCondition)\r\n\r\n   DataSourcePoolMetadataProvidersConfiguration.OracleUcpPoolDataSourceMetadataProviderConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required classes 'oracle.ucp.jdbc.PoolDataSource', 'oracle.jdbc.OracleConnection' (OnClassCondition)\r\n\r\n   DataSourcePoolMetadataProvidersConfiguration.TomcatDataSourcePoolMetadataProviderConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.apache.tomcat.jdbc.pool.DataSource' (OnClassCondition)\r\n\r\n   DataSourceTransactionManagerAutoConfiguration.JdbcTransactionManagerConfiguration#transactionManager:\r\n      Did not match:\r\n         - @ConditionalOnMissingBean (types: org.springframework.transaction.TransactionManager; SearchStrategy: all) found beans of type 'org.springframework.transaction.TransactionManager' transactionManager (OnBeanCondition)\r\n\r\n   DispatcherServletAutoConfiguration.DispatcherServletConfiguration#multipartResolver:\r\n      Did not match:\r\n         - @ConditionalOnBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans of type org.springframework.web.multipart.MultipartResolver (OnBeanCondition)\r\n\r\n   EhCacheCacheConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'net.sf.ehcache.Cache' (OnClassCondition)\r\n\r\n   ElasticsearchDataAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate' (OnClassCondition)\r\n\r\n   ElasticsearchRepositoriesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.Client' (OnClassCondition)\r\n\r\n   ElasticsearchRestClientAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClientBuilder' (OnClassCondition)\r\n\r\n   EmbeddedLdapAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.unboundid.ldap.listener.InMemoryDirectoryServer' (OnClassCondition)\r\n\r\n   EmbeddedMongoAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.mongodb.MongoClientSettings' (OnClassCondition)\r\n\r\n   EmbeddedWebServerFactoryCustomizerAutoConfiguration.JettyWebServerFactoryCustomizerConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.webapp.WebAppContext' (OnClassCondition)\r\n\r\n   EmbeddedWebServerFactoryCustomizerAutoConfiguration.NettyWebServerFactoryCustomizerConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'reactor.netty.http.server.HttpServer' (OnClassCondition)\r\n\r\n   EmbeddedWebServerFactoryCustomizerAutoConfiguration.UndertowWebServerFactoryCustomizerConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode' (OnClassCondition)\r\n\r\n   ErrorWebFluxAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer' (OnClassCondition)\r\n\r\n   FlywayAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway' (OnClassCondition)\r\n\r\n   FreeMarkerAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'freemarker.template.Configuration' (OnClassCondition)\r\n\r\n   GraphQlAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)\r\n\r\n   GraphQlQueryByExampleAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)\r\n\r\n   GraphQlQuerydslAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)\r\n\r\n   GraphQlRSocketAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)\r\n\r\n   GraphQlReactiveQueryByExampleAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)\r\n\r\n   GraphQlReactiveQuerydslAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)\r\n\r\n   GraphQlWebFluxAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)\r\n\r\n   GraphQlWebFluxSecurityAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)\r\n\r\n   GraphQlWebMvcAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)\r\n\r\n   GraphQlWebMvcSecurityAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)\r\n\r\n   GroovyTemplateAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'groovy.text.markup.MarkupTemplateEngine' (OnClassCondition)\r\n\r\n   GsonAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.google.gson.Gson' (OnClassCondition)\r\n\r\n   GsonHttpMessageConvertersConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.google.gson.Gson' (OnClassCondition)\r\n\r\n   H2ConsoleAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnProperty (spring.h2.console.enabled=true) did not find property 'enabled' (OnPropertyCondition)\r\n      Matched:\r\n         - @ConditionalOnClass found required class 'org.h2.server.web.WebServlet' (OnClassCondition)\r\n         - found 'session' scope (OnWebApplicationCondition)\r\n\r\n   HazelcastAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)\r\n\r\n   HazelcastCacheConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)\r\n\r\n   HazelcastJpaDependencyAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)\r\n\r\n   HttpHandlerAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler' (OnClassCondition)\r\n\r\n   HypermediaAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.hateoas.EntityModel' (OnClassCondition)\r\n\r\n   InfinispanCacheConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.infinispan.spring.embedded.provider.SpringEmbeddedCacheManager' (OnClassCondition)\r\n\r\n   InfluxDbAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.influxdb.InfluxDB' (OnClassCondition)\r\n\r\n   IntegrationAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.integration.config.EnableIntegration' (OnClassCondition)\r\n\r\n   JCacheCacheConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'javax.cache.Caching' (OnClassCondition)\r\n\r\n   JacksonHttpMessageConvertersConfiguration.MappingJackson2XmlHttpMessageConverterConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.fasterxml.jackson.dataformat.xml.XmlMapper' (OnClassCondition)\r\n\r\n   JdbcRepositoriesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration' (OnClassCondition)\r\n\r\n   JerseyAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.glassfish.jersey.server.spring.SpringComponentProvider' (OnClassCondition)\r\n\r\n   JmsAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'javax.jms.Message' (OnClassCondition)\r\n\r\n   JndiConnectionFactoryAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.jms.core.JmsTemplate' (OnClassCondition)\r\n\r\n   JndiDataSourceAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnProperty (spring.datasource.jndi-name) did not find property 'jndi-name' (OnPropertyCondition)\r\n      Matched:\r\n         - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType' (OnClassCondition)\r\n\r\n   JndiJtaConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnJndi JNDI environment is not available (OnJndiCondition)\r\n      Matched:\r\n         - @ConditionalOnClass found required class 'org.springframework.transaction.jta.JtaTransactionManager' (OnClassCondition)\r\n\r\n   JooqAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.jooq.DSLContext' (OnClassCondition)\r\n\r\n   JpaRepositoriesAutoConfiguration#entityManagerFactoryBootstrapExecutorCustomizer:\r\n      Did not match:\r\n         - AnyNestedCondition 0 matched 2 did not; NestedCondition on JpaRepositoriesAutoConfiguration.BootstrapExecutorCondition.LazyBootstrapMode @ConditionalOnProperty (spring.data.jpa.repositories.bootstrap-mode=lazy) did not find property 'bootstrap-mode'; NestedCondition on JpaRepositoriesAutoConfiguration.BootstrapExecutorCondition.DeferredBootstrapMode @ConditionalOnProperty (spring.data.jpa.repositories.bootstrap-mode=deferred) did not find property 'bootstrap-mode' (JpaRepositoriesAutoConfiguration.BootstrapExecutorCondition)\r\n\r\n   JsonbAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'javax.json.bind.Jsonb' (OnClassCondition)\r\n\r\n   JsonbHttpMessageConvertersConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'javax.json.bind.Jsonb' (OnClassCondition)\r\n\r\n   KafkaAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.kafka.core.KafkaTemplate' (OnClassCondition)\r\n\r\n   LdapAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.ldap.core.ContextSource' (OnClassCondition)\r\n\r\n   LdapRepositoriesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.data.ldap.repository.LdapRepository' (OnClassCondition)\r\n\r\n   LiquibaseAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'liquibase.change.DatabaseChange' (OnClassCondition)\r\n\r\n   MailSenderJndiConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnProperty (spring.mail.jndi-name) did not find property 'jndi-name' (OnPropertyCondition)\r\n      Matched:\r\n         - @ConditionalOnClass found required class 'javax.mail.Session' (OnClassCondition)\r\n\r\n   MailSenderValidatorAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnProperty (spring.mail.test-connection) did not find property 'test-connection' (OnPropertyCondition)\r\n\r\n   MessageSourceAutoConfiguration:\r\n      Did not match:\r\n         - ResourceBundle did not find bundle with basename messages (MessageSourceAutoConfiguration.ResourceBundleCondition)\r\n\r\n   MongoAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient' (OnClassCondition)\r\n\r\n   MongoDataAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient' (OnClassCondition)\r\n\r\n   MongoReactiveAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)\r\n\r\n   MongoReactiveDataAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)\r\n\r\n   MongoReactiveRepositoriesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)\r\n\r\n   MongoRepositoriesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient' (OnClassCondition)\r\n\r\n   MustacheAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.samskivert.mustache.Mustache' (OnClassCondition)\r\n\r\n   Neo4jAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.neo4j.driver.Driver' (OnClassCondition)\r\n\r\n   Neo4jDataAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.neo4j.driver.Driver' (OnClassCondition)\r\n\r\n   Neo4jReactiveDataAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.neo4j.driver.Driver' (OnClassCondition)\r\n\r\n   Neo4jReactiveRepositoriesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.neo4j.driver.Driver' (OnClassCondition)\r\n\r\n   Neo4jRepositoriesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.neo4j.driver.Driver' (OnClassCondition)\r\n\r\n   NettyAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'io.netty.util.NettyRuntime' (OnClassCondition)\r\n\r\n   OAuth2ClientAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.security.oauth2.client.registration.ClientRegistration' (OnClassCondition)\r\n\r\n   OAuth2ResourceServerAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken' (OnClassCondition)\r\n\r\n   ProjectInfoAutoConfiguration#buildProperties:\r\n      Did not match:\r\n         - @ConditionalOnResource did not find resource '${spring.info.build.location:classpath:META-INF/build-info.properties}' (OnResourceCondition)\r\n\r\n   ProjectInfoAutoConfiguration#gitProperties:\r\n      Did not match:\r\n         - GitResource did not find git info at classpath:git.properties (ProjectInfoAutoConfiguration.GitResourceAvailableCondition)\r\n\r\n   QuartzAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.quartz.Scheduler' (OnClassCondition)\r\n\r\n   R2dbcAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory' (OnClassCondition)\r\n\r\n   R2dbcDataAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.data.r2dbc.core.R2dbcEntityTemplate' (OnClassCondition)\r\n\r\n   R2dbcInitializationConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required classes 'io.r2dbc.spi.ConnectionFactory', 'org.springframework.r2dbc.connection.init.DatabasePopulator' (OnClassCondition)\r\n\r\n   R2dbcRepositoriesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory' (OnClassCondition)\r\n\r\n   R2dbcTransactionManagerAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.r2dbc.connection.R2dbcTransactionManager' (OnClassCondition)\r\n\r\n   RSocketGraphQlClientAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)\r\n\r\n   RSocketMessagingAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'io.rsocket.RSocket' (OnClassCondition)\r\n\r\n   RSocketRequesterAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'io.rsocket.RSocket' (OnClassCondition)\r\n\r\n   RSocketSecurityAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor' (OnClassCondition)\r\n\r\n   RSocketServerAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'io.rsocket.core.RSocketServer' (OnClassCondition)\r\n\r\n   RSocketStrategiesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'io.netty.buffer.PooledByteBufAllocator' (OnClassCondition)\r\n\r\n   RabbitAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.rabbitmq.client.Channel' (OnClassCondition)\r\n\r\n   ReactiveElasticsearchRepositoriesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.client.reactive.ReactiveElasticsearchClient' (OnClassCondition)\r\n\r\n   ReactiveElasticsearchRestClientAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'reactor.netty.http.client.HttpClient' (OnClassCondition)\r\n\r\n   ReactiveMultipartAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer' (OnClassCondition)\r\n\r\n   ReactiveOAuth2ClientAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)\r\n\r\n   ReactiveOAuth2ResourceServerAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnWebApplication did not find reactive web application classes (OnWebApplicationCondition)\r\n\r\n   ReactiveSecurityAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)\r\n\r\n   ReactiveUserDetailsServiceAutoConfiguration:\r\n      Did not match:\r\n         - AnyNestedCondition 0 matched 2 did not; NestedCondition on ReactiveUserDetailsServiceAutoConfiguration.ReactiveUserDetailsServiceCondition.ReactiveWebApplicationCondition did not find reactive web application classes; NestedCondition on ReactiveUserDetailsServiceAutoConfiguration.ReactiveUserDetailsServiceCondition.RSocketSecurityEnabledCondition @ConditionalOnBean (types: org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler; SearchStrategy: all) did not find any beans of type org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler (ReactiveUserDetailsServiceAutoConfiguration.ReactiveUserDetailsServiceCondition)\r\n      Matched:\r\n         - @ConditionalOnClass found required class 'org.springframework.security.authentication.ReactiveAuthenticationManager' (OnClassCondition)\r\n\r\n   ReactiveWebServerFactoryAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnWebApplication did not find reactive web application classes (OnWebApplicationCondition)\r\n\r\n   RedisAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.core.RedisOperations' (OnClassCondition)\r\n\r\n   RedisCacheConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory' (OnClassCondition)\r\n\r\n   RedisReactiveAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)\r\n\r\n   RedisRepositoriesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.repository.configuration.EnableRedisRepositories' (OnClassCondition)\r\n\r\n   RepositoryRestMvcAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration' (OnClassCondition)\r\n\r\n   Saml2RelyingPartyAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository' (OnClassCondition)\r\n\r\n   SecurityDataConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.security.data.repository.query.SecurityEvaluationContextExtension' (OnClassCondition)\r\n\r\n   SendGridAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'com.sendgrid.SendGrid' (OnClassCondition)\r\n\r\n   ServletWebServerFactoryAutoConfiguration.ForwardedHeaderFilterConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnProperty (server.forward-headers-strategy=framework) did not find property 'server.forward-headers-strategy' (OnPropertyCondition)\r\n\r\n   ServletWebServerFactoryConfiguration.EmbeddedJetty:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.webapp.WebAppContext' (OnClassCondition)\r\n\r\n   ServletWebServerFactoryConfiguration.EmbeddedUndertow:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode' (OnClassCondition)\r\n\r\n   SessionAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.session.Session' (OnClassCondition)\r\n\r\n   SolrAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.impl.CloudSolrClient' (OnClassCondition)\r\n\r\n   SpringBootWebSecurityConfiguration.SecurityFilterChainConfiguration:\r\n      Did not match:\r\n         - AllNestedConditions 1 matched 1 did not; NestedCondition on DefaultWebSecurityCondition.Beans @ConditionalOnMissingBean (types: org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter,org.springframework.security.web.SecurityFilterChain; SearchStrategy: all) found beans of type 'org.springframework.security.web.SecurityFilterChain' filterChain; NestedCondition on DefaultWebSecurityCondition.Classes @ConditionalOnClass found required classes 'org.springframework.security.web.SecurityFilterChain', 'org.springframework.security.config.annotation.web.builders.HttpSecurity' (DefaultWebSecurityCondition)\r\n\r\n   SpringBootWebSecurityConfiguration.WebSecurityEnablerConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnMissingBean (names: springSecurityFilterChain; SearchStrategy: all) found beans named springSecurityFilterChain (OnBeanCondition)\r\n      Matched:\r\n         - @ConditionalOnClass found required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity' (OnClassCondition)\r\n\r\n   TaskSchedulingAutoConfiguration#scheduledBeanLazyInitializationExcludeFilter:\r\n      Did not match:\r\n         - @ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) did not find any beans named org.springframework.context.annotation.internalScheduledAnnotationProcessor (OnBeanCondition)\r\n\r\n   TaskSchedulingAutoConfiguration#taskScheduler:\r\n      Did not match:\r\n         - @ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) did not find any beans named org.springframework.context.annotation.internalScheduledAnnotationProcessor (OnBeanCondition)\r\n\r\n   ThymeleafAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.thymeleaf.spring5.SpringTemplateEngine' (OnClassCondition)\r\n\r\n   TransactionAutoConfiguration#transactionalOperator:\r\n      Did not match:\r\n         - @ConditionalOnSingleCandidate (types: org.springframework.transaction.ReactiveTransactionManager; SearchStrategy: all) did not find any beans (OnBeanCondition)\r\n\r\n   TransactionAutoConfiguration.EnableTransactionManagementConfiguration.JdkDynamicAutoProxyConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnProperty (spring.aop.proxy-target-class=false) did not find property 'proxy-target-class' (OnPropertyCondition)\r\n\r\n   UserDetailsServiceAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnMissingBean (types: org.springframework.security.authentication.AuthenticationManager,org.springframework.security.authentication.AuthenticationProvider,org.springframework.security.core.userdetails.UserDetailsService,org.springframework.security.authentication.AuthenticationManagerResolver,org.springframework.security.oauth2.jwt.JwtDecoder,org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenIntrospector,org.springframework.security.oauth2.client.registration.ClientRegistrationRepository,org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository; SearchStrategy: all) found beans of type 'org.springframework.security.core.userdetails.UserDetailsService' userDetailsService (OnBeanCondition)\r\n      Matched:\r\n         - @ConditionalOnClass found required class 'org.springframework.security.authentication.AuthenticationManager' (OnClassCondition)\r\n\r\n   WebClientAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)\r\n\r\n   WebFluxAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer' (OnClassCondition)\r\n\r\n   WebMvcAutoConfiguration#hiddenHttpMethodFilter:\r\n      Did not match:\r\n         - @ConditionalOnProperty (spring.mvc.hiddenmethod.filter.enabled) did not find property 'enabled' (OnPropertyCondition)\r\n\r\n   WebMvcAutoConfiguration.ResourceChainCustomizerConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnEnabledResourceChain did not find class org.webjars.WebJarAssetLocator (OnEnabledResourceChainCondition)\r\n\r\n   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#beanNameViewResolver:\r\n      Did not match:\r\n         - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) found beans of type 'org.springframework.web.servlet.view.BeanNameViewResolver' beanNameViewResolver (OnBeanCondition)\r\n\r\n   WebServiceTemplateAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.oxm.Marshaller' (OnClassCondition)\r\n\r\n   WebServicesAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.ws.transport.http.MessageDispatcherServlet' (OnClassCondition)\r\n\r\n   WebSessionIdResolverAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Mono' (OnClassCondition)\r\n\r\n   WebSocketMessagingAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer' (OnClassCondition)\r\n\r\n   WebSocketReactiveAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnWebApplication did not find reactive web application classes (OnWebApplicationCondition)\r\n\r\n   WebSocketServletAutoConfiguration.Jetty10WebSocketConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required classes 'org.eclipse.jetty.websocket.javax.server.internal.JavaxWebSocketServerContainer', 'org.eclipse.jetty.websocket.server.JettyWebSocketServerContainer' (OnClassCondition)\r\n\r\n   WebSocketServletAutoConfiguration.JettyWebSocketConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'org.eclipse.jetty.websocket.jsr356.server.deploy.WebSocketServerContainerInitializer' (OnClassCondition)\r\n\r\n   WebSocketServletAutoConfiguration.UndertowWebSocketConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required class 'io.undertow.websockets.jsr.Bootstrap' (OnClassCondition)\r\n\r\n   XADataSourceAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnBean (types: org.springframework.boot.jdbc.XADataSourceWrapper; SearchStrategy: all) did not find any beans of type org.springframework.boot.jdbc.XADataSourceWrapper (OnBeanCondition)\r\n      Matched:\r\n         - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'javax.transaction.TransactionManager', 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType' (OnClassCondition)\r\n\r\n\r\nExclusions:\r\n-----------\r\n\r\n    None\r\n\r\n\r\nUnconditional classes:\r\n----------------------\r\n\r\n    org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration\r\n\r\n    org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration\r\n\r\n    org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration\r\n\r\n    org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration\r\n\r\n    org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration\r\n\r\n\r\n",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.119+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver",
  "message" : "Found key 'spring.liveBeansView.mbeanDomain' in PropertySource 'systemProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.120+09",
  "level" : "INFO",
  "thread" : "main",
  "logger" : "com.twogather.twogatherwebbackend.TwogatherWebBackendApplication",
  "message" : "Started TwogatherWebBackendApplication in 6.315 seconds (JVM running for 7.343)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.121+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.availability.ApplicationAvailabilityBean",
  "message" : "Application availability state LivenessState changed to CORRECT",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:10.122+09",
  "level" : "DEBUG",
  "thread" : "main",
  "logger" : "org.springframework.boot.availability.ApplicationAvailabilityBean",
  "message" : "Application availability state ReadinessState changed to ACCEPTING_TRAFFIC",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.773+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.springframework.boot.availability.ApplicationAvailabilityBean",
  "message" : "Application availability state ReadinessState changed from ACCEPTING_TRAFFIC to REFUSING_TRAFFIC",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.773+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext",
  "message" : "Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3b220bcb, started on Mon Jun 12 17:06:04 KST 2023",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.773+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver",
  "message" : "Found key 'spring.liveBeansView.mbeanDomain' in PropertySource 'systemProperties' with value of type String",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.774+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.springframework.context.support.DefaultLifecycleProcessor",
  "message" : "Stopping beans in phase 2147483647",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.775+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.springframework.context.support.DefaultLifecycleProcessor",
  "message" : "Bean 'webServerGracefulShutdown' completed its stop procedure",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.775+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.springframework.context.support.DefaultLifecycleProcessor",
  "message" : "Stopping beans in phase 2147483646",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.806+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.springframework.context.support.DefaultLifecycleProcessor",
  "message" : "Bean 'webServerStartStop' completed its stop procedure",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.806+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.springframework.context.support.DefaultLifecycleProcessor",
  "message" : "Stopping beans in phase -2147483647",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.806+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.springframework.context.support.DefaultLifecycleProcessor",
  "message" : "Bean 'springBootLoggingLifecycle' completed its stop procedure",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.807+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.springframework.jmx.export.annotation.AnnotationMBeanExporter",
  "message" : "Unregistering JMX-exposed beans on shutdown",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.807+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.springframework.jmx.export.annotation.AnnotationMBeanExporter",
  "message" : "Unregistering JMX-exposed beans",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.808+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor",
  "message" : "Shutting down ExecutorService 'applicationTaskExecutor'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.812+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.apache.http.impl.conn.PoolingHttpClientConnectionManager",
  "message" : "Connection manager is shutting down",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.813+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.apache.http.impl.conn.PoolingHttpClientConnectionManager",
  "message" : "Connection manager shut down",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.813+09",
  "level" : "INFO",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean",
  "message" : "Closing JPA EntityManagerFactory for persistence unit 'default'",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.813+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.hibernate.internal.SessionFactoryImpl",
  "message" : "HHH000031: Closing",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.813+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.hibernate.type.spi.TypeConfiguration$Scope",
  "message" : "Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@410d4f59] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@71f29d91]",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.813+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.hibernate.service.internal.AbstractServiceRegistryImpl",
  "message" : "Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.814+09",
  "level" : "DEBUG",
  "thread" : "java-sdk-http-connection-reaper",
  "logger" : "com.amazonaws.http.IdleConnectionReaper",
  "message" : "Reaper thread: ",
  "context" : "default",
  "exception" : "java.lang.InterruptedException: sleep interrupted\r\n\tat java.base/java.lang.Thread.sleep(Native Method)\r\n\tat com.amazonaws.http.IdleConnectionReaper.run(IdleConnectionReaper.java:188)\r\n"
}
{
  "timestamp" : "2023-06-12T17:06:11.814+09",
  "level" : "DEBUG",
  "thread" : "java-sdk-http-connection-reaper",
  "logger" : "com.amazonaws.http.IdleConnectionReaper",
  "message" : "Shutting down reaper thread.",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.815+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "org.hibernate.boot.registry.internal.BootstrapServiceRegistryImpl",
  "message" : "Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.815+09",
  "level" : "INFO",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "com.zaxxer.hikari.HikariDataSource",
  "message" : "HikariPool-1 - Shutdown initiated...",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.815+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "com.zaxxer.hikari.pool.HikariPool",
  "message" : "HikariPool-1 - Before shutdown stats (total=10, active=0, idle=10, waiting=0)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.817+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection closer",
  "logger" : "com.zaxxer.hikari.pool.PoolBase",
  "message" : "HikariPool-1 - Closing connection com.mysql.cj.jdbc.ConnectionImpl@7019d619: (connection evicted)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.821+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection closer",
  "logger" : "com.zaxxer.hikari.pool.PoolBase",
  "message" : "HikariPool-1 - Closing connection com.mysql.cj.jdbc.ConnectionImpl@2f11d595: (connection evicted)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.821+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection closer",
  "logger" : "com.zaxxer.hikari.pool.PoolBase",
  "message" : "HikariPool-1 - Closing connection com.mysql.cj.jdbc.ConnectionImpl@6e2cdfae: (connection evicted)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.821+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection closer",
  "logger" : "com.zaxxer.hikari.pool.PoolBase",
  "message" : "HikariPool-1 - Closing connection com.mysql.cj.jdbc.ConnectionImpl@5f887249: (connection evicted)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.821+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection closer",
  "logger" : "com.zaxxer.hikari.pool.PoolBase",
  "message" : "HikariPool-1 - Closing connection com.mysql.cj.jdbc.ConnectionImpl@e0320e1: (connection evicted)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.822+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection closer",
  "logger" : "com.zaxxer.hikari.pool.PoolBase",
  "message" : "HikariPool-1 - Closing connection com.mysql.cj.jdbc.ConnectionImpl@49214130: (connection evicted)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.822+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection closer",
  "logger" : "com.zaxxer.hikari.pool.PoolBase",
  "message" : "HikariPool-1 - Closing connection com.mysql.cj.jdbc.ConnectionImpl@a4d5a4b: (connection evicted)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.822+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection closer",
  "logger" : "com.zaxxer.hikari.pool.PoolBase",
  "message" : "HikariPool-1 - Closing connection com.mysql.cj.jdbc.ConnectionImpl@29d6df52: (connection evicted)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.822+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection closer",
  "logger" : "com.zaxxer.hikari.pool.PoolBase",
  "message" : "HikariPool-1 - Closing connection com.mysql.cj.jdbc.ConnectionImpl@358a3d71: (connection evicted)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.822+09",
  "level" : "DEBUG",
  "thread" : "HikariPool-1 connection closer",
  "logger" : "com.zaxxer.hikari.pool.PoolBase",
  "message" : "HikariPool-1 - Closing connection com.mysql.cj.jdbc.ConnectionImpl@29ca1517: (connection evicted)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.823+09",
  "level" : "DEBUG",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "com.zaxxer.hikari.pool.HikariPool",
  "message" : "HikariPool-1 - After shutdown stats (total=0, active=0, idle=0, waiting=0)",
  "context" : "default"
}
{
  "timestamp" : "2023-06-12T17:06:11.823+09",
  "level" : "INFO",
  "thread" : "SpringApplicationShutdownHook",
  "logger" : "com.zaxxer.hikari.HikariDataSource",
  "message" : "HikariPool-1 - Shutdown completed.",
  "context" : "default"
}
